// Code generated by mockery. DO NOT EDIT.

package testing

import (
	docker "github.com/goravel/framework/contracts/testing/docker"
	mock "github.com/stretchr/testify/mock"
)

// Docker is an autogenerated mock type for the Docker type
type Docker struct {
	mock.Mock
}

type Docker_Expecter struct {
	mock *mock.Mock
}

func (_m *Docker) EXPECT() *Docker_Expecter {
	return &Docker_Expecter{mock: &_m.Mock}
}

// Database provides a mock function with given fields: connection
func (_m *Docker) Database(connection ...string) (docker.Database, error) {
	_va := make([]interface{}, len(connection))
	for _i := range connection {
		_va[_i] = connection[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 docker.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (docker.Database, error)); ok {
		return rf(connection...)
	}
	if rf, ok := ret.Get(0).(func(...string) docker.Database); ok {
		r0 = rf(connection...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(docker.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(connection...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type Docker_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - connection ...string
func (_e *Docker_Expecter) Database(connection ...interface{}) *Docker_Database_Call {
	return &Docker_Database_Call{Call: _e.mock.On("Database",
		append([]interface{}{}, connection...)...)}
}

func (_c *Docker_Database_Call) Run(run func(connection ...string)) *Docker_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Docker_Database_Call) Return(_a0 docker.Database, _a1 error) *Docker_Database_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_Database_Call) RunAndReturn(run func(...string) (docker.Database, error)) *Docker_Database_Call {
	_c.Call.Return(run)
	return _c
}

// NewDocker creates a new instance of Docker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Docker {
	mock := &Docker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
