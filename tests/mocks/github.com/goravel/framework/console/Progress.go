// Code generated by mockery. DO NOT EDIT.

package console

import (
	console "github.com/goravel/framework/contracts/console"
	mock "github.com/stretchr/testify/mock"
)

// Progress is an autogenerated mock type for the Progress type
type Progress struct {
	mock.Mock
}

type Progress_Expecter struct {
	mock *mock.Mock
}

func (_m *Progress) EXPECT() *Progress_Expecter {
	return &Progress_Expecter{mock: &_m.Mock}
}

// Advance provides a mock function with given fields: step
func (_m *Progress) Advance(step ...int) {
	_va := make([]interface{}, len(step))
	for _i := range step {
		_va[_i] = step[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Progress_Advance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Advance'
type Progress_Advance_Call struct {
	*mock.Call
}

// Advance is a helper method to define mock.On call
//   - step ...int
func (_e *Progress_Expecter) Advance(step ...interface{}) *Progress_Advance_Call {
	return &Progress_Advance_Call{Call: _e.mock.On("Advance",
		append([]interface{}{}, step...)...)}
}

func (_c *Progress_Advance_Call) Run(run func(step ...int)) *Progress_Advance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Progress_Advance_Call) Return() *Progress_Advance_Call {
	_c.Call.Return()
	return _c
}

func (_c *Progress_Advance_Call) RunAndReturn(run func(...int)) *Progress_Advance_Call {
	_c.Run(run)
	return _c
}

// Finish provides a mock function with no fields
func (_m *Progress) Finish() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Finish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Progress_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type Progress_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
func (_e *Progress_Expecter) Finish() *Progress_Finish_Call {
	return &Progress_Finish_Call{Call: _e.mock.On("Finish")}
}

func (_c *Progress_Finish_Call) Run(run func()) *Progress_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Progress_Finish_Call) Return(_a0 error) *Progress_Finish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Progress_Finish_Call) RunAndReturn(run func() error) *Progress_Finish_Call {
	_c.Call.Return(run)
	return _c
}

// SetTitle provides a mock function with given fields: message
func (_m *Progress) SetTitle(message string) {
	_m.Called(message)
}

// Progress_SetTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTitle'
type Progress_SetTitle_Call struct {
	*mock.Call
}

// SetTitle is a helper method to define mock.On call
//   - message string
func (_e *Progress_Expecter) SetTitle(message interface{}) *Progress_SetTitle_Call {
	return &Progress_SetTitle_Call{Call: _e.mock.On("SetTitle", message)}
}

func (_c *Progress_SetTitle_Call) Run(run func(message string)) *Progress_SetTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Progress_SetTitle_Call) Return() *Progress_SetTitle_Call {
	_c.Call.Return()
	return _c
}

func (_c *Progress_SetTitle_Call) RunAndReturn(run func(string)) *Progress_SetTitle_Call {
	_c.Run(run)
	return _c
}

// ShowElapsedTime provides a mock function with given fields: b
func (_m *Progress) ShowElapsedTime(b ...bool) console.Progress {
	_va := make([]interface{}, len(b))
	for _i := range b {
		_va[_i] = b[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShowElapsedTime")
	}

	var r0 console.Progress
	if rf, ok := ret.Get(0).(func(...bool) console.Progress); ok {
		r0 = rf(b...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(console.Progress)
		}
	}

	return r0
}

// Progress_ShowElapsedTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowElapsedTime'
type Progress_ShowElapsedTime_Call struct {
	*mock.Call
}

// ShowElapsedTime is a helper method to define mock.On call
//   - b ...bool
func (_e *Progress_Expecter) ShowElapsedTime(b ...interface{}) *Progress_ShowElapsedTime_Call {
	return &Progress_ShowElapsedTime_Call{Call: _e.mock.On("ShowElapsedTime",
		append([]interface{}{}, b...)...)}
}

func (_c *Progress_ShowElapsedTime_Call) Run(run func(b ...bool)) *Progress_ShowElapsedTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Progress_ShowElapsedTime_Call) Return(_a0 console.Progress) *Progress_ShowElapsedTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Progress_ShowElapsedTime_Call) RunAndReturn(run func(...bool) console.Progress) *Progress_ShowElapsedTime_Call {
	_c.Call.Return(run)
	return _c
}

// ShowTitle provides a mock function with given fields: b
func (_m *Progress) ShowTitle(b ...bool) console.Progress {
	_va := make([]interface{}, len(b))
	for _i := range b {
		_va[_i] = b[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShowTitle")
	}

	var r0 console.Progress
	if rf, ok := ret.Get(0).(func(...bool) console.Progress); ok {
		r0 = rf(b...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(console.Progress)
		}
	}

	return r0
}

// Progress_ShowTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowTitle'
type Progress_ShowTitle_Call struct {
	*mock.Call
}

// ShowTitle is a helper method to define mock.On call
//   - b ...bool
func (_e *Progress_Expecter) ShowTitle(b ...interface{}) *Progress_ShowTitle_Call {
	return &Progress_ShowTitle_Call{Call: _e.mock.On("ShowTitle",
		append([]interface{}{}, b...)...)}
}

func (_c *Progress_ShowTitle_Call) Run(run func(b ...bool)) *Progress_ShowTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Progress_ShowTitle_Call) Return(_a0 console.Progress) *Progress_ShowTitle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Progress_ShowTitle_Call) RunAndReturn(run func(...bool) console.Progress) *Progress_ShowTitle_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *Progress) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Progress_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Progress_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Progress_Expecter) Start() *Progress_Start_Call {
	return &Progress_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Progress_Start_Call) Run(run func()) *Progress_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Progress_Start_Call) Return(_a0 error) *Progress_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Progress_Start_Call) RunAndReturn(run func() error) *Progress_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewProgress creates a new instance of Progress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProgress(t interface {
	mock.TestingT
	Cleanup(func())
}) *Progress {
	mock := &Progress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
