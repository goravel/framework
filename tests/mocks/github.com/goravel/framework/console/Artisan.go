// Code generated by mockery. DO NOT EDIT.

package console

import (
	console "github.com/goravel/framework/contracts/console"
	mock "github.com/stretchr/testify/mock"
)

// Artisan is an autogenerated mock type for the Artisan type
type Artisan struct {
	mock.Mock
}

type Artisan_Expecter struct {
	mock *mock.Mock
}

func (_m *Artisan) EXPECT() *Artisan_Expecter {
	return &Artisan_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: command
func (_m *Artisan) Call(command string) error {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Artisan_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type Artisan_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - command string
func (_e *Artisan_Expecter) Call(command interface{}) *Artisan_Call_Call {
	return &Artisan_Call_Call{Call: _e.mock.On("Call", command)}
}

func (_c *Artisan_Call_Call) Run(run func(command string)) *Artisan_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Artisan_Call_Call) Return(_a0 error) *Artisan_Call_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Artisan_Call_Call) RunAndReturn(run func(string) error) *Artisan_Call_Call {
	_c.Call.Return(run)
	return _c
}

// CallAndExit provides a mock function with given fields: command
func (_m *Artisan) CallAndExit(command string) {
	_m.Called(command)
}

// Artisan_CallAndExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallAndExit'
type Artisan_CallAndExit_Call struct {
	*mock.Call
}

// CallAndExit is a helper method to define mock.On call
//   - command string
func (_e *Artisan_Expecter) CallAndExit(command interface{}) *Artisan_CallAndExit_Call {
	return &Artisan_CallAndExit_Call{Call: _e.mock.On("CallAndExit", command)}
}

func (_c *Artisan_CallAndExit_Call) Run(run func(command string)) *Artisan_CallAndExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Artisan_CallAndExit_Call) Return() *Artisan_CallAndExit_Call {
	_c.Call.Return()
	return _c
}

func (_c *Artisan_CallAndExit_Call) RunAndReturn(run func(string)) *Artisan_CallAndExit_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: commands
func (_m *Artisan) Register(commands []console.Command) {
	_m.Called(commands)
}

// Artisan_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Artisan_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - commands []console.Command
func (_e *Artisan_Expecter) Register(commands interface{}) *Artisan_Register_Call {
	return &Artisan_Register_Call{Call: _e.mock.On("Register", commands)}
}

func (_c *Artisan_Register_Call) Run(run func(commands []console.Command)) *Artisan_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]console.Command))
	})
	return _c
}

func (_c *Artisan_Register_Call) Return() *Artisan_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *Artisan_Register_Call) RunAndReturn(run func([]console.Command)) *Artisan_Register_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function with given fields: args, exitIfArtisan
func (_m *Artisan) Run(args []string, exitIfArtisan bool) error {
	ret := _m.Called(args, exitIfArtisan)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, bool) error); ok {
		r0 = rf(args, exitIfArtisan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Artisan_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Artisan_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - args []string
//   - exitIfArtisan bool
func (_e *Artisan_Expecter) Run(args interface{}, exitIfArtisan interface{}) *Artisan_Run_Call {
	return &Artisan_Run_Call{Call: _e.mock.On("Run", args, exitIfArtisan)}
}

func (_c *Artisan_Run_Call) Run(run func(args []string, exitIfArtisan bool)) *Artisan_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(bool))
	})
	return _c
}

func (_c *Artisan_Run_Call) Return(_a0 error) *Artisan_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Artisan_Run_Call) RunAndReturn(run func([]string, bool) error) *Artisan_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtisan creates a new instance of Artisan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtisan(t interface {
	mock.TestingT
	Cleanup(func())
}) *Artisan {
	mock := &Artisan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
