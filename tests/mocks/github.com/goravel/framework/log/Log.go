// Code generated by mockery. DO NOT EDIT.

package log

import (
	context "context"

	http "github.com/goravel/framework/contracts/http"
	log "github.com/goravel/framework/contracts/log"

	mock "github.com/stretchr/testify/mock"
)

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

type Log_Expecter struct {
	mock *mock.Mock
}

func (_m *Log) EXPECT() *Log_Expecter {
	return &Log_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function with given fields: channel
func (_m *Log) Channel(channel string) log.Writer {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(string) log.Writer); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type Log_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
//   - channel string
func (_e *Log_Expecter) Channel(channel interface{}) *Log_Channel_Call {
	return &Log_Channel_Call{Call: _e.mock.On("Channel", channel)}
}

func (_c *Log_Channel_Call) Run(run func(channel string)) *Log_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Log_Channel_Call) Return(_a0 log.Writer) *Log_Channel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Channel_Call) RunAndReturn(run func(string) log.Writer) *Log_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// Code provides a mock function with given fields: code
func (_m *Log) Code(code string) log.Writer {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for Code")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(string) log.Writer); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Code_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Code'
type Log_Code_Call struct {
	*mock.Call
}

// Code is a helper method to define mock.On call
//   - code string
func (_e *Log_Expecter) Code(code interface{}) *Log_Code_Call {
	return &Log_Code_Call{Call: _e.mock.On("Code", code)}
}

func (_c *Log_Code_Call) Run(run func(code string)) *Log_Code_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Log_Code_Call) Return(_a0 log.Writer) *Log_Code_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Code_Call) RunAndReturn(run func(string) log.Writer) *Log_Code_Call {
	_c.Call.Return(run)
	return _c
}

// Debug provides a mock function with given fields: args
func (_m *Log) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Log_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Debug(args ...interface{}) *Log_Debug_Call {
	return &Log_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Debug_Call) Run(run func(args ...interface{})) *Log_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Debug_Call) Return() *Log_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Debug_Call) RunAndReturn(run func(...interface{})) *Log_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function with given fields: format, args
func (_m *Log) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Log_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Debugf(format interface{}, args ...interface{}) *Log_Debugf_Call {
	return &Log_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Debugf_Call) Run(run func(format string, args ...interface{})) *Log_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Debugf_Call) Return() *Log_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: args
func (_m *Log) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Log_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Error(args ...interface{}) *Log_Error_Call {
	return &Log_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Error_Call) Run(run func(args ...interface{})) *Log_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Error_Call) Return() *Log_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Error_Call) RunAndReturn(run func(...interface{})) *Log_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *Log) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Log_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Errorf(format interface{}, args ...interface{}) *Log_Errorf_Call {
	return &Log_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Errorf_Call) Run(run func(format string, args ...interface{})) *Log_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Errorf_Call) Return() *Log_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: args
func (_m *Log) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type Log_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Fatal(args ...interface{}) *Log_Fatal_Call {
	return &Log_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Fatal_Call) Run(run func(args ...interface{})) *Log_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Fatal_Call) Return() *Log_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Fatal_Call) RunAndReturn(run func(...interface{})) *Log_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *Log) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type Log_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Fatalf(format interface{}, args ...interface{}) *Log_Fatalf_Call {
	return &Log_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Fatalf_Call) Run(run func(format string, args ...interface{})) *Log_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Fatalf_Call) Return() *Log_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Hint provides a mock function with given fields: hint
func (_m *Log) Hint(hint string) log.Writer {
	ret := _m.Called(hint)

	if len(ret) == 0 {
		panic("no return value specified for Hint")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(string) log.Writer); ok {
		r0 = rf(hint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Hint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hint'
type Log_Hint_Call struct {
	*mock.Call
}

// Hint is a helper method to define mock.On call
//   - hint string
func (_e *Log_Expecter) Hint(hint interface{}) *Log_Hint_Call {
	return &Log_Hint_Call{Call: _e.mock.On("Hint", hint)}
}

func (_c *Log_Hint_Call) Run(run func(hint string)) *Log_Hint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Log_Hint_Call) Return(_a0 log.Writer) *Log_Hint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Hint_Call) RunAndReturn(run func(string) log.Writer) *Log_Hint_Call {
	_c.Call.Return(run)
	return _c
}

// In provides a mock function with given fields: domain
func (_m *Log) In(domain string) log.Writer {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for In")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(string) log.Writer); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_In_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'In'
type Log_In_Call struct {
	*mock.Call
}

// In is a helper method to define mock.On call
//   - domain string
func (_e *Log_Expecter) In(domain interface{}) *Log_In_Call {
	return &Log_In_Call{Call: _e.mock.On("In", domain)}
}

func (_c *Log_In_Call) Run(run func(domain string)) *Log_In_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Log_In_Call) Return(_a0 log.Writer) *Log_In_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_In_Call) RunAndReturn(run func(string) log.Writer) *Log_In_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: args
func (_m *Log) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Log_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Info(args ...interface{}) *Log_Info_Call {
	return &Log_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Info_Call) Run(run func(args ...interface{})) *Log_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Info_Call) Return() *Log_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Info_Call) RunAndReturn(run func(...interface{})) *Log_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *Log) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Log_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Infof(format interface{}, args ...interface{}) *Log_Infof_Call {
	return &Log_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Infof_Call) Run(run func(format string, args ...interface{})) *Log_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Infof_Call) Return() *Log_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Infof_Call) RunAndReturn(run func(string, ...interface{})) *Log_Infof_Call {
	_c.Run(run)
	return _c
}

// Owner provides a mock function with given fields: owner
func (_m *Log) Owner(owner interface{}) log.Writer {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for Owner")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(interface{}) log.Writer); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Owner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Owner'
type Log_Owner_Call struct {
	*mock.Call
}

// Owner is a helper method to define mock.On call
//   - owner interface{}
func (_e *Log_Expecter) Owner(owner interface{}) *Log_Owner_Call {
	return &Log_Owner_Call{Call: _e.mock.On("Owner", owner)}
}

func (_c *Log_Owner_Call) Run(run func(owner interface{})) *Log_Owner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Log_Owner_Call) Return(_a0 log.Writer) *Log_Owner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Owner_Call) RunAndReturn(run func(interface{}) log.Writer) *Log_Owner_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function with given fields: args
func (_m *Log) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type Log_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Panic(args ...interface{}) *Log_Panic_Call {
	return &Log_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Panic_Call) Run(run func(args ...interface{})) *Log_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Panic_Call) Return() *Log_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Panic_Call) RunAndReturn(run func(...interface{})) *Log_Panic_Call {
	_c.Run(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *Log) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type Log_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Panicf(format interface{}, args ...interface{}) *Log_Panicf_Call {
	return &Log_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Panicf_Call) Run(run func(format string, args ...interface{})) *Log_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Panicf_Call) Return() *Log_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Panicf_Call {
	_c.Run(run)
	return _c
}

// Request provides a mock function with given fields: req
func (_m *Log) Request(req http.ContextRequest) log.Writer {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(http.ContextRequest) log.Writer); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Log_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - req http.ContextRequest
func (_e *Log_Expecter) Request(req interface{}) *Log_Request_Call {
	return &Log_Request_Call{Call: _e.mock.On("Request", req)}
}

func (_c *Log_Request_Call) Run(run func(req http.ContextRequest)) *Log_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ContextRequest))
	})
	return _c
}

func (_c *Log_Request_Call) Return(_a0 log.Writer) *Log_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Request_Call) RunAndReturn(run func(http.ContextRequest) log.Writer) *Log_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields: res
func (_m *Log) Response(res http.ContextResponse) log.Writer {
	ret := _m.Called(res)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(http.ContextResponse) log.Writer); ok {
		r0 = rf(res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type Log_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - res http.ContextResponse
func (_e *Log_Expecter) Response(res interface{}) *Log_Response_Call {
	return &Log_Response_Call{Call: _e.mock.On("Response", res)}
}

func (_c *Log_Response_Call) Run(run func(res http.ContextResponse)) *Log_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ContextResponse))
	})
	return _c
}

func (_c *Log_Response_Call) Return(_a0 log.Writer) *Log_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Response_Call) RunAndReturn(run func(http.ContextResponse) log.Writer) *Log_Response_Call {
	_c.Call.Return(run)
	return _c
}

// Stack provides a mock function with given fields: channels
func (_m *Log) Stack(channels []string) log.Writer {
	ret := _m.Called(channels)

	if len(ret) == 0 {
		panic("no return value specified for Stack")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func([]string) log.Writer); ok {
		r0 = rf(channels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Stack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stack'
type Log_Stack_Call struct {
	*mock.Call
}

// Stack is a helper method to define mock.On call
//   - channels []string
func (_e *Log_Expecter) Stack(channels interface{}) *Log_Stack_Call {
	return &Log_Stack_Call{Call: _e.mock.On("Stack", channels)}
}

func (_c *Log_Stack_Call) Run(run func(channels []string)) *Log_Stack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Log_Stack_Call) Return(_a0 log.Writer) *Log_Stack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Stack_Call) RunAndReturn(run func([]string) log.Writer) *Log_Stack_Call {
	_c.Call.Return(run)
	return _c
}

// Tags provides a mock function with given fields: tags
func (_m *Log) Tags(tags ...string) log.Writer {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(...string) log.Writer); ok {
		r0 = rf(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_Tags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tags'
type Log_Tags_Call struct {
	*mock.Call
}

// Tags is a helper method to define mock.On call
//   - tags ...string
func (_e *Log_Expecter) Tags(tags ...interface{}) *Log_Tags_Call {
	return &Log_Tags_Call{Call: _e.mock.On("Tags",
		append([]interface{}{}, tags...)...)}
}

func (_c *Log_Tags_Call) Run(run func(tags ...string)) *Log_Tags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Tags_Call) Return(_a0 log.Writer) *Log_Tags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_Tags_Call) RunAndReturn(run func(...string) log.Writer) *Log_Tags_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields: user
func (_m *Log) User(user interface{}) log.Writer {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(interface{}) log.Writer); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type Log_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - user interface{}
func (_e *Log_Expecter) User(user interface{}) *Log_User_Call {
	return &Log_User_Call{Call: _e.mock.On("User", user)}
}

func (_c *Log_User_Call) Run(run func(user interface{})) *Log_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Log_User_Call) Return(_a0 log.Writer) *Log_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_User_Call) RunAndReturn(run func(interface{}) log.Writer) *Log_User_Call {
	_c.Call.Return(run)
	return _c
}

// Warning provides a mock function with given fields: args
func (_m *Log) Warning(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type Log_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Log_Expecter) Warning(args ...interface{}) *Log_Warning_Call {
	return &Log_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{}, args...)...)}
}

func (_c *Log_Warning_Call) Run(run func(args ...interface{})) *Log_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Warning_Call) Return() *Log_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Warning_Call) RunAndReturn(run func(...interface{})) *Log_Warning_Call {
	_c.Run(run)
	return _c
}

// Warningf provides a mock function with given fields: format, args
func (_m *Log) Warningf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Log_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type Log_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Log_Expecter) Warningf(format interface{}, args ...interface{}) *Log_Warningf_Call {
	return &Log_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Warningf_Call) Run(run func(format string, args ...interface{})) *Log_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Warningf_Call) Return() *Log_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Warningf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Warningf_Call {
	_c.Run(run)
	return _c
}

// With provides a mock function with given fields: data
func (_m *Log) With(data map[string]interface{}) log.Writer {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(map[string]interface{}) log.Writer); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type Log_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - data map[string]interface{}
func (_e *Log_Expecter) With(data interface{}) *Log_With_Call {
	return &Log_With_Call{Call: _e.mock.On("With", data)}
}

func (_c *Log_With_Call) Run(run func(data map[string]interface{})) *Log_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Log_With_Call) Return(_a0 log.Writer) *Log_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_With_Call) RunAndReturn(run func(map[string]interface{}) log.Writer) *Log_With_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Log) WithContext(ctx context.Context) log.Writer {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func(context.Context) log.Writer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Log_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Log_Expecter) WithContext(ctx interface{}) *Log_WithContext_Call {
	return &Log_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Log_WithContext_Call) Run(run func(ctx context.Context)) *Log_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Log_WithContext_Call) Return(_a0 log.Writer) *Log_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_WithContext_Call) RunAndReturn(run func(context.Context) log.Writer) *Log_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WithTrace provides a mock function with no fields
func (_m *Log) WithTrace() log.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithTrace")
	}

	var r0 log.Writer
	if rf, ok := ret.Get(0).(func() log.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Writer)
		}
	}

	return r0
}

// Log_WithTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTrace'
type Log_WithTrace_Call struct {
	*mock.Call
}

// WithTrace is a helper method to define mock.On call
func (_e *Log_Expecter) WithTrace() *Log_WithTrace_Call {
	return &Log_WithTrace_Call{Call: _e.mock.On("WithTrace")}
}

func (_c *Log_WithTrace_Call) Run(run func()) *Log_WithTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_WithTrace_Call) Return(_a0 log.Writer) *Log_WithTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_WithTrace_Call) RunAndReturn(run func() log.Writer) *Log_WithTrace_Call {
	_c.Call.Return(run)
	return _c
}

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
