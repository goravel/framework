// Code generated by mockery. DO NOT EDIT.

package log

import (
	log "github.com/goravel/framework/contracts/log"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: channel
func (_m *Logger) Handle(channel string) (log.Hook, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 log.Hook
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (log.Hook, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(string) log.Hook); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Hook)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Logger_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - channel string
func (_e *Logger_Expecter) Handle(channel interface{}) *Logger_Handle_Call {
	return &Logger_Handle_Call{Call: _e.mock.On("Handle", channel)}
}

func (_c *Logger_Handle_Call) Run(run func(channel string)) *Logger_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Logger_Handle_Call) Return(_a0 log.Hook, _a1 error) *Logger_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Logger_Handle_Call) RunAndReturn(run func(string) (log.Hook, error)) *Logger_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
