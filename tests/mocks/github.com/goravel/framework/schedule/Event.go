// Code generated by mockery. DO NOT EDIT.

package schedule

import (
	schedule "github.com/goravel/framework/contracts/schedule"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// At provides a mock function with given fields: time
func (_m *Event) At(time string) schedule.Event {
	ret := _m.Called(time)

	if len(ret) == 0 {
		panic("no return value specified for At")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_At_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'At'
type Event_At_Call struct {
	*mock.Call
}

// At is a helper method to define mock.On call
//   - time string
func (_e *Event_Expecter) At(time interface{}) *Event_At_Call {
	return &Event_At_Call{Call: _e.mock.On("At", time)}
}

func (_c *Event_At_Call) Run(run func(time string)) *Event_At_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Event_At_Call) Return(_a0 schedule.Event) *Event_At_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_At_Call) RunAndReturn(run func(string) schedule.Event) *Event_At_Call {
	_c.Call.Return(run)
	return _c
}

// Cron provides a mock function with given fields: expression
func (_m *Event) Cron(expression string) schedule.Event {
	ret := _m.Called(expression)

	if len(ret) == 0 {
		panic("no return value specified for Cron")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_Cron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cron'
type Event_Cron_Call struct {
	*mock.Call
}

// Cron is a helper method to define mock.On call
//   - expression string
func (_e *Event_Expecter) Cron(expression interface{}) *Event_Cron_Call {
	return &Event_Cron_Call{Call: _e.mock.On("Cron", expression)}
}

func (_c *Event_Cron_Call) Run(run func(expression string)) *Event_Cron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Event_Cron_Call) Return(_a0 schedule.Event) *Event_Cron_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_Cron_Call) RunAndReturn(run func(string) schedule.Event) *Event_Cron_Call {
	_c.Call.Return(run)
	return _c
}

// Daily provides a mock function with no fields
func (_m *Event) Daily() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Daily")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_Daily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Daily'
type Event_Daily_Call struct {
	*mock.Call
}

// Daily is a helper method to define mock.On call
func (_e *Event_Expecter) Daily() *Event_Daily_Call {
	return &Event_Daily_Call{Call: _e.mock.On("Daily")}
}

func (_c *Event_Daily_Call) Run(run func()) *Event_Daily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_Daily_Call) Return(_a0 schedule.Event) *Event_Daily_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_Daily_Call) RunAndReturn(run func() schedule.Event) *Event_Daily_Call {
	_c.Call.Return(run)
	return _c
}

// DailyAt provides a mock function with given fields: time
func (_m *Event) DailyAt(time string) schedule.Event {
	ret := _m.Called(time)

	if len(ret) == 0 {
		panic("no return value specified for DailyAt")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_DailyAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyAt'
type Event_DailyAt_Call struct {
	*mock.Call
}

// DailyAt is a helper method to define mock.On call
//   - time string
func (_e *Event_Expecter) DailyAt(time interface{}) *Event_DailyAt_Call {
	return &Event_DailyAt_Call{Call: _e.mock.On("DailyAt", time)}
}

func (_c *Event_DailyAt_Call) Run(run func(time string)) *Event_DailyAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Event_DailyAt_Call) Return(_a0 schedule.Event) *Event_DailyAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_DailyAt_Call) RunAndReturn(run func(string) schedule.Event) *Event_DailyAt_Call {
	_c.Call.Return(run)
	return _c
}

// DelayIfStillRunning provides a mock function with no fields
func (_m *Event) DelayIfStillRunning() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DelayIfStillRunning")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_DelayIfStillRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelayIfStillRunning'
type Event_DelayIfStillRunning_Call struct {
	*mock.Call
}

// DelayIfStillRunning is a helper method to define mock.On call
func (_e *Event_Expecter) DelayIfStillRunning() *Event_DelayIfStillRunning_Call {
	return &Event_DelayIfStillRunning_Call{Call: _e.mock.On("DelayIfStillRunning")}
}

func (_c *Event_DelayIfStillRunning_Call) Run(run func()) *Event_DelayIfStillRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_DelayIfStillRunning_Call) Return(_a0 schedule.Event) *Event_DelayIfStillRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_DelayIfStillRunning_Call) RunAndReturn(run func() schedule.Event) *Event_DelayIfStillRunning_Call {
	_c.Call.Return(run)
	return _c
}

// EveryFifteenMinutes provides a mock function with no fields
func (_m *Event) EveryFifteenMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryFifteenMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryFifteenMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryFifteenMinutes'
type Event_EveryFifteenMinutes_Call struct {
	*mock.Call
}

// EveryFifteenMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryFifteenMinutes() *Event_EveryFifteenMinutes_Call {
	return &Event_EveryFifteenMinutes_Call{Call: _e.mock.On("EveryFifteenMinutes")}
}

func (_c *Event_EveryFifteenMinutes_Call) Run(run func()) *Event_EveryFifteenMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryFifteenMinutes_Call) Return(_a0 schedule.Event) *Event_EveryFifteenMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryFifteenMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryFifteenMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryFiveMinutes provides a mock function with no fields
func (_m *Event) EveryFiveMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryFiveMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryFiveMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryFiveMinutes'
type Event_EveryFiveMinutes_Call struct {
	*mock.Call
}

// EveryFiveMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryFiveMinutes() *Event_EveryFiveMinutes_Call {
	return &Event_EveryFiveMinutes_Call{Call: _e.mock.On("EveryFiveMinutes")}
}

func (_c *Event_EveryFiveMinutes_Call) Run(run func()) *Event_EveryFiveMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryFiveMinutes_Call) Return(_a0 schedule.Event) *Event_EveryFiveMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryFiveMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryFiveMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryFourHours provides a mock function with no fields
func (_m *Event) EveryFourHours() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryFourHours")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryFourHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryFourHours'
type Event_EveryFourHours_Call struct {
	*mock.Call
}

// EveryFourHours is a helper method to define mock.On call
func (_e *Event_Expecter) EveryFourHours() *Event_EveryFourHours_Call {
	return &Event_EveryFourHours_Call{Call: _e.mock.On("EveryFourHours")}
}

func (_c *Event_EveryFourHours_Call) Run(run func()) *Event_EveryFourHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryFourHours_Call) Return(_a0 schedule.Event) *Event_EveryFourHours_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryFourHours_Call) RunAndReturn(run func() schedule.Event) *Event_EveryFourHours_Call {
	_c.Call.Return(run)
	return _c
}

// EveryFourMinutes provides a mock function with no fields
func (_m *Event) EveryFourMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryFourMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryFourMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryFourMinutes'
type Event_EveryFourMinutes_Call struct {
	*mock.Call
}

// EveryFourMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryFourMinutes() *Event_EveryFourMinutes_Call {
	return &Event_EveryFourMinutes_Call{Call: _e.mock.On("EveryFourMinutes")}
}

func (_c *Event_EveryFourMinutes_Call) Run(run func()) *Event_EveryFourMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryFourMinutes_Call) Return(_a0 schedule.Event) *Event_EveryFourMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryFourMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryFourMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryMinute provides a mock function with no fields
func (_m *Event) EveryMinute() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryMinute")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryMinute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryMinute'
type Event_EveryMinute_Call struct {
	*mock.Call
}

// EveryMinute is a helper method to define mock.On call
func (_e *Event_Expecter) EveryMinute() *Event_EveryMinute_Call {
	return &Event_EveryMinute_Call{Call: _e.mock.On("EveryMinute")}
}

func (_c *Event_EveryMinute_Call) Run(run func()) *Event_EveryMinute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryMinute_Call) Return(_a0 schedule.Event) *Event_EveryMinute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryMinute_Call) RunAndReturn(run func() schedule.Event) *Event_EveryMinute_Call {
	_c.Call.Return(run)
	return _c
}

// EverySixHours provides a mock function with no fields
func (_m *Event) EverySixHours() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EverySixHours")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EverySixHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EverySixHours'
type Event_EverySixHours_Call struct {
	*mock.Call
}

// EverySixHours is a helper method to define mock.On call
func (_e *Event_Expecter) EverySixHours() *Event_EverySixHours_Call {
	return &Event_EverySixHours_Call{Call: _e.mock.On("EverySixHours")}
}

func (_c *Event_EverySixHours_Call) Run(run func()) *Event_EverySixHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EverySixHours_Call) Return(_a0 schedule.Event) *Event_EverySixHours_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EverySixHours_Call) RunAndReturn(run func() schedule.Event) *Event_EverySixHours_Call {
	_c.Call.Return(run)
	return _c
}

// EveryTenMinutes provides a mock function with no fields
func (_m *Event) EveryTenMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryTenMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryTenMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryTenMinutes'
type Event_EveryTenMinutes_Call struct {
	*mock.Call
}

// EveryTenMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryTenMinutes() *Event_EveryTenMinutes_Call {
	return &Event_EveryTenMinutes_Call{Call: _e.mock.On("EveryTenMinutes")}
}

func (_c *Event_EveryTenMinutes_Call) Run(run func()) *Event_EveryTenMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryTenMinutes_Call) Return(_a0 schedule.Event) *Event_EveryTenMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryTenMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryTenMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryThirtyMinutes provides a mock function with no fields
func (_m *Event) EveryThirtyMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryThirtyMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryThirtyMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryThirtyMinutes'
type Event_EveryThirtyMinutes_Call struct {
	*mock.Call
}

// EveryThirtyMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryThirtyMinutes() *Event_EveryThirtyMinutes_Call {
	return &Event_EveryThirtyMinutes_Call{Call: _e.mock.On("EveryThirtyMinutes")}
}

func (_c *Event_EveryThirtyMinutes_Call) Run(run func()) *Event_EveryThirtyMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryThirtyMinutes_Call) Return(_a0 schedule.Event) *Event_EveryThirtyMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryThirtyMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryThirtyMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryThreeHours provides a mock function with no fields
func (_m *Event) EveryThreeHours() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryThreeHours")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryThreeHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryThreeHours'
type Event_EveryThreeHours_Call struct {
	*mock.Call
}

// EveryThreeHours is a helper method to define mock.On call
func (_e *Event_Expecter) EveryThreeHours() *Event_EveryThreeHours_Call {
	return &Event_EveryThreeHours_Call{Call: _e.mock.On("EveryThreeHours")}
}

func (_c *Event_EveryThreeHours_Call) Run(run func()) *Event_EveryThreeHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryThreeHours_Call) Return(_a0 schedule.Event) *Event_EveryThreeHours_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryThreeHours_Call) RunAndReturn(run func() schedule.Event) *Event_EveryThreeHours_Call {
	_c.Call.Return(run)
	return _c
}

// EveryThreeMinutes provides a mock function with no fields
func (_m *Event) EveryThreeMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryThreeMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryThreeMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryThreeMinutes'
type Event_EveryThreeMinutes_Call struct {
	*mock.Call
}

// EveryThreeMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryThreeMinutes() *Event_EveryThreeMinutes_Call {
	return &Event_EveryThreeMinutes_Call{Call: _e.mock.On("EveryThreeMinutes")}
}

func (_c *Event_EveryThreeMinutes_Call) Run(run func()) *Event_EveryThreeMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryThreeMinutes_Call) Return(_a0 schedule.Event) *Event_EveryThreeMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryThreeMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryThreeMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EveryTwoHours provides a mock function with no fields
func (_m *Event) EveryTwoHours() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryTwoHours")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryTwoHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryTwoHours'
type Event_EveryTwoHours_Call struct {
	*mock.Call
}

// EveryTwoHours is a helper method to define mock.On call
func (_e *Event_Expecter) EveryTwoHours() *Event_EveryTwoHours_Call {
	return &Event_EveryTwoHours_Call{Call: _e.mock.On("EveryTwoHours")}
}

func (_c *Event_EveryTwoHours_Call) Run(run func()) *Event_EveryTwoHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryTwoHours_Call) Return(_a0 schedule.Event) *Event_EveryTwoHours_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryTwoHours_Call) RunAndReturn(run func() schedule.Event) *Event_EveryTwoHours_Call {
	_c.Call.Return(run)
	return _c
}

// EveryTwoMinutes provides a mock function with no fields
func (_m *Event) EveryTwoMinutes() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EveryTwoMinutes")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_EveryTwoMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EveryTwoMinutes'
type Event_EveryTwoMinutes_Call struct {
	*mock.Call
}

// EveryTwoMinutes is a helper method to define mock.On call
func (_e *Event_Expecter) EveryTwoMinutes() *Event_EveryTwoMinutes_Call {
	return &Event_EveryTwoMinutes_Call{Call: _e.mock.On("EveryTwoMinutes")}
}

func (_c *Event_EveryTwoMinutes_Call) Run(run func()) *Event_EveryTwoMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_EveryTwoMinutes_Call) Return(_a0 schedule.Event) *Event_EveryTwoMinutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_EveryTwoMinutes_Call) RunAndReturn(run func() schedule.Event) *Event_EveryTwoMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// GetCallback provides a mock function with no fields
func (_m *Event) GetCallback() func() {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCallback")
	}

	var r0 func()
	if rf, ok := ret.Get(0).(func() func()); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// Event_GetCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallback'
type Event_GetCallback_Call struct {
	*mock.Call
}

// GetCallback is a helper method to define mock.On call
func (_e *Event_Expecter) GetCallback() *Event_GetCallback_Call {
	return &Event_GetCallback_Call{Call: _e.mock.On("GetCallback")}
}

func (_c *Event_GetCallback_Call) Run(run func()) *Event_GetCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetCallback_Call) Return(_a0 func()) *Event_GetCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetCallback_Call) RunAndReturn(run func() func()) *Event_GetCallback_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommand provides a mock function with no fields
func (_m *Event) GetCommand() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event_GetCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommand'
type Event_GetCommand_Call struct {
	*mock.Call
}

// GetCommand is a helper method to define mock.On call
func (_e *Event_Expecter) GetCommand() *Event_GetCommand_Call {
	return &Event_GetCommand_Call{Call: _e.mock.On("GetCommand")}
}

func (_c *Event_GetCommand_Call) Run(run func()) *Event_GetCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetCommand_Call) Return(_a0 string) *Event_GetCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetCommand_Call) RunAndReturn(run func() string) *Event_GetCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetCron provides a mock function with no fields
func (_m *Event) GetCron() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCron")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event_GetCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCron'
type Event_GetCron_Call struct {
	*mock.Call
}

// GetCron is a helper method to define mock.On call
func (_e *Event_Expecter) GetCron() *Event_GetCron_Call {
	return &Event_GetCron_Call{Call: _e.mock.On("GetCron")}
}

func (_c *Event_GetCron_Call) Run(run func()) *Event_GetCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetCron_Call) Return(_a0 string) *Event_GetCron_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetCron_Call) RunAndReturn(run func() string) *Event_GetCron_Call {
	_c.Call.Return(run)
	return _c
}

// GetDelayIfStillRunning provides a mock function with no fields
func (_m *Event) GetDelayIfStillRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDelayIfStillRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Event_GetDelayIfStillRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelayIfStillRunning'
type Event_GetDelayIfStillRunning_Call struct {
	*mock.Call
}

// GetDelayIfStillRunning is a helper method to define mock.On call
func (_e *Event_Expecter) GetDelayIfStillRunning() *Event_GetDelayIfStillRunning_Call {
	return &Event_GetDelayIfStillRunning_Call{Call: _e.mock.On("GetDelayIfStillRunning")}
}

func (_c *Event_GetDelayIfStillRunning_Call) Run(run func()) *Event_GetDelayIfStillRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetDelayIfStillRunning_Call) Return(_a0 bool) *Event_GetDelayIfStillRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetDelayIfStillRunning_Call) RunAndReturn(run func() bool) *Event_GetDelayIfStillRunning_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *Event) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Event_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Event_Expecter) GetName() *Event_GetName_Call {
	return &Event_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Event_GetName_Call) Run(run func()) *Event_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetName_Call) Return(_a0 string) *Event_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetName_Call) RunAndReturn(run func() string) *Event_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkipIfStillRunning provides a mock function with no fields
func (_m *Event) GetSkipIfStillRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSkipIfStillRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Event_GetSkipIfStillRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkipIfStillRunning'
type Event_GetSkipIfStillRunning_Call struct {
	*mock.Call
}

// GetSkipIfStillRunning is a helper method to define mock.On call
func (_e *Event_Expecter) GetSkipIfStillRunning() *Event_GetSkipIfStillRunning_Call {
	return &Event_GetSkipIfStillRunning_Call{Call: _e.mock.On("GetSkipIfStillRunning")}
}

func (_c *Event_GetSkipIfStillRunning_Call) Run(run func()) *Event_GetSkipIfStillRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetSkipIfStillRunning_Call) Return(_a0 bool) *Event_GetSkipIfStillRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_GetSkipIfStillRunning_Call) RunAndReturn(run func() bool) *Event_GetSkipIfStillRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Hourly provides a mock function with no fields
func (_m *Event) Hourly() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hourly")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_Hourly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hourly'
type Event_Hourly_Call struct {
	*mock.Call
}

// Hourly is a helper method to define mock.On call
func (_e *Event_Expecter) Hourly() *Event_Hourly_Call {
	return &Event_Hourly_Call{Call: _e.mock.On("Hourly")}
}

func (_c *Event_Hourly_Call) Run(run func()) *Event_Hourly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_Hourly_Call) Return(_a0 schedule.Event) *Event_Hourly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_Hourly_Call) RunAndReturn(run func() schedule.Event) *Event_Hourly_Call {
	_c.Call.Return(run)
	return _c
}

// HourlyAt provides a mock function with given fields: offset
func (_m *Event) HourlyAt(offset []string) schedule.Event {
	ret := _m.Called(offset)

	if len(ret) == 0 {
		panic("no return value specified for HourlyAt")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func([]string) schedule.Event); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_HourlyAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HourlyAt'
type Event_HourlyAt_Call struct {
	*mock.Call
}

// HourlyAt is a helper method to define mock.On call
//   - offset []string
func (_e *Event_Expecter) HourlyAt(offset interface{}) *Event_HourlyAt_Call {
	return &Event_HourlyAt_Call{Call: _e.mock.On("HourlyAt", offset)}
}

func (_c *Event_HourlyAt_Call) Run(run func(offset []string)) *Event_HourlyAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Event_HourlyAt_Call) Return(_a0 schedule.Event) *Event_HourlyAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_HourlyAt_Call) RunAndReturn(run func([]string) schedule.Event) *Event_HourlyAt_Call {
	_c.Call.Return(run)
	return _c
}

// IsOnOneServer provides a mock function with no fields
func (_m *Event) IsOnOneServer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsOnOneServer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Event_IsOnOneServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOnOneServer'
type Event_IsOnOneServer_Call struct {
	*mock.Call
}

// IsOnOneServer is a helper method to define mock.On call
func (_e *Event_Expecter) IsOnOneServer() *Event_IsOnOneServer_Call {
	return &Event_IsOnOneServer_Call{Call: _e.mock.On("IsOnOneServer")}
}

func (_c *Event_IsOnOneServer_Call) Run(run func()) *Event_IsOnOneServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_IsOnOneServer_Call) Return(_a0 bool) *Event_IsOnOneServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_IsOnOneServer_Call) RunAndReturn(run func() bool) *Event_IsOnOneServer_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields: name
func (_m *Event) Name(name string) schedule.Event {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Event_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
//   - name string
func (_e *Event_Expecter) Name(name interface{}) *Event_Name_Call {
	return &Event_Name_Call{Call: _e.mock.On("Name", name)}
}

func (_c *Event_Name_Call) Run(run func(name string)) *Event_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Event_Name_Call) Return(_a0 schedule.Event) *Event_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_Name_Call) RunAndReturn(run func(string) schedule.Event) *Event_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnOneServer provides a mock function with no fields
func (_m *Event) OnOneServer() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnOneServer")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_OnOneServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOneServer'
type Event_OnOneServer_Call struct {
	*mock.Call
}

// OnOneServer is a helper method to define mock.On call
func (_e *Event_Expecter) OnOneServer() *Event_OnOneServer_Call {
	return &Event_OnOneServer_Call{Call: _e.mock.On("OnOneServer")}
}

func (_c *Event_OnOneServer_Call) Run(run func()) *Event_OnOneServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_OnOneServer_Call) Return(_a0 schedule.Event) *Event_OnOneServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_OnOneServer_Call) RunAndReturn(run func() schedule.Event) *Event_OnOneServer_Call {
	_c.Call.Return(run)
	return _c
}

// SkipIfStillRunning provides a mock function with no fields
func (_m *Event) SkipIfStillRunning() schedule.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SkipIfStillRunning")
	}

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Event_SkipIfStillRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkipIfStillRunning'
type Event_SkipIfStillRunning_Call struct {
	*mock.Call
}

// SkipIfStillRunning is a helper method to define mock.On call
func (_e *Event_Expecter) SkipIfStillRunning() *Event_SkipIfStillRunning_Call {
	return &Event_SkipIfStillRunning_Call{Call: _e.mock.On("SkipIfStillRunning")}
}

func (_c *Event_SkipIfStillRunning_Call) Run(run func()) *Event_SkipIfStillRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_SkipIfStillRunning_Call) Return(_a0 schedule.Event) *Event_SkipIfStillRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Event_SkipIfStillRunning_Call) RunAndReturn(run func() schedule.Event) *Event_SkipIfStillRunning_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
