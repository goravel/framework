// Code generated by mockery. DO NOT EDIT.

package packages

import (
	packages "github.com/goravel/framework/contracts/packages"
	mock "github.com/stretchr/testify/mock"
)

// Setup is an autogenerated mock type for the Setup type
type Setup struct {
	mock.Mock
}

type Setup_Expecter struct {
	mock *mock.Mock
}

func (_m *Setup) EXPECT() *Setup_Expecter {
	return &Setup_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *Setup) Execute() {
	_m.Called()
}

// Setup_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Setup_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *Setup_Expecter) Execute() *Setup_Execute_Call {
	return &Setup_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *Setup_Execute_Call) Run(run func()) *Setup_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Setup_Execute_Call) Return() *Setup_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *Setup_Execute_Call) RunAndReturn(run func()) *Setup_Execute_Call {
	_c.Run(run)
	return _c
}

// Install provides a mock function with given fields: modifiers
func (_m *Setup) Install(modifiers ...packages.FileModifier) {
	_va := make([]interface{}, len(modifiers))
	for _i := range modifiers {
		_va[_i] = modifiers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Setup_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type Setup_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - modifiers ...packages.FileModifier
func (_e *Setup_Expecter) Install(modifiers ...interface{}) *Setup_Install_Call {
	return &Setup_Install_Call{Call: _e.mock.On("Install",
		append([]interface{}{}, modifiers...)...)}
}

func (_c *Setup_Install_Call) Run(run func(modifiers ...packages.FileModifier)) *Setup_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]packages.FileModifier, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(packages.FileModifier)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Setup_Install_Call) Return() *Setup_Install_Call {
	_c.Call.Return()
	return _c
}

func (_c *Setup_Install_Call) RunAndReturn(run func(...packages.FileModifier)) *Setup_Install_Call {
	_c.Run(run)
	return _c
}

// Uninstall provides a mock function with given fields: modifiers
func (_m *Setup) Uninstall(modifiers ...packages.FileModifier) {
	_va := make([]interface{}, len(modifiers))
	for _i := range modifiers {
		_va[_i] = modifiers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Setup_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type Setup_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - modifiers ...packages.FileModifier
func (_e *Setup_Expecter) Uninstall(modifiers ...interface{}) *Setup_Uninstall_Call {
	return &Setup_Uninstall_Call{Call: _e.mock.On("Uninstall",
		append([]interface{}{}, modifiers...)...)}
}

func (_c *Setup_Uninstall_Call) Run(run func(modifiers ...packages.FileModifier)) *Setup_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]packages.FileModifier, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(packages.FileModifier)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Setup_Uninstall_Call) Return() *Setup_Uninstall_Call {
	_c.Call.Return()
	return _c
}

func (_c *Setup_Uninstall_Call) RunAndReturn(run func(...packages.FileModifier)) *Setup_Uninstall_Call {
	_c.Run(run)
	return _c
}

// NewSetup creates a new instance of Setup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSetup(t interface {
	mock.TestingT
	Cleanup(func())
}) *Setup {
	mock := &Setup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
