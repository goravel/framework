// Code generated by mockery. DO NOT EDIT.

package foundation

import mock "github.com/stretchr/testify/mock"

// Json is an autogenerated mock type for the Json type
type Json struct {
	mock.Mock
}

type Json_Expecter struct {
	mock *mock.Mock
}

func (_m *Json) EXPECT() *Json_Expecter {
	return &Json_Expecter{mock: &_m.Mock}
}

// Marshal provides a mock function with given fields: _a0
func (_m *Json) Marshal(_a0 interface{}) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Json_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type Json_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *Json_Expecter) Marshal(_a0 interface{}) *Json_Marshal_Call {
	return &Json_Marshal_Call{Call: _e.mock.On("Marshal", _a0)}
}

func (_c *Json_Marshal_Call) Run(run func(_a0 interface{})) *Json_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Json_Marshal_Call) Return(_a0 []byte, _a1 error) *Json_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Json_Marshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *Json_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: _a0, _a1
func (_m *Json) Unmarshal(_a0 []byte, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Json_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type Json_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 interface{}
func (_e *Json_Expecter) Unmarshal(_a0 interface{}, _a1 interface{}) *Json_Unmarshal_Call {
	return &Json_Unmarshal_Call{Call: _e.mock.On("Unmarshal", _a0, _a1)}
}

func (_c *Json_Unmarshal_Call) Run(run func(_a0 []byte, _a1 interface{})) *Json_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *Json_Unmarshal_Call) Return(_a0 error) *Json_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Json_Unmarshal_Call) RunAndReturn(run func([]byte, interface{}) error) *Json_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewJson creates a new instance of Json. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJson(t interface {
	mock.TestingT
	Cleanup(func())
}) *Json {
	mock := &Json{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
