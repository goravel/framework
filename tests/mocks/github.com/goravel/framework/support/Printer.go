// Code generated by mockery. DO NOT EDIT.

package support

import (
	support "github.com/goravel/framework/contracts/support"
	mock "github.com/stretchr/testify/mock"
)

// Printer is an autogenerated mock type for the Printer type
type Printer struct {
	mock.Mock
}

type Printer_Expecter struct {
	mock *mock.Mock
}

func (_m *Printer) EXPECT() *Printer_Expecter {
	return &Printer_Expecter{mock: &_m.Mock}
}

// Print provides a mock function with given fields: a
func (_m *Printer) Print(a ...interface{}) *support.Printer {
	var _ca []interface{}
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Print")
	}

	var r0 *support.Printer
	if rf, ok := ret.Get(0).(func(...interface{}) *support.Printer); ok {
		r0 = rf(a...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.Printer)
		}
	}

	return r0
}

// Printer_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type Printer_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - a ...interface{}
func (_e *Printer_Expecter) Print(a ...interface{}) *Printer_Print_Call {
	return &Printer_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, a...)...)}
}

func (_c *Printer_Print_Call) Run(run func(a ...interface{})) *Printer_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Printer_Print_Call) Return(_a0 *support.Printer) *Printer_Print_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Print_Call) RunAndReturn(run func(...interface{}) *support.Printer) *Printer_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: format, a
func (_m *Printer) Printf(format string, a ...interface{}) *support.Printer {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Printf")
	}

	var r0 *support.Printer
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *support.Printer); ok {
		r0 = rf(format, a...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.Printer)
		}
	}

	return r0
}

// Printer_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type Printer_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *Printer_Expecter) Printf(format interface{}, a ...interface{}) *Printer_Printf_Call {
	return &Printer_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, a...)...)}
}

func (_c *Printer_Printf_Call) Run(run func(format string, a ...interface{})) *Printer_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Printer_Printf_Call) Return(_a0 *support.Printer) *Printer_Printf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Printf_Call) RunAndReturn(run func(string, ...interface{}) *support.Printer) *Printer_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// Printfln provides a mock function with given fields: format, a
func (_m *Printer) Printfln(format string, a ...interface{}) *support.Printer {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Printfln")
	}

	var r0 *support.Printer
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *support.Printer); ok {
		r0 = rf(format, a...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.Printer)
		}
	}

	return r0
}

// Printer_Printfln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printfln'
type Printer_Printfln_Call struct {
	*mock.Call
}

// Printfln is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *Printer_Expecter) Printfln(format interface{}, a ...interface{}) *Printer_Printfln_Call {
	return &Printer_Printfln_Call{Call: _e.mock.On("Printfln",
		append([]interface{}{format}, a...)...)}
}

func (_c *Printer_Printfln_Call) Run(run func(format string, a ...interface{})) *Printer_Printfln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Printer_Printfln_Call) Return(_a0 *support.Printer) *Printer_Printfln_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Printfln_Call) RunAndReturn(run func(string, ...interface{}) *support.Printer) *Printer_Printfln_Call {
	_c.Call.Return(run)
	return _c
}

// Println provides a mock function with given fields: a
func (_m *Printer) Println(a ...interface{}) *support.Printer {
	var _ca []interface{}
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Println")
	}

	var r0 *support.Printer
	if rf, ok := ret.Get(0).(func(...interface{}) *support.Printer); ok {
		r0 = rf(a...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.Printer)
		}
	}

	return r0
}

// Printer_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type Printer_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - a ...interface{}
func (_e *Printer_Expecter) Println(a ...interface{}) *Printer_Println_Call {
	return &Printer_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, a...)...)}
}

func (_c *Printer_Println_Call) Run(run func(a ...interface{})) *Printer_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Printer_Println_Call) Return(_a0 *support.Printer) *Printer_Println_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Println_Call) RunAndReturn(run func(...interface{}) *support.Printer) *Printer_Println_Call {
	_c.Call.Return(run)
	return _c
}

// Sprint provides a mock function with given fields: a
func (_m *Printer) Sprint(a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Printer_Sprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprint'
type Printer_Sprint_Call struct {
	*mock.Call
}

// Sprint is a helper method to define mock.On call
//   - a ...interface{}
func (_e *Printer_Expecter) Sprint(a ...interface{}) *Printer_Sprint_Call {
	return &Printer_Sprint_Call{Call: _e.mock.On("Sprint",
		append([]interface{}{}, a...)...)}
}

func (_c *Printer_Sprint_Call) Run(run func(a ...interface{})) *Printer_Sprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Printer_Sprint_Call) Return(_a0 string) *Printer_Sprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Sprint_Call) RunAndReturn(run func(...interface{}) string) *Printer_Sprint_Call {
	_c.Call.Return(run)
	return _c
}

// Sprintf provides a mock function with given fields: format, a
func (_m *Printer) Sprintf(format string, a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprintf")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Printer_Sprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintf'
type Printer_Sprintf_Call struct {
	*mock.Call
}

// Sprintf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *Printer_Expecter) Sprintf(format interface{}, a ...interface{}) *Printer_Sprintf_Call {
	return &Printer_Sprintf_Call{Call: _e.mock.On("Sprintf",
		append([]interface{}{format}, a...)...)}
}

func (_c *Printer_Sprintf_Call) Run(run func(format string, a ...interface{})) *Printer_Sprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Printer_Sprintf_Call) Return(_a0 string) *Printer_Sprintf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Sprintf_Call) RunAndReturn(run func(string, ...interface{}) string) *Printer_Sprintf_Call {
	_c.Call.Return(run)
	return _c
}

// Sprintfln provides a mock function with given fields: format, a
func (_m *Printer) Sprintfln(format string, a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprintfln")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Printer_Sprintfln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintfln'
type Printer_Sprintfln_Call struct {
	*mock.Call
}

// Sprintfln is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *Printer_Expecter) Sprintfln(format interface{}, a ...interface{}) *Printer_Sprintfln_Call {
	return &Printer_Sprintfln_Call{Call: _e.mock.On("Sprintfln",
		append([]interface{}{format}, a...)...)}
}

func (_c *Printer_Sprintfln_Call) Run(run func(format string, a ...interface{})) *Printer_Sprintfln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Printer_Sprintfln_Call) Return(_a0 string) *Printer_Sprintfln_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Sprintfln_Call) RunAndReturn(run func(string, ...interface{}) string) *Printer_Sprintfln_Call {
	_c.Call.Return(run)
	return _c
}

// Sprintln provides a mock function with given fields: a
func (_m *Printer) Sprintln(a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sprintln")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Printer_Sprintln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintln'
type Printer_Sprintln_Call struct {
	*mock.Call
}

// Sprintln is a helper method to define mock.On call
//   - a ...interface{}
func (_e *Printer_Expecter) Sprintln(a ...interface{}) *Printer_Sprintln_Call {
	return &Printer_Sprintln_Call{Call: _e.mock.On("Sprintln",
		append([]interface{}{}, a...)...)}
}

func (_c *Printer_Sprintln_Call) Run(run func(a ...interface{})) *Printer_Sprintln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Printer_Sprintln_Call) Return(_a0 string) *Printer_Sprintln_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Printer_Sprintln_Call) RunAndReturn(run func(...interface{}) string) *Printer_Sprintln_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrinter creates a new instance of Printer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrinter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Printer {
	mock := &Printer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
