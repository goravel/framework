// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/support/http"
	mock "github.com/stretchr/testify/mock"
)

// Body is an autogenerated mock type for the Body type
type Body struct {
	mock.Mock
}

type Body_Expecter struct {
	mock *mock.Mock
}

func (_m *Body) EXPECT() *Body_Expecter {
	return &Body_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *Body) Build() (http.Reader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 http.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func() (http.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() http.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Body_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Body_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *Body_Expecter) Build() *Body_Build_Call {
	return &Body_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *Body_Build_Call) Run(run func()) *Body_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Body_Build_Call) Return(_a0 http.Reader, _a1 error) *Body_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Body_Build_Call) RunAndReturn(run func() (http.Reader, error)) *Body_Build_Call {
	_c.Call.Return(run)
	return _c
}

// GetField provides a mock function with given fields: key
func (_m *Body) GetField(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetField")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Body_GetField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetField'
type Body_GetField_Call struct {
	*mock.Call
}

// GetField is a helper method to define mock.On call
//   - key string
func (_e *Body_Expecter) GetField(key interface{}) *Body_GetField_Call {
	return &Body_GetField_Call{Call: _e.mock.On("GetField", key)}
}

func (_c *Body_GetField_Call) Run(run func(key string)) *Body_GetField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Body_GetField_Call) Return(_a0 interface{}) *Body_GetField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Body_GetField_Call) RunAndReturn(run func(string) interface{}) *Body_GetField_Call {
	_c.Call.Return(run)
	return _c
}

// SetField provides a mock function with given fields: key, value
func (_m *Body) SetField(key string, value interface{}) http.Body {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetField")
	}

	var r0 http.Body
	if rf, ok := ret.Get(0).(func(string, interface{}) http.Body); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Body)
		}
	}

	return r0
}

// Body_SetField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetField'
type Body_SetField_Call struct {
	*mock.Call
}

// SetField is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Body_Expecter) SetField(key interface{}, value interface{}) *Body_SetField_Call {
	return &Body_SetField_Call{Call: _e.mock.On("SetField", key, value)}
}

func (_c *Body_SetField_Call) Run(run func(key string, value interface{})) *Body_SetField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Body_SetField_Call) Return(_a0 http.Body) *Body_SetField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Body_SetField_Call) RunAndReturn(run func(string, interface{}) http.Body) *Body_SetField_Call {
	_c.Call.Return(run)
	return _c
}

// SetFields provides a mock function with given fields: fields
func (_m *Body) SetFields(fields map[string]interface{}) http.Body {
	ret := _m.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for SetFields")
	}

	var r0 http.Body
	if rf, ok := ret.Get(0).(func(map[string]interface{}) http.Body); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Body)
		}
	}

	return r0
}

// Body_SetFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFields'
type Body_SetFields_Call struct {
	*mock.Call
}

// SetFields is a helper method to define mock.On call
//   - fields map[string]interface{}
func (_e *Body_Expecter) SetFields(fields interface{}) *Body_SetFields_Call {
	return &Body_SetFields_Call{Call: _e.mock.On("SetFields", fields)}
}

func (_c *Body_SetFields_Call) Run(run func(fields map[string]interface{})) *Body_SetFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Body_SetFields_Call) Return(_a0 http.Body) *Body_SetFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Body_SetFields_Call) RunAndReturn(run func(map[string]interface{}) http.Body) *Body_SetFields_Call {
	_c.Call.Return(run)
	return _c
}

// SetFile provides a mock function with given fields: fieldName, filePath
func (_m *Body) SetFile(fieldName string, filePath string) http.Body {
	ret := _m.Called(fieldName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for SetFile")
	}

	var r0 http.Body
	if rf, ok := ret.Get(0).(func(string, string) http.Body); ok {
		r0 = rf(fieldName, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Body)
		}
	}

	return r0
}

// Body_SetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFile'
type Body_SetFile_Call struct {
	*mock.Call
}

// SetFile is a helper method to define mock.On call
//   - fieldName string
//   - filePath string
func (_e *Body_Expecter) SetFile(fieldName interface{}, filePath interface{}) *Body_SetFile_Call {
	return &Body_SetFile_Call{Call: _e.mock.On("SetFile", fieldName, filePath)}
}

func (_c *Body_SetFile_Call) Run(run func(fieldName string, filePath string)) *Body_SetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Body_SetFile_Call) Return(_a0 http.Body) *Body_SetFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Body_SetFile_Call) RunAndReturn(run func(string, string) http.Body) *Body_SetFile_Call {
	_c.Call.Return(run)
	return _c
}

// SetFiles provides a mock function with given fields: files
func (_m *Body) SetFiles(files map[string]string) http.Body {
	ret := _m.Called(files)

	if len(ret) == 0 {
		panic("no return value specified for SetFiles")
	}

	var r0 http.Body
	if rf, ok := ret.Get(0).(func(map[string]string) http.Body); ok {
		r0 = rf(files)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Body)
		}
	}

	return r0
}

// Body_SetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFiles'
type Body_SetFiles_Call struct {
	*mock.Call
}

// SetFiles is a helper method to define mock.On call
//   - files map[string]string
func (_e *Body_Expecter) SetFiles(files interface{}) *Body_SetFiles_Call {
	return &Body_SetFiles_Call{Call: _e.mock.On("SetFiles", files)}
}

func (_c *Body_SetFiles_Call) Run(run func(files map[string]string)) *Body_SetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *Body_SetFiles_Call) Return(_a0 http.Body) *Body_SetFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Body_SetFiles_Call) RunAndReturn(run func(map[string]string) http.Body) *Body_SetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewBody creates a new instance of Body. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBody(t interface {
	mock.TestingT
	Cleanup(func())
}) *Body {
	mock := &Body{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
