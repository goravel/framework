// Code generated by mockery. DO NOT EDIT.

package seeder

import mock "github.com/stretchr/testify/mock"

// Seeder is an autogenerated mock type for the Seeder type
type Seeder struct {
	mock.Mock
}

type Seeder_Expecter struct {
	mock *mock.Mock
}

func (_m *Seeder) EXPECT() *Seeder_Expecter {
	return &Seeder_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with no fields
func (_m *Seeder) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seeder_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Seeder_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *Seeder_Expecter) Run() *Seeder_Run_Call {
	return &Seeder_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *Seeder_Run_Call) Run(run func()) *Seeder_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Seeder_Run_Call) Return(_a0 error) *Seeder_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Seeder_Run_Call) RunAndReturn(run func() error) *Seeder_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *Seeder) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Seeder_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Seeder_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *Seeder_Expecter) Signature() *Seeder_Signature_Call {
	return &Seeder_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *Seeder_Signature_Call) Run(run func()) *Seeder_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Seeder_Signature_Call) Return(_a0 string) *Seeder_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Seeder_Signature_Call) RunAndReturn(run func() string) *Seeder_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// NewSeeder creates a new instance of Seeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSeeder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Seeder {
	mock := &Seeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
