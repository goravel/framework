// Code generated by mockery. DO NOT EDIT.

package migration

import (
	migration "github.com/goravel/framework/contracts/database/migration"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateRepository provides a mock function with no fields
func (_m *Repository) CreateRepository() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type Repository_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
func (_e *Repository_Expecter) CreateRepository() *Repository_CreateRepository_Call {
	return &Repository_CreateRepository_Call{Call: _e.mock.On("CreateRepository")}
}

func (_c *Repository_CreateRepository_Call) Run(run func()) *Repository_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_CreateRepository_Call) Return(_a0 error) *Repository_CreateRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateRepository_Call) RunAndReturn(run func() error) *Repository_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *Repository) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) Delete(_a0 interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *Repository_Delete_Call) Run(run func(_a0 string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(string) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function with no fields
func (_m *Repository) DeleteRepository() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type Repository_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
func (_e *Repository_Expecter) DeleteRepository() *Repository_DeleteRepository_Call {
	return &Repository_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository")}
}

func (_c *Repository_DeleteRepository_Call) Run(run func()) *Repository_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_DeleteRepository_Call) Return(_a0 error) *Repository_DeleteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteRepository_Call) RunAndReturn(run func() error) *Repository_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function with no fields
func (_m *Repository) GetLast() ([]migration.File, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 []migration.File
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]migration.File, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []migration.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]migration.File)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type Repository_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
func (_e *Repository_Expecter) GetLast() *Repository_GetLast_Call {
	return &Repository_GetLast_Call{Call: _e.mock.On("GetLast")}
}

func (_c *Repository_GetLast_Call) Run(run func()) *Repository_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetLast_Call) Return(_a0 []migration.File, _a1 error) *Repository_GetLast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetLast_Call) RunAndReturn(run func() ([]migration.File, error)) *Repository_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastBatchNumber provides a mock function with no fields
func (_m *Repository) GetLastBatchNumber() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastBatchNumber")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetLastBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBatchNumber'
type Repository_GetLastBatchNumber_Call struct {
	*mock.Call
}

// GetLastBatchNumber is a helper method to define mock.On call
func (_e *Repository_Expecter) GetLastBatchNumber() *Repository_GetLastBatchNumber_Call {
	return &Repository_GetLastBatchNumber_Call{Call: _e.mock.On("GetLastBatchNumber")}
}

func (_c *Repository_GetLastBatchNumber_Call) Run(run func()) *Repository_GetLastBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetLastBatchNumber_Call) Return(_a0 int, _a1 error) *Repository_GetLastBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetLastBatchNumber_Call) RunAndReturn(run func() (int, error)) *Repository_GetLastBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetMigrations provides a mock function with no fields
func (_m *Repository) GetMigrations() ([]migration.File, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMigrations")
	}

	var r0 []migration.File
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]migration.File, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []migration.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]migration.File)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetMigrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigrations'
type Repository_GetMigrations_Call struct {
	*mock.Call
}

// GetMigrations is a helper method to define mock.On call
func (_e *Repository_Expecter) GetMigrations() *Repository_GetMigrations_Call {
	return &Repository_GetMigrations_Call{Call: _e.mock.On("GetMigrations")}
}

func (_c *Repository_GetMigrations_Call) Run(run func()) *Repository_GetMigrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetMigrations_Call) Return(_a0 []migration.File, _a1 error) *Repository_GetMigrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetMigrations_Call) RunAndReturn(run func() ([]migration.File, error)) *Repository_GetMigrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetMigrationsByBatch provides a mock function with given fields: batch
func (_m *Repository) GetMigrationsByBatch(batch int) ([]migration.File, error) {
	ret := _m.Called(batch)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationsByBatch")
	}

	var r0 []migration.File
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]migration.File, error)); ok {
		return rf(batch)
	}
	if rf, ok := ret.Get(0).(func(int) []migration.File); ok {
		r0 = rf(batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]migration.File)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetMigrationsByBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigrationsByBatch'
type Repository_GetMigrationsByBatch_Call struct {
	*mock.Call
}

// GetMigrationsByBatch is a helper method to define mock.On call
//   - batch int
func (_e *Repository_Expecter) GetMigrationsByBatch(batch interface{}) *Repository_GetMigrationsByBatch_Call {
	return &Repository_GetMigrationsByBatch_Call{Call: _e.mock.On("GetMigrationsByBatch", batch)}
}

func (_c *Repository_GetMigrationsByBatch_Call) Run(run func(batch int)) *Repository_GetMigrationsByBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Repository_GetMigrationsByBatch_Call) Return(_a0 []migration.File, _a1 error) *Repository_GetMigrationsByBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetMigrationsByBatch_Call) RunAndReturn(run func(int) ([]migration.File, error)) *Repository_GetMigrationsByBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetMigrationsByStep provides a mock function with given fields: steps
func (_m *Repository) GetMigrationsByStep(steps int) ([]migration.File, error) {
	ret := _m.Called(steps)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationsByStep")
	}

	var r0 []migration.File
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]migration.File, error)); ok {
		return rf(steps)
	}
	if rf, ok := ret.Get(0).(func(int) []migration.File); ok {
		r0 = rf(steps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]migration.File)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(steps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetMigrationsByStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigrationsByStep'
type Repository_GetMigrationsByStep_Call struct {
	*mock.Call
}

// GetMigrationsByStep is a helper method to define mock.On call
//   - steps int
func (_e *Repository_Expecter) GetMigrationsByStep(steps interface{}) *Repository_GetMigrationsByStep_Call {
	return &Repository_GetMigrationsByStep_Call{Call: _e.mock.On("GetMigrationsByStep", steps)}
}

func (_c *Repository_GetMigrationsByStep_Call) Run(run func(steps int)) *Repository_GetMigrationsByStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Repository_GetMigrationsByStep_Call) Return(_a0 []migration.File, _a1 error) *Repository_GetMigrationsByStep_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetMigrationsByStep_Call) RunAndReturn(run func(int) ([]migration.File, error)) *Repository_GetMigrationsByStep_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextBatchNumber provides a mock function with no fields
func (_m *Repository) GetNextBatchNumber() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextBatchNumber")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetNextBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextBatchNumber'
type Repository_GetNextBatchNumber_Call struct {
	*mock.Call
}

// GetNextBatchNumber is a helper method to define mock.On call
func (_e *Repository_Expecter) GetNextBatchNumber() *Repository_GetNextBatchNumber_Call {
	return &Repository_GetNextBatchNumber_Call{Call: _e.mock.On("GetNextBatchNumber")}
}

func (_c *Repository_GetNextBatchNumber_Call) Run(run func()) *Repository_GetNextBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetNextBatchNumber_Call) Return(_a0 int, _a1 error) *Repository_GetNextBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetNextBatchNumber_Call) RunAndReturn(run func() (int, error)) *Repository_GetNextBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetRan provides a mock function with no fields
func (_m *Repository) GetRan() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRan")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetRan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRan'
type Repository_GetRan_Call struct {
	*mock.Call
}

// GetRan is a helper method to define mock.On call
func (_e *Repository_Expecter) GetRan() *Repository_GetRan_Call {
	return &Repository_GetRan_Call{Call: _e.mock.On("GetRan")}
}

func (_c *Repository_GetRan_Call) Run(run func()) *Repository_GetRan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetRan_Call) Return(_a0 []string, _a1 error) *Repository_GetRan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetRan_Call) RunAndReturn(run func() ([]string, error)) *Repository_GetRan_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: file, batch
func (_m *Repository) Log(file string, batch int) error {
	ret := _m.Called(file, batch)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(file, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Repository_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - file string
//   - batch int
func (_e *Repository_Expecter) Log(file interface{}, batch interface{}) *Repository_Log_Call {
	return &Repository_Log_Call{Call: _e.mock.On("Log", file, batch)}
}

func (_c *Repository_Log_Call) Run(run func(file string, batch int)) *Repository_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Repository_Log_Call) Return(_a0 error) *Repository_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Log_Call) RunAndReturn(run func(string, int) error) *Repository_Log_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryExists provides a mock function with no fields
func (_m *Repository) RepositoryExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RepositoryExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Repository_RepositoryExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryExists'
type Repository_RepositoryExists_Call struct {
	*mock.Call
}

// RepositoryExists is a helper method to define mock.On call
func (_e *Repository_Expecter) RepositoryExists() *Repository_RepositoryExists_Call {
	return &Repository_RepositoryExists_Call{Call: _e.mock.On("RepositoryExists")}
}

func (_c *Repository_RepositoryExists_Call) Run(run func()) *Repository_RepositoryExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_RepositoryExists_Call) Return(_a0 bool) *Repository_RepositoryExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RepositoryExists_Call) RunAndReturn(run func() bool) *Repository_RepositoryExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
