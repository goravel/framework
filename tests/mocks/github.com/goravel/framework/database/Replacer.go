// Code generated by mockery. DO NOT EDIT.

package database

import mock "github.com/stretchr/testify/mock"

// Replacer is an autogenerated mock type for the Replacer type
type Replacer struct {
	mock.Mock
}

type Replacer_Expecter struct {
	mock *mock.Mock
}

func (_m *Replacer) EXPECT() *Replacer_Expecter {
	return &Replacer_Expecter{mock: &_m.Mock}
}

// Replace provides a mock function with given fields: name
func (_m *Replacer) Replace(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Replacer_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type Replacer_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - name string
func (_e *Replacer_Expecter) Replace(name interface{}) *Replacer_Replace_Call {
	return &Replacer_Replace_Call{Call: _e.mock.On("Replace", name)}
}

func (_c *Replacer_Replace_Call) Run(run func(name string)) *Replacer_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Replacer_Replace_Call) Return(_a0 string) *Replacer_Replace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Replacer_Replace_Call) RunAndReturn(run func(string) string) *Replacer_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplacer creates a new instance of Replacer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplacer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Replacer {
	mock := &Replacer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
