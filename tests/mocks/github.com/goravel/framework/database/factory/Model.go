// Code generated by mockery. DO NOT EDIT.

package factory

import (
	factory "github.com/goravel/framework/contracts/database/factory"
	mock "github.com/stretchr/testify/mock"
)

// Model is an autogenerated mock type for the Model type
type Model struct {
	mock.Mock
}

type Model_Expecter struct {
	mock *mock.Mock
}

func (_m *Model) EXPECT() *Model_Expecter {
	return &Model_Expecter{mock: &_m.Mock}
}

// Factory provides a mock function with no fields
func (_m *Model) Factory() factory.Factory {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Factory")
	}

	var r0 factory.Factory
	if rf, ok := ret.Get(0).(func() factory.Factory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Factory)
		}
	}

	return r0
}

// Model_Factory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Factory'
type Model_Factory_Call struct {
	*mock.Call
}

// Factory is a helper method to define mock.On call
func (_e *Model_Expecter) Factory() *Model_Factory_Call {
	return &Model_Factory_Call{Call: _e.mock.On("Factory")}
}

func (_c *Model_Factory_Call) Run(run func()) *Model_Factory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Model_Factory_Call) Return(_a0 factory.Factory) *Model_Factory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Model_Factory_Call) RunAndReturn(run func() factory.Factory) *Model_Factory_Call {
	_c.Call.Return(run)
	return _c
}

// NewModel creates a new instance of Model. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *Model {
	mock := &Model{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
