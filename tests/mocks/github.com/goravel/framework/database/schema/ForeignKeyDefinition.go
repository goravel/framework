// Code generated by mockery. DO NOT EDIT.

package schema

import (
	schema "github.com/goravel/framework/contracts/database/schema"
	mock "github.com/stretchr/testify/mock"
)

// ForeignKeyDefinition is an autogenerated mock type for the ForeignKeyDefinition type
type ForeignKeyDefinition struct {
	mock.Mock
}

type ForeignKeyDefinition_Expecter struct {
	mock *mock.Mock
}

func (_m *ForeignKeyDefinition) EXPECT() *ForeignKeyDefinition_Expecter {
	return &ForeignKeyDefinition_Expecter{mock: &_m.Mock}
}

// CascadeOnDelete provides a mock function with no fields
func (_m *ForeignKeyDefinition) CascadeOnDelete() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CascadeOnDelete")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_CascadeOnDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CascadeOnDelete'
type ForeignKeyDefinition_CascadeOnDelete_Call struct {
	*mock.Call
}

// CascadeOnDelete is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) CascadeOnDelete() *ForeignKeyDefinition_CascadeOnDelete_Call {
	return &ForeignKeyDefinition_CascadeOnDelete_Call{Call: _e.mock.On("CascadeOnDelete")}
}

func (_c *ForeignKeyDefinition_CascadeOnDelete_Call) Run(run func()) *ForeignKeyDefinition_CascadeOnDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_CascadeOnDelete_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_CascadeOnDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_CascadeOnDelete_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_CascadeOnDelete_Call {
	_c.Call.Return(run)
	return _c
}

// CascadeOnUpdate provides a mock function with no fields
func (_m *ForeignKeyDefinition) CascadeOnUpdate() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CascadeOnUpdate")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_CascadeOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CascadeOnUpdate'
type ForeignKeyDefinition_CascadeOnUpdate_Call struct {
	*mock.Call
}

// CascadeOnUpdate is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) CascadeOnUpdate() *ForeignKeyDefinition_CascadeOnUpdate_Call {
	return &ForeignKeyDefinition_CascadeOnUpdate_Call{Call: _e.mock.On("CascadeOnUpdate")}
}

func (_c *ForeignKeyDefinition_CascadeOnUpdate_Call) Run(run func()) *ForeignKeyDefinition_CascadeOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_CascadeOnUpdate_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_CascadeOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_CascadeOnUpdate_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_CascadeOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields: name
func (_m *ForeignKeyDefinition) Name(name string) schema.ForeignKeyDefinition {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func(string) schema.ForeignKeyDefinition); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ForeignKeyDefinition_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
//   - name string
func (_e *ForeignKeyDefinition_Expecter) Name(name interface{}) *ForeignKeyDefinition_Name_Call {
	return &ForeignKeyDefinition_Name_Call{Call: _e.mock.On("Name", name)}
}

func (_c *ForeignKeyDefinition_Name_Call) Run(run func(name string)) *ForeignKeyDefinition_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ForeignKeyDefinition_Name_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_Name_Call) RunAndReturn(run func(string) schema.ForeignKeyDefinition) *ForeignKeyDefinition_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NoActionOnDelete provides a mock function with no fields
func (_m *ForeignKeyDefinition) NoActionOnDelete() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoActionOnDelete")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_NoActionOnDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoActionOnDelete'
type ForeignKeyDefinition_NoActionOnDelete_Call struct {
	*mock.Call
}

// NoActionOnDelete is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) NoActionOnDelete() *ForeignKeyDefinition_NoActionOnDelete_Call {
	return &ForeignKeyDefinition_NoActionOnDelete_Call{Call: _e.mock.On("NoActionOnDelete")}
}

func (_c *ForeignKeyDefinition_NoActionOnDelete_Call) Run(run func()) *ForeignKeyDefinition_NoActionOnDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_NoActionOnDelete_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_NoActionOnDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_NoActionOnDelete_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_NoActionOnDelete_Call {
	_c.Call.Return(run)
	return _c
}

// NoActionOnUpdate provides a mock function with no fields
func (_m *ForeignKeyDefinition) NoActionOnUpdate() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoActionOnUpdate")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_NoActionOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoActionOnUpdate'
type ForeignKeyDefinition_NoActionOnUpdate_Call struct {
	*mock.Call
}

// NoActionOnUpdate is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) NoActionOnUpdate() *ForeignKeyDefinition_NoActionOnUpdate_Call {
	return &ForeignKeyDefinition_NoActionOnUpdate_Call{Call: _e.mock.On("NoActionOnUpdate")}
}

func (_c *ForeignKeyDefinition_NoActionOnUpdate_Call) Run(run func()) *ForeignKeyDefinition_NoActionOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_NoActionOnUpdate_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_NoActionOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_NoActionOnUpdate_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_NoActionOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NullOnDelete provides a mock function with no fields
func (_m *ForeignKeyDefinition) NullOnDelete() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NullOnDelete")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_NullOnDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NullOnDelete'
type ForeignKeyDefinition_NullOnDelete_Call struct {
	*mock.Call
}

// NullOnDelete is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) NullOnDelete() *ForeignKeyDefinition_NullOnDelete_Call {
	return &ForeignKeyDefinition_NullOnDelete_Call{Call: _e.mock.On("NullOnDelete")}
}

func (_c *ForeignKeyDefinition_NullOnDelete_Call) Run(run func()) *ForeignKeyDefinition_NullOnDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_NullOnDelete_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_NullOnDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_NullOnDelete_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_NullOnDelete_Call {
	_c.Call.Return(run)
	return _c
}

// On provides a mock function with given fields: table
func (_m *ForeignKeyDefinition) On(table string) schema.ForeignKeyDefinition {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for On")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func(string) schema.ForeignKeyDefinition); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_On_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'On'
type ForeignKeyDefinition_On_Call struct {
	*mock.Call
}

// On is a helper method to define mock.On call
//   - table string
func (_e *ForeignKeyDefinition_Expecter) On(table interface{}) *ForeignKeyDefinition_On_Call {
	return &ForeignKeyDefinition_On_Call{Call: _e.mock.On("On", table)}
}

func (_c *ForeignKeyDefinition_On_Call) Run(run func(table string)) *ForeignKeyDefinition_On_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ForeignKeyDefinition_On_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_On_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_On_Call) RunAndReturn(run func(string) schema.ForeignKeyDefinition) *ForeignKeyDefinition_On_Call {
	_c.Call.Return(run)
	return _c
}

// References provides a mock function with given fields: columns
func (_m *ForeignKeyDefinition) References(columns ...string) schema.ForeignKeyDefinition {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func(...string) schema.ForeignKeyDefinition); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_References_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'References'
type ForeignKeyDefinition_References_Call struct {
	*mock.Call
}

// References is a helper method to define mock.On call
//   - columns ...string
func (_e *ForeignKeyDefinition_Expecter) References(columns ...interface{}) *ForeignKeyDefinition_References_Call {
	return &ForeignKeyDefinition_References_Call{Call: _e.mock.On("References",
		append([]interface{}{}, columns...)...)}
}

func (_c *ForeignKeyDefinition_References_Call) Run(run func(columns ...string)) *ForeignKeyDefinition_References_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ForeignKeyDefinition_References_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_References_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_References_Call) RunAndReturn(run func(...string) schema.ForeignKeyDefinition) *ForeignKeyDefinition_References_Call {
	_c.Call.Return(run)
	return _c
}

// RestrictOnDelete provides a mock function with no fields
func (_m *ForeignKeyDefinition) RestrictOnDelete() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestrictOnDelete")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_RestrictOnDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestrictOnDelete'
type ForeignKeyDefinition_RestrictOnDelete_Call struct {
	*mock.Call
}

// RestrictOnDelete is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) RestrictOnDelete() *ForeignKeyDefinition_RestrictOnDelete_Call {
	return &ForeignKeyDefinition_RestrictOnDelete_Call{Call: _e.mock.On("RestrictOnDelete")}
}

func (_c *ForeignKeyDefinition_RestrictOnDelete_Call) Run(run func()) *ForeignKeyDefinition_RestrictOnDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_RestrictOnDelete_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_RestrictOnDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_RestrictOnDelete_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_RestrictOnDelete_Call {
	_c.Call.Return(run)
	return _c
}

// RestrictOnUpdate provides a mock function with no fields
func (_m *ForeignKeyDefinition) RestrictOnUpdate() schema.ForeignKeyDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestrictOnUpdate")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func() schema.ForeignKeyDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignKeyDefinition_RestrictOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestrictOnUpdate'
type ForeignKeyDefinition_RestrictOnUpdate_Call struct {
	*mock.Call
}

// RestrictOnUpdate is a helper method to define mock.On call
func (_e *ForeignKeyDefinition_Expecter) RestrictOnUpdate() *ForeignKeyDefinition_RestrictOnUpdate_Call {
	return &ForeignKeyDefinition_RestrictOnUpdate_Call{Call: _e.mock.On("RestrictOnUpdate")}
}

func (_c *ForeignKeyDefinition_RestrictOnUpdate_Call) Run(run func()) *ForeignKeyDefinition_RestrictOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignKeyDefinition_RestrictOnUpdate_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignKeyDefinition_RestrictOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignKeyDefinition_RestrictOnUpdate_Call) RunAndReturn(run func() schema.ForeignKeyDefinition) *ForeignKeyDefinition_RestrictOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewForeignKeyDefinition creates a new instance of ForeignKeyDefinition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewForeignKeyDefinition(t interface {
	mock.TestingT
	Cleanup(func())
}) *ForeignKeyDefinition {
	mock := &ForeignKeyDefinition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
