// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// ObserverWithUpdating is an autogenerated mock type for the ObserverWithUpdating type
type ObserverWithUpdating struct {
	mock.Mock
}

type ObserverWithUpdating_Expecter struct {
	mock *mock.Mock
}

func (_m *ObserverWithUpdating) EXPECT() *ObserverWithUpdating_Expecter {
	return &ObserverWithUpdating_Expecter{mock: &_m.Mock}
}

// Updating provides a mock function with given fields: _a0
func (_m *ObserverWithUpdating) Updating(_a0 orm.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Updating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(orm.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObserverWithUpdating_Updating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updating'
type ObserverWithUpdating_Updating_Call struct {
	*mock.Call
}

// Updating is a helper method to define mock.On call
//   - _a0 orm.Event
func (_e *ObserverWithUpdating_Expecter) Updating(_a0 interface{}) *ObserverWithUpdating_Updating_Call {
	return &ObserverWithUpdating_Updating_Call{Call: _e.mock.On("Updating", _a0)}
}

func (_c *ObserverWithUpdating_Updating_Call) Run(run func(_a0 orm.Event)) *ObserverWithUpdating_Updating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(orm.Event))
	})
	return _c
}

func (_c *ObserverWithUpdating_Updating_Call) Return(_a0 error) *ObserverWithUpdating_Updating_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObserverWithUpdating_Updating_Call) RunAndReturn(run func(orm.Event) error) *ObserverWithUpdating_Updating_Call {
	_c.Call.Return(run)
	return _c
}

// NewObserverWithUpdating creates a new instance of ObserverWithUpdating. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverWithUpdating(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverWithUpdating {
	mock := &ObserverWithUpdating{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
