// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// QueryWithObserver is an autogenerated mock type for the QueryWithObserver type
type QueryWithObserver struct {
	mock.Mock
}

type QueryWithObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryWithObserver) EXPECT() *QueryWithObserver_Expecter {
	return &QueryWithObserver_Expecter{mock: &_m.Mock}
}

// Observe provides a mock function with given fields: model, observer
func (_m *QueryWithObserver) Observe(model interface{}, observer orm.Observer) {
	_m.Called(model, observer)
}

// QueryWithObserver_Observe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Observe'
type QueryWithObserver_Observe_Call struct {
	*mock.Call
}

// Observe is a helper method to define mock.On call
//   - model interface{}
//   - observer orm.Observer
func (_e *QueryWithObserver_Expecter) Observe(model interface{}, observer interface{}) *QueryWithObserver_Observe_Call {
	return &QueryWithObserver_Observe_Call{Call: _e.mock.On("Observe", model, observer)}
}

func (_c *QueryWithObserver_Observe_Call) Run(run func(model interface{}, observer orm.Observer)) *QueryWithObserver_Observe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(orm.Observer))
	})
	return _c
}

func (_c *QueryWithObserver_Observe_Call) Return() *QueryWithObserver_Observe_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueryWithObserver_Observe_Call) RunAndReturn(run func(interface{}, orm.Observer)) *QueryWithObserver_Observe_Call {
	_c.Run(run)
	return _c
}

// NewQueryWithObserver creates a new instance of QueryWithObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryWithObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryWithObserver {
	mock := &QueryWithObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
