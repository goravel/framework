// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// ObserverWithSaving is an autogenerated mock type for the ObserverWithSaving type
type ObserverWithSaving struct {
	mock.Mock
}

type ObserverWithSaving_Expecter struct {
	mock *mock.Mock
}

func (_m *ObserverWithSaving) EXPECT() *ObserverWithSaving_Expecter {
	return &ObserverWithSaving_Expecter{mock: &_m.Mock}
}

// Saving provides a mock function with given fields: _a0
func (_m *ObserverWithSaving) Saving(_a0 orm.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Saving")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(orm.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObserverWithSaving_Saving_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Saving'
type ObserverWithSaving_Saving_Call struct {
	*mock.Call
}

// Saving is a helper method to define mock.On call
//   - _a0 orm.Event
func (_e *ObserverWithSaving_Expecter) Saving(_a0 interface{}) *ObserverWithSaving_Saving_Call {
	return &ObserverWithSaving_Saving_Call{Call: _e.mock.On("Saving", _a0)}
}

func (_c *ObserverWithSaving_Saving_Call) Run(run func(_a0 orm.Event)) *ObserverWithSaving_Saving_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(orm.Event))
	})
	return _c
}

func (_c *ObserverWithSaving_Saving_Call) Return(_a0 error) *ObserverWithSaving_Saving_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObserverWithSaving_Saving_Call) RunAndReturn(run func(orm.Event) error) *ObserverWithSaving_Saving_Call {
	_c.Call.Return(run)
	return _c
}

// NewObserverWithSaving creates a new instance of ObserverWithSaving. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverWithSaving(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverWithSaving {
	mock := &ObserverWithSaving{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
