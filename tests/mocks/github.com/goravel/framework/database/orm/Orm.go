// Code generated by mockery. DO NOT EDIT.

package orm

import (
	context "context"

	database "github.com/goravel/framework/contracts/database"
	mock "github.com/stretchr/testify/mock"

	orm "github.com/goravel/framework/contracts/database/orm"

	sql "database/sql"
)

// Orm is an autogenerated mock type for the Orm type
type Orm struct {
	mock.Mock
}

type Orm_Expecter struct {
	mock *mock.Mock
}

func (_m *Orm) EXPECT() *Orm_Expecter {
	return &Orm_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with no fields
func (_m *Orm) Config() database.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 database.Config
	if rf, ok := ret.Get(0).(func() database.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(database.Config)
	}

	return r0
}

// Orm_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type Orm_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *Orm_Expecter) Config() *Orm_Config_Call {
	return &Orm_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *Orm_Config_Call) Run(run func()) *Orm_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_Config_Call) Return(_a0 database.Config) *Orm_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Config_Call) RunAndReturn(run func() database.Config) *Orm_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Connection provides a mock function with given fields: name
func (_m *Orm) Connection(name string) orm.Orm {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Connection")
	}

	var r0 orm.Orm
	if rf, ok := ret.Get(0).(func(string) orm.Orm); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Orm)
		}
	}

	return r0
}

// Orm_Connection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connection'
type Orm_Connection_Call struct {
	*mock.Call
}

// Connection is a helper method to define mock.On call
//   - name string
func (_e *Orm_Expecter) Connection(name interface{}) *Orm_Connection_Call {
	return &Orm_Connection_Call{Call: _e.mock.On("Connection", name)}
}

func (_c *Orm_Connection_Call) Run(run func(name string)) *Orm_Connection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Orm_Connection_Call) Return(_a0 orm.Orm) *Orm_Connection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Connection_Call) RunAndReturn(run func(string) orm.Orm) *Orm_Connection_Call {
	_c.Call.Return(run)
	return _c
}

// DB provides a mock function with no fields
func (_m *Orm) DB() (*sql.DB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *sql.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Orm_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type Orm_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *Orm_Expecter) DB() *Orm_DB_Call {
	return &Orm_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *Orm_DB_Call) Run(run func()) *Orm_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_DB_Call) Return(_a0 *sql.DB, _a1 error) *Orm_DB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Orm_DB_Call) RunAndReturn(run func() (*sql.DB, error)) *Orm_DB_Call {
	_c.Call.Return(run)
	return _c
}

// DatabaseName provides a mock function with no fields
func (_m *Orm) DatabaseName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DatabaseName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Orm_DatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabaseName'
type Orm_DatabaseName_Call struct {
	*mock.Call
}

// DatabaseName is a helper method to define mock.On call
func (_e *Orm_Expecter) DatabaseName() *Orm_DatabaseName_Call {
	return &Orm_DatabaseName_Call{Call: _e.mock.On("DatabaseName")}
}

func (_c *Orm_DatabaseName_Call) Run(run func()) *Orm_DatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_DatabaseName_Call) Return(_a0 string) *Orm_DatabaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_DatabaseName_Call) RunAndReturn(run func() string) *Orm_DatabaseName_Call {
	_c.Call.Return(run)
	return _c
}

// Factory provides a mock function with no fields
func (_m *Orm) Factory() orm.Factory {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Factory")
	}

	var r0 orm.Factory
	if rf, ok := ret.Get(0).(func() orm.Factory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Factory)
		}
	}

	return r0
}

// Orm_Factory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Factory'
type Orm_Factory_Call struct {
	*mock.Call
}

// Factory is a helper method to define mock.On call
func (_e *Orm_Expecter) Factory() *Orm_Factory_Call {
	return &Orm_Factory_Call{Call: _e.mock.On("Factory")}
}

func (_c *Orm_Factory_Call) Run(run func()) *Orm_Factory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_Factory_Call) Return(_a0 orm.Factory) *Orm_Factory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Factory_Call) RunAndReturn(run func() orm.Factory) *Orm_Factory_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Orm) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Orm_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Orm_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Orm_Expecter) Name() *Orm_Name_Call {
	return &Orm_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Orm_Name_Call) Run(run func()) *Orm_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_Name_Call) Return(_a0 string) *Orm_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Name_Call) RunAndReturn(run func() string) *Orm_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Observe provides a mock function with given fields: model, observer
func (_m *Orm) Observe(model interface{}, observer orm.Observer) {
	_m.Called(model, observer)
}

// Orm_Observe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Observe'
type Orm_Observe_Call struct {
	*mock.Call
}

// Observe is a helper method to define mock.On call
//   - model interface{}
//   - observer orm.Observer
func (_e *Orm_Expecter) Observe(model interface{}, observer interface{}) *Orm_Observe_Call {
	return &Orm_Observe_Call{Call: _e.mock.On("Observe", model, observer)}
}

func (_c *Orm_Observe_Call) Run(run func(model interface{}, observer orm.Observer)) *Orm_Observe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(orm.Observer))
	})
	return _c
}

func (_c *Orm_Observe_Call) Return() *Orm_Observe_Call {
	_c.Call.Return()
	return _c
}

func (_c *Orm_Observe_Call) RunAndReturn(run func(interface{}, orm.Observer)) *Orm_Observe_Call {
	_c.Run(run)
	return _c
}

// Query provides a mock function with no fields
func (_m *Orm) Query() orm.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 orm.Query
	if rf, ok := ret.Get(0).(func() orm.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Query)
		}
	}

	return r0
}

// Orm_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Orm_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *Orm_Expecter) Query() *Orm_Query_Call {
	return &Orm_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *Orm_Query_Call) Run(run func()) *Orm_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_Query_Call) Return(_a0 orm.Query) *Orm_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Query_Call) RunAndReturn(run func() orm.Query) *Orm_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with no fields
func (_m *Orm) Refresh() {
	_m.Called()
}

// Orm_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Orm_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
func (_e *Orm_Expecter) Refresh() *Orm_Refresh_Call {
	return &Orm_Refresh_Call{Call: _e.mock.On("Refresh")}
}

func (_c *Orm_Refresh_Call) Run(run func()) *Orm_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Orm_Refresh_Call) Return() *Orm_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Orm_Refresh_Call) RunAndReturn(run func()) *Orm_Refresh_Call {
	_c.Run(run)
	return _c
}

// SetQuery provides a mock function with given fields: query
func (_m *Orm) SetQuery(query orm.Query) {
	_m.Called(query)
}

// Orm_SetQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetQuery'
type Orm_SetQuery_Call struct {
	*mock.Call
}

// SetQuery is a helper method to define mock.On call
//   - query orm.Query
func (_e *Orm_Expecter) SetQuery(query interface{}) *Orm_SetQuery_Call {
	return &Orm_SetQuery_Call{Call: _e.mock.On("SetQuery", query)}
}

func (_c *Orm_SetQuery_Call) Run(run func(query orm.Query)) *Orm_SetQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(orm.Query))
	})
	return _c
}

func (_c *Orm_SetQuery_Call) Return() *Orm_SetQuery_Call {
	_c.Call.Return()
	return _c
}

func (_c *Orm_SetQuery_Call) RunAndReturn(run func(orm.Query)) *Orm_SetQuery_Call {
	_c.Run(run)
	return _c
}

// Transaction provides a mock function with given fields: txFunc
func (_m *Orm) Transaction(txFunc func(orm.Query) error) error {
	ret := _m.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(orm.Query) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Orm_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type Orm_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(orm.Query) error
func (_e *Orm_Expecter) Transaction(txFunc interface{}) *Orm_Transaction_Call {
	return &Orm_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *Orm_Transaction_Call) Run(run func(txFunc func(orm.Query) error)) *Orm_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(orm.Query) error))
	})
	return _c
}

func (_c *Orm_Transaction_Call) Return(_a0 error) *Orm_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_Transaction_Call) RunAndReturn(run func(func(orm.Query) error) error) *Orm_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Orm) WithContext(ctx context.Context) orm.Orm {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 orm.Orm
	if rf, ok := ret.Get(0).(func(context.Context) orm.Orm); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Orm)
		}
	}

	return r0
}

// Orm_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Orm_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Orm_Expecter) WithContext(ctx interface{}) *Orm_WithContext_Call {
	return &Orm_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Orm_WithContext_Call) Run(run func(ctx context.Context)) *Orm_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Orm_WithContext_Call) Return(_a0 orm.Orm) *Orm_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orm_WithContext_Call) RunAndReturn(run func(context.Context) orm.Orm) *Orm_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrm creates a new instance of Orm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrm(t interface {
	mock.TestingT
	Cleanup(func())
}) *Orm {
	mock := &Orm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
