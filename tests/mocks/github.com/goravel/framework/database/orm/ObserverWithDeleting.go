// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// ObserverWithDeleting is an autogenerated mock type for the ObserverWithDeleting type
type ObserverWithDeleting struct {
	mock.Mock
}

type ObserverWithDeleting_Expecter struct {
	mock *mock.Mock
}

func (_m *ObserverWithDeleting) EXPECT() *ObserverWithDeleting_Expecter {
	return &ObserverWithDeleting_Expecter{mock: &_m.Mock}
}

// Deleting provides a mock function with given fields: _a0
func (_m *ObserverWithDeleting) Deleting(_a0 orm.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Deleting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(orm.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObserverWithDeleting_Deleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deleting'
type ObserverWithDeleting_Deleting_Call struct {
	*mock.Call
}

// Deleting is a helper method to define mock.On call
//   - _a0 orm.Event
func (_e *ObserverWithDeleting_Expecter) Deleting(_a0 interface{}) *ObserverWithDeleting_Deleting_Call {
	return &ObserverWithDeleting_Deleting_Call{Call: _e.mock.On("Deleting", _a0)}
}

func (_c *ObserverWithDeleting_Deleting_Call) Run(run func(_a0 orm.Event)) *ObserverWithDeleting_Deleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(orm.Event))
	})
	return _c
}

func (_c *ObserverWithDeleting_Deleting_Call) Return(_a0 error) *ObserverWithDeleting_Deleting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObserverWithDeleting_Deleting_Call) RunAndReturn(run func(orm.Event) error) *ObserverWithDeleting_Deleting_Call {
	_c.Call.Return(run)
	return _c
}

// NewObserverWithDeleting creates a new instance of ObserverWithDeleting. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverWithDeleting(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverWithDeleting {
	mock := &ObserverWithDeleting{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
