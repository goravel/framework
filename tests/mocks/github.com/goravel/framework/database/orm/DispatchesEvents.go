// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// DispatchesEvents is an autogenerated mock type for the DispatchesEvents type
type DispatchesEvents struct {
	mock.Mock
}

type DispatchesEvents_Expecter struct {
	mock *mock.Mock
}

func (_m *DispatchesEvents) EXPECT() *DispatchesEvents_Expecter {
	return &DispatchesEvents_Expecter{mock: &_m.Mock}
}

// DispatchesEvents provides a mock function with no fields
func (_m *DispatchesEvents) DispatchesEvents() map[orm.EventType]func(orm.Event) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DispatchesEvents")
	}

	var r0 map[orm.EventType]func(orm.Event) error
	if rf, ok := ret.Get(0).(func() map[orm.EventType]func(orm.Event) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[orm.EventType]func(orm.Event) error)
		}
	}

	return r0
}

// DispatchesEvents_DispatchesEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchesEvents'
type DispatchesEvents_DispatchesEvents_Call struct {
	*mock.Call
}

// DispatchesEvents is a helper method to define mock.On call
func (_e *DispatchesEvents_Expecter) DispatchesEvents() *DispatchesEvents_DispatchesEvents_Call {
	return &DispatchesEvents_DispatchesEvents_Call{Call: _e.mock.On("DispatchesEvents")}
}

func (_c *DispatchesEvents_DispatchesEvents_Call) Run(run func()) *DispatchesEvents_DispatchesEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DispatchesEvents_DispatchesEvents_Call) Return(_a0 map[orm.EventType]func(orm.Event) error) *DispatchesEvents_DispatchesEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchesEvents_DispatchesEvents_Call) RunAndReturn(run func() map[orm.EventType]func(orm.Event) error) *DispatchesEvents_DispatchesEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewDispatchesEvents creates a new instance of DispatchesEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDispatchesEvents(t interface {
	mock.TestingT
	Cleanup(func())
}) *DispatchesEvents {
	mock := &DispatchesEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
