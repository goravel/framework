// Code generated by mockery. DO NOT EDIT.

package crypt

import mock "github.com/stretchr/testify/mock"

// Crypt is an autogenerated mock type for the Crypt type
type Crypt struct {
	mock.Mock
}

type Crypt_Expecter struct {
	mock *mock.Mock
}

func (_m *Crypt) EXPECT() *Crypt_Expecter {
	return &Crypt_Expecter{mock: &_m.Mock}
}

// DecryptString provides a mock function with given fields: payload
func (_m *Crypt) DecryptString(payload string) (string, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for DecryptString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypt_DecryptString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptString'
type Crypt_DecryptString_Call struct {
	*mock.Call
}

// DecryptString is a helper method to define mock.On call
//   - payload string
func (_e *Crypt_Expecter) DecryptString(payload interface{}) *Crypt_DecryptString_Call {
	return &Crypt_DecryptString_Call{Call: _e.mock.On("DecryptString", payload)}
}

func (_c *Crypt_DecryptString_Call) Run(run func(payload string)) *Crypt_DecryptString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Crypt_DecryptString_Call) Return(_a0 string, _a1 error) *Crypt_DecryptString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Crypt_DecryptString_Call) RunAndReturn(run func(string) (string, error)) *Crypt_DecryptString_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptString provides a mock function with given fields: value
func (_m *Crypt) EncryptString(value string) (string, error) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for EncryptString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypt_EncryptString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptString'
type Crypt_EncryptString_Call struct {
	*mock.Call
}

// EncryptString is a helper method to define mock.On call
//   - value string
func (_e *Crypt_Expecter) EncryptString(value interface{}) *Crypt_EncryptString_Call {
	return &Crypt_EncryptString_Call{Call: _e.mock.On("EncryptString", value)}
}

func (_c *Crypt_EncryptString_Call) Run(run func(value string)) *Crypt_EncryptString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Crypt_EncryptString_Call) Return(_a0 string, _a1 error) *Crypt_EncryptString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Crypt_EncryptString_Call) RunAndReturn(run func(string) (string, error)) *Crypt_EncryptString_Call {
	_c.Call.Return(run)
	return _c
}

// NewCrypt creates a new instance of Crypt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrypt(t interface {
	mock.TestingT
	Cleanup(func())
}) *Crypt {
	mock := &Crypt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
