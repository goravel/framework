// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	translation "github.com/goravel/framework/contracts/translation"
	mock "github.com/stretchr/testify/mock"
)

// Translator is an autogenerated mock type for the Translator type
type Translator struct {
	mock.Mock
}

type Translator_Expecter struct {
	mock *mock.Mock
}

func (_m *Translator) EXPECT() *Translator_Expecter {
	return &Translator_Expecter{mock: &_m.Mock}
}

// Choice provides a mock function with given fields: key, number, options
func (_m *Translator) Choice(key string, number int, options ...translation.Option) string {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, number)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Choice")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int, ...translation.Option) string); ok {
		r0 = rf(key, number, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_Choice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Choice'
type Translator_Choice_Call struct {
	*mock.Call
}

// Choice is a helper method to define mock.On call
//   - key string
//   - number int
//   - options ...translation.Option
func (_e *Translator_Expecter) Choice(key interface{}, number interface{}, options ...interface{}) *Translator_Choice_Call {
	return &Translator_Choice_Call{Call: _e.mock.On("Choice",
		append([]interface{}{key, number}, options...)...)}
}

func (_c *Translator_Choice_Call) Run(run func(key string, number int, options ...translation.Option)) *Translator_Choice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]translation.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(translation.Option)
			}
		}
		run(args[0].(string), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *Translator_Choice_Call) Return(_a0 string) *Translator_Choice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_Choice_Call) RunAndReturn(run func(string, int, ...translation.Option) string) *Translator_Choice_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentLocale provides a mock function with no fields
func (_m *Translator) CurrentLocale() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentLocale")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_CurrentLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentLocale'
type Translator_CurrentLocale_Call struct {
	*mock.Call
}

// CurrentLocale is a helper method to define mock.On call
func (_e *Translator_Expecter) CurrentLocale() *Translator_CurrentLocale_Call {
	return &Translator_CurrentLocale_Call{Call: _e.mock.On("CurrentLocale")}
}

func (_c *Translator_CurrentLocale_Call) Run(run func()) *Translator_CurrentLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Translator_CurrentLocale_Call) Return(_a0 string) *Translator_CurrentLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_CurrentLocale_Call) RunAndReturn(run func() string) *Translator_CurrentLocale_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key, options
func (_m *Translator) Get(key string, options ...translation.Option) string {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...translation.Option) string); ok {
		r0 = rf(key, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Translator_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
//   - options ...translation.Option
func (_e *Translator_Expecter) Get(key interface{}, options ...interface{}) *Translator_Get_Call {
	return &Translator_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{key}, options...)...)}
}

func (_c *Translator_Get_Call) Run(run func(key string, options ...translation.Option)) *Translator_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]translation.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(translation.Option)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Translator_Get_Call) Return(_a0 string) *Translator_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_Get_Call) RunAndReturn(run func(string, ...translation.Option) string) *Translator_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetFallback provides a mock function with no fields
func (_m *Translator) GetFallback() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFallback")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_GetFallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFallback'
type Translator_GetFallback_Call struct {
	*mock.Call
}

// GetFallback is a helper method to define mock.On call
func (_e *Translator_Expecter) GetFallback() *Translator_GetFallback_Call {
	return &Translator_GetFallback_Call{Call: _e.mock.On("GetFallback")}
}

func (_c *Translator_GetFallback_Call) Run(run func()) *Translator_GetFallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Translator_GetFallback_Call) Return(_a0 string) *Translator_GetFallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_GetFallback_Call) RunAndReturn(run func() string) *Translator_GetFallback_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key, options
func (_m *Translator) Has(key string, options ...translation.Option) bool {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...translation.Option) bool); ok {
		r0 = rf(key, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Translator_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type Translator_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key string
//   - options ...translation.Option
func (_e *Translator_Expecter) Has(key interface{}, options ...interface{}) *Translator_Has_Call {
	return &Translator_Has_Call{Call: _e.mock.On("Has",
		append([]interface{}{key}, options...)...)}
}

func (_c *Translator_Has_Call) Run(run func(key string, options ...translation.Option)) *Translator_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]translation.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(translation.Option)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Translator_Has_Call) Return(_a0 bool) *Translator_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_Has_Call) RunAndReturn(run func(string, ...translation.Option) bool) *Translator_Has_Call {
	_c.Call.Return(run)
	return _c
}

// SetFallback provides a mock function with given fields: locale
func (_m *Translator) SetFallback(locale string) context.Context {
	ret := _m.Called(locale)

	if len(ret) == 0 {
		panic("no return value specified for SetFallback")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(string) context.Context); ok {
		r0 = rf(locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Translator_SetFallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFallback'
type Translator_SetFallback_Call struct {
	*mock.Call
}

// SetFallback is a helper method to define mock.On call
//   - locale string
func (_e *Translator_Expecter) SetFallback(locale interface{}) *Translator_SetFallback_Call {
	return &Translator_SetFallback_Call{Call: _e.mock.On("SetFallback", locale)}
}

func (_c *Translator_SetFallback_Call) Run(run func(locale string)) *Translator_SetFallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Translator_SetFallback_Call) Return(_a0 context.Context) *Translator_SetFallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_SetFallback_Call) RunAndReturn(run func(string) context.Context) *Translator_SetFallback_Call {
	_c.Call.Return(run)
	return _c
}

// SetLocale provides a mock function with given fields: locale
func (_m *Translator) SetLocale(locale string) context.Context {
	ret := _m.Called(locale)

	if len(ret) == 0 {
		panic("no return value specified for SetLocale")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(string) context.Context); ok {
		r0 = rf(locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Translator_SetLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLocale'
type Translator_SetLocale_Call struct {
	*mock.Call
}

// SetLocale is a helper method to define mock.On call
//   - locale string
func (_e *Translator_Expecter) SetLocale(locale interface{}) *Translator_SetLocale_Call {
	return &Translator_SetLocale_Call{Call: _e.mock.On("SetLocale", locale)}
}

func (_c *Translator_SetLocale_Call) Run(run func(locale string)) *Translator_SetLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Translator_SetLocale_Call) Return(_a0 context.Context) *Translator_SetLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_SetLocale_Call) RunAndReturn(run func(string) context.Context) *Translator_SetLocale_Call {
	_c.Call.Return(run)
	return _c
}

// NewTranslator creates a new instance of Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Translator {
	mock := &Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
