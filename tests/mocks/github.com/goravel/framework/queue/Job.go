// Code generated by mockery. DO NOT EDIT.

package queue

import mock "github.com/stretchr/testify/mock"

// Job is an autogenerated mock type for the Job type
type Job struct {
	mock.Mock
}

type Job_Expecter struct {
	mock *mock.Mock
}

func (_m *Job) EXPECT() *Job_Expecter {
	return &Job_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: args
func (_m *Job) Handle(args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Job_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Job_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Job_Expecter) Handle(args ...interface{}) *Job_Handle_Call {
	return &Job_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{}, args...)...)}
}

func (_c *Job_Handle_Call) Run(run func(args ...interface{})) *Job_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Job_Handle_Call) Return(_a0 error) *Job_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Job_Handle_Call) RunAndReturn(run func(...interface{}) error) *Job_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *Job) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Job_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Job_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *Job_Expecter) Signature() *Job_Signature_Call {
	return &Job_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *Job_Signature_Call) Run(run func()) *Job_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Job_Signature_Call) Return(_a0 string) *Job_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Job_Signature_Call) RunAndReturn(run func() string) *Job_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// NewJob creates a new instance of Job. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *Job {
	mock := &Job{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
