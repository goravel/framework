// Code generated by mockery. DO NOT EDIT.

package queue

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with no fields
func (_m *Config) Debug() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Debug")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Config_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
func (_e *Config_Expecter) Debug() *Config_Debug_Call {
	return &Config_Debug_Call{Call: _e.mock.On("Debug")}
}

func (_c *Config_Debug_Call) Run(run func()) *Config_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Debug_Call) Return(_a0 bool) *Config_Debug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Debug_Call) RunAndReturn(run func() bool) *Config_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultConnection provides a mock function with no fields
func (_m *Config) DefaultConnection() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DefaultConnection")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_DefaultConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultConnection'
type Config_DefaultConnection_Call struct {
	*mock.Call
}

// DefaultConnection is a helper method to define mock.On call
func (_e *Config_Expecter) DefaultConnection() *Config_DefaultConnection_Call {
	return &Config_DefaultConnection_Call{Call: _e.mock.On("DefaultConnection")}
}

func (_c *Config_DefaultConnection_Call) Run(run func()) *Config_DefaultConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DefaultConnection_Call) Return(_a0 string) *Config_DefaultConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DefaultConnection_Call) RunAndReturn(run func() string) *Config_DefaultConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Driver provides a mock function with given fields: connection
func (_m *Config) Driver(connection string) string {
	ret := _m.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for Driver")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(connection)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_Driver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Driver'
type Config_Driver_Call struct {
	*mock.Call
}

// Driver is a helper method to define mock.On call
//   - connection string
func (_e *Config_Expecter) Driver(connection interface{}) *Config_Driver_Call {
	return &Config_Driver_Call{Call: _e.mock.On("Driver", connection)}
}

func (_c *Config_Driver_Call) Run(run func(connection string)) *Config_Driver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Config_Driver_Call) Return(_a0 string) *Config_Driver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Driver_Call) RunAndReturn(run func(string) string) *Config_Driver_Call {
	_c.Call.Return(run)
	return _c
}

// FailedJobsQuery provides a mock function with no fields
func (_m *Config) FailedJobsQuery() orm.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FailedJobsQuery")
	}

	var r0 orm.Query
	if rf, ok := ret.Get(0).(func() orm.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Query)
		}
	}

	return r0
}

// Config_FailedJobsQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailedJobsQuery'
type Config_FailedJobsQuery_Call struct {
	*mock.Call
}

// FailedJobsQuery is a helper method to define mock.On call
func (_e *Config_Expecter) FailedJobsQuery() *Config_FailedJobsQuery_Call {
	return &Config_FailedJobsQuery_Call{Call: _e.mock.On("FailedJobsQuery")}
}

func (_c *Config_FailedJobsQuery_Call) Run(run func()) *Config_FailedJobsQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_FailedJobsQuery_Call) Return(_a0 orm.Query) *Config_FailedJobsQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_FailedJobsQuery_Call) RunAndReturn(run func() orm.Query) *Config_FailedJobsQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: connection, _a1
func (_m *Config) Queue(connection string, _a1 string) string {
	ret := _m.Called(connection, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(connection, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type Config_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - connection string
//   - _a1 string
func (_e *Config_Expecter) Queue(connection interface{}, _a1 interface{}) *Config_Queue_Call {
	return &Config_Queue_Call{Call: _e.mock.On("Queue", connection, _a1)}
}

func (_c *Config_Queue_Call) Run(run func(connection string, _a1 string)) *Config_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Config_Queue_Call) Return(_a0 string) *Config_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Queue_Call) RunAndReturn(run func(string, string) string) *Config_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields: connection
func (_m *Config) Size(connection string) int {
	ret := _m.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(connection)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Config_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type Config_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - connection string
func (_e *Config_Expecter) Size(connection interface{}) *Config_Size_Call {
	return &Config_Size_Call{Call: _e.mock.On("Size", connection)}
}

func (_c *Config_Size_Call) Run(run func(connection string)) *Config_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Config_Size_Call) Return(_a0 int) *Config_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Size_Call) RunAndReturn(run func(string) int) *Config_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Via provides a mock function with given fields: connection
func (_m *Config) Via(connection string) interface{} {
	ret := _m.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for Via")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Config_Via_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Via'
type Config_Via_Call struct {
	*mock.Call
}

// Via is a helper method to define mock.On call
//   - connection string
func (_e *Config_Expecter) Via(connection interface{}) *Config_Via_Call {
	return &Config_Via_Call{Call: _e.mock.On("Via", connection)}
}

func (_c *Config_Via_Call) Run(run func(connection string)) *Config_Via_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Config_Via_Call) Return(_a0 interface{}) *Config_Via_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Via_Call) RunAndReturn(run func(string) interface{}) *Config_Via_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
