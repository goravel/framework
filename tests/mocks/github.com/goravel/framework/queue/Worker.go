// Code generated by mockery. DO NOT EDIT.

package queue

import mock "github.com/stretchr/testify/mock"

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with no fields
func (_m *Worker) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Worker_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *Worker_Expecter) Run() *Worker_Run_Call {
	return &Worker_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *Worker_Run_Call) Run(run func()) *Worker_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Run_Call) Return(_a0 error) *Worker_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Run_Call) RunAndReturn(run func() error) *Worker_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *Worker) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Worker_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *Worker_Expecter) Shutdown() *Worker_Shutdown_Call {
	return &Worker_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *Worker_Shutdown_Call) Run(run func()) *Worker_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Shutdown_Call) Return(_a0 error) *Worker_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Shutdown_Call) RunAndReturn(run func() error) *Worker_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
