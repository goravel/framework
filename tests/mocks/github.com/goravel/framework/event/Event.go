// Code generated by mockery. DO NOT EDIT.

package event

import (
	event "github.com/goravel/framework/contracts/event"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: args
func (_m *Event) Handle(args []event.Arg) ([]event.Arg, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 []event.Arg
	var r1 error
	if rf, ok := ret.Get(0).(func([]event.Arg) ([]event.Arg, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func([]event.Arg) []event.Arg); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Arg)
		}
	}

	if rf, ok := ret.Get(1).(func([]event.Arg) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Event_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - args []event.Arg
func (_e *Event_Expecter) Handle(args interface{}) *Event_Handle_Call {
	return &Event_Handle_Call{Call: _e.mock.On("Handle", args)}
}

func (_c *Event_Handle_Call) Run(run func(args []event.Arg)) *Event_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]event.Arg))
	})
	return _c
}

func (_c *Event_Handle_Call) Return(_a0 []event.Arg, _a1 error) *Event_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_Handle_Call) RunAndReturn(run func([]event.Arg) ([]event.Arg, error)) *Event_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
