// Code generated by mockery. DO NOT EDIT.

package event

import (
	event "github.com/goravel/framework/contracts/event"
	mock "github.com/stretchr/testify/mock"
)

// Instance is an autogenerated mock type for the Instance type
type Instance struct {
	mock.Mock
}

type Instance_Expecter struct {
	mock *mock.Mock
}

func (_m *Instance) EXPECT() *Instance_Expecter {
	return &Instance_Expecter{mock: &_m.Mock}
}

// GetEvents provides a mock function with no fields
func (_m *Instance) GetEvents() map[event.Event][]event.Listener {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 map[event.Event][]event.Listener
	if rf, ok := ret.Get(0).(func() map[event.Event][]event.Listener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[event.Event][]event.Listener)
		}
	}

	return r0
}

// Instance_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type Instance_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
func (_e *Instance_Expecter) GetEvents() *Instance_GetEvents_Call {
	return &Instance_GetEvents_Call{Call: _e.mock.On("GetEvents")}
}

func (_c *Instance_GetEvents_Call) Run(run func()) *Instance_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Instance_GetEvents_Call) Return(_a0 map[event.Event][]event.Listener) *Instance_GetEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Instance_GetEvents_Call) RunAndReturn(run func() map[event.Event][]event.Listener) *Instance_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Job provides a mock function with given fields: _a0, args
func (_m *Instance) Job(_a0 event.Event, args []event.Arg) event.Task {
	ret := _m.Called(_a0, args)

	if len(ret) == 0 {
		panic("no return value specified for Job")
	}

	var r0 event.Task
	if rf, ok := ret.Get(0).(func(event.Event, []event.Arg) event.Task); ok {
		r0 = rf(_a0, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Task)
		}
	}

	return r0
}

// Instance_Job_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Job'
type Instance_Job_Call struct {
	*mock.Call
}

// Job is a helper method to define mock.On call
//   - _a0 event.Event
//   - args []event.Arg
func (_e *Instance_Expecter) Job(_a0 interface{}, args interface{}) *Instance_Job_Call {
	return &Instance_Job_Call{Call: _e.mock.On("Job", _a0, args)}
}

func (_c *Instance_Job_Call) Run(run func(_a0 event.Event, args []event.Arg)) *Instance_Job_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.Event), args[1].([]event.Arg))
	})
	return _c
}

func (_c *Instance_Job_Call) Return(_a0 event.Task) *Instance_Job_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Instance_Job_Call) RunAndReturn(run func(event.Event, []event.Arg) event.Task) *Instance_Job_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0
func (_m *Instance) Register(_a0 map[event.Event][]event.Listener) {
	_m.Called(_a0)
}

// Instance_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Instance_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 map[event.Event][]event.Listener
func (_e *Instance_Expecter) Register(_a0 interface{}) *Instance_Register_Call {
	return &Instance_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *Instance_Register_Call) Run(run func(_a0 map[event.Event][]event.Listener)) *Instance_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[event.Event][]event.Listener))
	})
	return _c
}

func (_c *Instance_Register_Call) Return() *Instance_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *Instance_Register_Call) RunAndReturn(run func(map[event.Event][]event.Listener)) *Instance_Register_Call {
	_c.Run(run)
	return _c
}

// NewInstance creates a new instance of Instance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *Instance {
	mock := &Instance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
