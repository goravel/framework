// Code generated by mockery. DO NOT EDIT.

package event

import (
	event "github.com/goravel/framework/contracts/event"
	mock "github.com/stretchr/testify/mock"
)

// Listener is an autogenerated mock type for the Listener type
type Listener struct {
	mock.Mock
}

type Listener_Expecter struct {
	mock *mock.Mock
}

func (_m *Listener) EXPECT() *Listener_Expecter {
	return &Listener_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: args
func (_m *Listener) Handle(args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listener_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Listener_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Listener_Expecter) Handle(args ...interface{}) *Listener_Handle_Call {
	return &Listener_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{}, args...)...)}
}

func (_c *Listener_Handle_Call) Run(run func(args ...interface{})) *Listener_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Listener_Handle_Call) Return(_a0 error) *Listener_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Listener_Handle_Call) RunAndReturn(run func(...interface{}) error) *Listener_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: args
func (_m *Listener) Queue(args ...interface{}) event.Queue {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 event.Queue
	if rf, ok := ret.Get(0).(func(...interface{}) event.Queue); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Get(0).(event.Queue)
	}

	return r0
}

// Listener_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type Listener_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Listener_Expecter) Queue(args ...interface{}) *Listener_Queue_Call {
	return &Listener_Queue_Call{Call: _e.mock.On("Queue",
		append([]interface{}{}, args...)...)}
}

func (_c *Listener_Queue_Call) Run(run func(args ...interface{})) *Listener_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Listener_Queue_Call) Return(_a0 event.Queue) *Listener_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Listener_Queue_Call) RunAndReturn(run func(...interface{}) event.Queue) *Listener_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *Listener) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Listener_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Listener_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *Listener_Expecter) Signature() *Listener_Signature_Call {
	return &Listener_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *Listener_Signature_Call) Run(run func()) *Listener_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Listener_Signature_Call) Return(_a0 string) *Listener_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Listener_Signature_Call) RunAndReturn(run func() string) *Listener_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// NewListener creates a new instance of Listener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Listener {
	mock := &Listener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
