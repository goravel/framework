// Code generated by mockery. DO NOT EDIT.

package http

import mock "github.com/stretchr/testify/mock"

// StreamWriter is an autogenerated mock type for the StreamWriter type
type StreamWriter struct {
	mock.Mock
}

type StreamWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamWriter) EXPECT() *StreamWriter_Expecter {
	return &StreamWriter_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with no fields
func (_m *StreamWriter) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamWriter_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type StreamWriter_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *StreamWriter_Expecter) Flush() *StreamWriter_Flush_Call {
	return &StreamWriter_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *StreamWriter_Flush_Call) Run(run func()) *StreamWriter_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamWriter_Flush_Call) Return(_a0 error) *StreamWriter_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamWriter_Flush_Call) RunAndReturn(run func() error) *StreamWriter_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: data
func (_m *StreamWriter) Write(data []byte) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type StreamWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - data []byte
func (_e *StreamWriter_Expecter) Write(data interface{}) *StreamWriter_Write_Call {
	return &StreamWriter_Write_Call{Call: _e.mock.On("Write", data)}
}

func (_c *StreamWriter_Write_Call) Run(run func(data []byte)) *StreamWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *StreamWriter_Write_Call) Return(_a0 int, _a1 error) *StreamWriter_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamWriter_Write_Call) RunAndReturn(run func([]byte) (int, error)) *StreamWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function with given fields: data
func (_m *StreamWriter) WriteString(data string) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamWriter_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type StreamWriter_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - data string
func (_e *StreamWriter_Expecter) WriteString(data interface{}) *StreamWriter_WriteString_Call {
	return &StreamWriter_WriteString_Call{Call: _e.mock.On("WriteString", data)}
}

func (_c *StreamWriter_WriteString_Call) Run(run func(data string)) *StreamWriter_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StreamWriter_WriteString_Call) Return(_a0 int, _a1 error) *StreamWriter_WriteString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamWriter_WriteString_Call) RunAndReturn(run func(string) (int, error)) *StreamWriter_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamWriter creates a new instance of StreamWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamWriter {
	mock := &StreamWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
