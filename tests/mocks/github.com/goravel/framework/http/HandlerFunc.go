// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"
)

// HandlerFunc is an autogenerated mock type for the HandlerFunc type
type HandlerFunc struct {
	mock.Mock
}

type HandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerFunc) EXPECT() *HandlerFunc_Expecter {
	return &HandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *HandlerFunc) Execute(_a0 http.Context) http.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 http.Response
	if rf, ok := ret.Get(0).(func(http.Context) http.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Response)
		}
	}

	return r0
}

// HandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type HandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 http.Context
func (_e *HandlerFunc_Expecter) Execute(_a0 interface{}) *HandlerFunc_Execute_Call {
	return &HandlerFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *HandlerFunc_Execute_Call) Run(run func(_a0 http.Context)) *HandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Context))
	})
	return _c
}

func (_c *HandlerFunc_Execute_Call) Return(_a0 http.Response) *HandlerFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerFunc_Execute_Call) RunAndReturn(run func(http.Context) http.Response) *HandlerFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerFunc creates a new instance of HandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerFunc {
	mock := &HandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
