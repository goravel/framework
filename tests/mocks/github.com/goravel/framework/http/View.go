// Code generated by mockery. DO NOT EDIT.

package http

import mock "github.com/stretchr/testify/mock"

// View is an autogenerated mock type for the View type
type View struct {
	mock.Mock
}

type View_Expecter struct {
	mock *mock.Mock
}

func (_m *View) EXPECT() *View_Expecter {
	return &View_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: view
func (_m *View) Exists(view string) bool {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// View_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type View_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - view string
func (_e *View_Expecter) Exists(view interface{}) *View_Exists_Call {
	return &View_Exists_Call{Call: _e.mock.On("Exists", view)}
}

func (_c *View_Exists_Call) Run(run func(view string)) *View_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *View_Exists_Call) Return(_a0 bool) *View_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *View_Exists_Call) RunAndReturn(run func(string) bool) *View_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetShared provides a mock function with no fields
func (_m *View) GetShared() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShared")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// View_GetShared_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShared'
type View_GetShared_Call struct {
	*mock.Call
}

// GetShared is a helper method to define mock.On call
func (_e *View_Expecter) GetShared() *View_GetShared_Call {
	return &View_GetShared_Call{Call: _e.mock.On("GetShared")}
}

func (_c *View_GetShared_Call) Run(run func()) *View_GetShared_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *View_GetShared_Call) Return(_a0 map[string]interface{}) *View_GetShared_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *View_GetShared_Call) RunAndReturn(run func() map[string]interface{}) *View_GetShared_Call {
	_c.Call.Return(run)
	return _c
}

// Share provides a mock function with given fields: key, value
func (_m *View) Share(key string, value interface{}) {
	_m.Called(key, value)
}

// View_Share_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Share'
type View_Share_Call struct {
	*mock.Call
}

// Share is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *View_Expecter) Share(key interface{}, value interface{}) *View_Share_Call {
	return &View_Share_Call{Call: _e.mock.On("Share", key, value)}
}

func (_c *View_Share_Call) Run(run func(key string, value interface{})) *View_Share_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *View_Share_Call) Return() *View_Share_Call {
	_c.Call.Return()
	return _c
}

func (_c *View_Share_Call) RunAndReturn(run func(string, interface{})) *View_Share_Call {
	_c.Run(run)
	return _c
}

// Shared provides a mock function with given fields: key, def
func (_m *View) Shared(key string, def ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, def...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Shared")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, def...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// View_Shared_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shared'
type View_Shared_Call struct {
	*mock.Call
}

// Shared is a helper method to define mock.On call
//   - key string
//   - def ...interface{}
func (_e *View_Expecter) Shared(key interface{}, def ...interface{}) *View_Shared_Call {
	return &View_Shared_Call{Call: _e.mock.On("Shared",
		append([]interface{}{key}, def...)...)}
}

func (_c *View_Shared_Call) Run(run func(key string, def ...interface{})) *View_Shared_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *View_Shared_Call) Return(_a0 interface{}) *View_Shared_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *View_Shared_Call) RunAndReturn(run func(string, ...interface{}) interface{}) *View_Shared_Call {
	_c.Call.Return(run)
	return _c
}

// NewView creates a new instance of View. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewView(t interface {
	mock.TestingT
	Cleanup(func())
}) *View {
	mock := &View{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
