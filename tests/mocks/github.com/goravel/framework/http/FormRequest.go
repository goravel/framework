// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"
)

// FormRequest is an autogenerated mock type for the FormRequest type
type FormRequest struct {
	mock.Mock
}

type FormRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *FormRequest) EXPECT() *FormRequest_Expecter {
	return &FormRequest_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx
func (_m *FormRequest) Authorize(ctx http.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FormRequest_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type FormRequest_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx http.Context
func (_e *FormRequest_Expecter) Authorize(ctx interface{}) *FormRequest_Authorize_Call {
	return &FormRequest_Authorize_Call{Call: _e.mock.On("Authorize", ctx)}
}

func (_c *FormRequest_Authorize_Call) Run(run func(ctx http.Context)) *FormRequest_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Context))
	})
	return _c
}

func (_c *FormRequest_Authorize_Call) Return(_a0 error) *FormRequest_Authorize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormRequest_Authorize_Call) RunAndReturn(run func(http.Context) error) *FormRequest_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// Rules provides a mock function with given fields: ctx
func (_m *FormRequest) Rules(ctx http.Context) map[string]string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rules")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(http.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// FormRequest_Rules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rules'
type FormRequest_Rules_Call struct {
	*mock.Call
}

// Rules is a helper method to define mock.On call
//   - ctx http.Context
func (_e *FormRequest_Expecter) Rules(ctx interface{}) *FormRequest_Rules_Call {
	return &FormRequest_Rules_Call{Call: _e.mock.On("Rules", ctx)}
}

func (_c *FormRequest_Rules_Call) Run(run func(ctx http.Context)) *FormRequest_Rules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Context))
	})
	return _c
}

func (_c *FormRequest_Rules_Call) Return(_a0 map[string]string) *FormRequest_Rules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormRequest_Rules_Call) RunAndReturn(run func(http.Context) map[string]string) *FormRequest_Rules_Call {
	_c.Call.Return(run)
	return _c
}

// NewFormRequest creates a new instance of FormRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormRequest {
	mock := &FormRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
