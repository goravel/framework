// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"

	validation "github.com/goravel/framework/contracts/validation"
)

// FormRequestWithPrepareForValidation is an autogenerated mock type for the FormRequestWithPrepareForValidation type
type FormRequestWithPrepareForValidation struct {
	mock.Mock
}

type FormRequestWithPrepareForValidation_Expecter struct {
	mock *mock.Mock
}

func (_m *FormRequestWithPrepareForValidation) EXPECT() *FormRequestWithPrepareForValidation_Expecter {
	return &FormRequestWithPrepareForValidation_Expecter{mock: &_m.Mock}
}

// PrepareForValidation provides a mock function with given fields: ctx, data
func (_m *FormRequestWithPrepareForValidation) PrepareForValidation(ctx http.Context, data validation.Data) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for PrepareForValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Context, validation.Data) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FormRequestWithPrepareForValidation_PrepareForValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareForValidation'
type FormRequestWithPrepareForValidation_PrepareForValidation_Call struct {
	*mock.Call
}

// PrepareForValidation is a helper method to define mock.On call
//   - ctx http.Context
//   - data validation.Data
func (_e *FormRequestWithPrepareForValidation_Expecter) PrepareForValidation(ctx interface{}, data interface{}) *FormRequestWithPrepareForValidation_PrepareForValidation_Call {
	return &FormRequestWithPrepareForValidation_PrepareForValidation_Call{Call: _e.mock.On("PrepareForValidation", ctx, data)}
}

func (_c *FormRequestWithPrepareForValidation_PrepareForValidation_Call) Run(run func(ctx http.Context, data validation.Data)) *FormRequestWithPrepareForValidation_PrepareForValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Context), args[1].(validation.Data))
	})
	return _c
}

func (_c *FormRequestWithPrepareForValidation_PrepareForValidation_Call) Return(_a0 error) *FormRequestWithPrepareForValidation_PrepareForValidation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormRequestWithPrepareForValidation_PrepareForValidation_Call) RunAndReturn(run func(http.Context, validation.Data) error) *FormRequestWithPrepareForValidation_PrepareForValidation_Call {
	_c.Call.Return(run)
	return _c
}

// NewFormRequestWithPrepareForValidation creates a new instance of FormRequestWithPrepareForValidation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormRequestWithPrepareForValidation(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormRequestWithPrepareForValidation {
	mock := &FormRequestWithPrepareForValidation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
