// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"
)

// Limit is an autogenerated mock type for the Limit type
type Limit struct {
	mock.Mock
}

type Limit_Expecter struct {
	mock *mock.Mock
}

func (_m *Limit) EXPECT() *Limit_Expecter {
	return &Limit_Expecter{mock: &_m.Mock}
}

// By provides a mock function with given fields: key
func (_m *Limit) By(key string) http.Limit {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for By")
	}

	var r0 http.Limit
	if rf, ok := ret.Get(0).(func(string) http.Limit); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Limit)
		}
	}

	return r0
}

// Limit_By_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'By'
type Limit_By_Call struct {
	*mock.Call
}

// By is a helper method to define mock.On call
//   - key string
func (_e *Limit_Expecter) By(key interface{}) *Limit_By_Call {
	return &Limit_By_Call{Call: _e.mock.On("By", key)}
}

func (_c *Limit_By_Call) Run(run func(key string)) *Limit_By_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Limit_By_Call) Return(_a0 http.Limit) *Limit_By_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limit_By_Call) RunAndReturn(run func(string) http.Limit) *Limit_By_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields: _a0
func (_m *Limit) Response(_a0 func(http.Context)) http.Limit {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 http.Limit
	if rf, ok := ret.Get(0).(func(func(http.Context)) http.Limit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Limit)
		}
	}

	return r0
}

// Limit_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type Limit_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - _a0 func(http.Context)
func (_e *Limit_Expecter) Response(_a0 interface{}) *Limit_Response_Call {
	return &Limit_Response_Call{Call: _e.mock.On("Response", _a0)}
}

func (_c *Limit_Response_Call) Run(run func(_a0 func(http.Context))) *Limit_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(http.Context)))
	})
	return _c
}

func (_c *Limit_Response_Call) Return(_a0 http.Limit) *Limit_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limit_Response_Call) RunAndReturn(run func(func(http.Context)) http.Limit) *Limit_Response_Call {
	_c.Call.Return(run)
	return _c
}

// NewLimit creates a new instance of Limit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimit(t interface {
	mock.TestingT
	Cleanup(func())
}) *Limit {
	mock := &Limit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
