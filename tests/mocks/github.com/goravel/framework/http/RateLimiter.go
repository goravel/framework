// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"
)

// RateLimiter is an autogenerated mock type for the RateLimiter type
type RateLimiter struct {
	mock.Mock
}

type RateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiter) EXPECT() *RateLimiter_Expecter {
	return &RateLimiter_Expecter{mock: &_m.Mock}
}

// For provides a mock function with given fields: name, callback
func (_m *RateLimiter) For(name string, callback func(http.Context) http.Limit) {
	_m.Called(name, callback)
}

// RateLimiter_For_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'For'
type RateLimiter_For_Call struct {
	*mock.Call
}

// For is a helper method to define mock.On call
//   - name string
//   - callback func(http.Context) http.Limit
func (_e *RateLimiter_Expecter) For(name interface{}, callback interface{}) *RateLimiter_For_Call {
	return &RateLimiter_For_Call{Call: _e.mock.On("For", name, callback)}
}

func (_c *RateLimiter_For_Call) Run(run func(name string, callback func(http.Context) http.Limit)) *RateLimiter_For_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.Context) http.Limit))
	})
	return _c
}

func (_c *RateLimiter_For_Call) Return() *RateLimiter_For_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimiter_For_Call) RunAndReturn(run func(string, func(http.Context) http.Limit)) *RateLimiter_For_Call {
	_c.Run(run)
	return _c
}

// ForWithLimits provides a mock function with given fields: name, callback
func (_m *RateLimiter) ForWithLimits(name string, callback func(http.Context) []http.Limit) {
	_m.Called(name, callback)
}

// RateLimiter_ForWithLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForWithLimits'
type RateLimiter_ForWithLimits_Call struct {
	*mock.Call
}

// ForWithLimits is a helper method to define mock.On call
//   - name string
//   - callback func(http.Context) []http.Limit
func (_e *RateLimiter_Expecter) ForWithLimits(name interface{}, callback interface{}) *RateLimiter_ForWithLimits_Call {
	return &RateLimiter_ForWithLimits_Call{Call: _e.mock.On("ForWithLimits", name, callback)}
}

func (_c *RateLimiter_ForWithLimits_Call) Run(run func(name string, callback func(http.Context) []http.Limit)) *RateLimiter_ForWithLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.Context) []http.Limit))
	})
	return _c
}

func (_c *RateLimiter_ForWithLimits_Call) Return() *RateLimiter_ForWithLimits_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimiter_ForWithLimits_Call) RunAndReturn(run func(string, func(http.Context) []http.Limit)) *RateLimiter_ForWithLimits_Call {
	_c.Run(run)
	return _c
}

// Limiter provides a mock function with given fields: name
func (_m *RateLimiter) Limiter(name string) func(http.Context) []http.Limit {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Limiter")
	}

	var r0 func(http.Context) []http.Limit
	if rf, ok := ret.Get(0).(func(string) func(http.Context) []http.Limit); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.Context) []http.Limit)
		}
	}

	return r0
}

// RateLimiter_Limiter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limiter'
type RateLimiter_Limiter_Call struct {
	*mock.Call
}

// Limiter is a helper method to define mock.On call
//   - name string
func (_e *RateLimiter_Expecter) Limiter(name interface{}) *RateLimiter_Limiter_Call {
	return &RateLimiter_Limiter_Call{Call: _e.mock.On("Limiter", name)}
}

func (_c *RateLimiter_Limiter_Call) Run(run func(name string)) *RateLimiter_Limiter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RateLimiter_Limiter_Call) Return(_a0 func(http.Context) []http.Limit) *RateLimiter_Limiter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiter_Limiter_Call) RunAndReturn(run func(string) func(http.Context) []http.Limit) *RateLimiter_Limiter_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateLimiter creates a new instance of RateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiter {
	mock := &RateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
