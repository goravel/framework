// Code generated by mockery. DO NOT EDIT.

package http

import (
	context "context"

	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with no fields
func (_m *Context) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Context_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Context_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Context_Expecter) Context() *Context_Context_Call {
	return &Context_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Context_Context_Call) Run(run func()) *Context_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Context_Call) Return(_a0 context.Context) *Context_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Context_Call) RunAndReturn(run func() context.Context) *Context_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Deadline provides a mock function with no fields
func (_m *Context) Deadline() (time.Time, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Context_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type Context_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *Context_Expecter) Deadline() *Context_Deadline_Call {
	return &Context_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *Context_Deadline_Call) Run(run func()) *Context_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Deadline_Call) Return(deadline time.Time, ok bool) *Context_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *Context_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *Context_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *Context) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Context_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type Context_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *Context_Expecter) Done() *Context_Done_Call {
	return &Context_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *Context_Done_Call) Run(run func()) *Context_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Done_Call) Return(_a0 <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Done_Call) RunAndReturn(run func() <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *Context) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Context_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Context_Expecter) Err() *Context_Err_Call {
	return &Context_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Context_Err_Call) Run(run func()) *Context_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Err_Call) Return(_a0 error) *Context_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Err_Call) RunAndReturn(run func() error) *Context_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with no fields
func (_m *Context) Request() http.ContextRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 http.ContextRequest
	if rf, ok := ret.Get(0).(func() http.ContextRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.ContextRequest)
		}
	}

	return r0
}

// Context_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Context_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *Context_Expecter) Request() *Context_Request_Call {
	return &Context_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *Context_Request_Call) Run(run func()) *Context_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Request_Call) Return(_a0 http.ContextRequest) *Context_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Request_Call) RunAndReturn(run func() http.ContextRequest) *Context_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with no fields
func (_m *Context) Response() http.ContextResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 http.ContextResponse
	if rf, ok := ret.Get(0).(func() http.ContextResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.ContextResponse)
		}
	}

	return r0
}

// Context_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type Context_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *Context_Expecter) Response() *Context_Response_Call {
	return &Context_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *Context_Response_Call) Run(run func()) *Context_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Response_Call) Return(_a0 http.ContextResponse) *Context_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Response_Call) RunAndReturn(run func() http.ContextResponse) *Context_Response_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields: key
func (_m *Context) Value(key interface{}) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Context_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Context_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key interface{}
func (_e *Context_Expecter) Value(key interface{}) *Context_Value_Call {
	return &Context_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *Context_Value_Call) Run(run func(key interface{})) *Context_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Context_Value_Call) Return(_a0 interface{}) *Context_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Value_Call) RunAndReturn(run func(interface{}) interface{}) *Context_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Context) WithContext(ctx context.Context) {
	_m.Called(ctx)
}

// Context_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Context_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Context_Expecter) WithContext(ctx interface{}) *Context_WithContext_Call {
	return &Context_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Context_WithContext_Call) Run(run func(ctx context.Context)) *Context_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Context_WithContext_Call) Return() *Context_WithContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_WithContext_Call) RunAndReturn(run func(context.Context)) *Context_WithContext_Call {
	_c.Run(run)
	return _c
}

// WithValue provides a mock function with given fields: key, value
func (_m *Context) WithValue(key interface{}, value interface{}) {
	_m.Called(key, value)
}

// Context_WithValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithValue'
type Context_WithValue_Call struct {
	*mock.Call
}

// WithValue is a helper method to define mock.On call
//   - key interface{}
//   - value interface{}
func (_e *Context_Expecter) WithValue(key interface{}, value interface{}) *Context_WithValue_Call {
	return &Context_WithValue_Call{Call: _e.mock.On("WithValue", key, value)}
}

func (_c *Context_WithValue_Call) Run(run func(key interface{}, value interface{})) *Context_WithValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_WithValue_Call) Return() *Context_WithValue_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_WithValue_Call) RunAndReturn(run func(interface{}, interface{})) *Context_WithValue_Call {
	_c.Run(run)
	return _c
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
