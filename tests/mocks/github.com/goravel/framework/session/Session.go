// Code generated by mockery. DO NOT EDIT.

package session

import (
	session "github.com/goravel/framework/contracts/session"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

type Session_Expecter struct {
	mock *mock.Mock
}

func (_m *Session) EXPECT() *Session_Expecter {
	return &Session_Expecter{mock: &_m.Mock}
}

// All provides a mock function with no fields
func (_m *Session) All() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Session_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Session_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Session_Expecter) All() *Session_All_Call {
	return &Session_All_Call{Call: _e.mock.On("All")}
}

func (_c *Session_All_Call) Run(run func()) *Session_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_All_Call) Return(_a0 map[string]interface{}) *Session_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_All_Call) RunAndReturn(run func() map[string]interface{}) *Session_All_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: key
func (_m *Session) Exists(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Session_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Session_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key string
func (_e *Session_Expecter) Exists(key interface{}) *Session_Exists_Call {
	return &Session_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *Session_Exists_Call) Run(run func(key string)) *Session_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_Exists_Call) Return(_a0 bool) *Session_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Exists_Call) RunAndReturn(run func(string) bool) *Session_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Flash provides a mock function with given fields: key, value
func (_m *Session) Flash(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Flash")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Flash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flash'
type Session_Flash_Call struct {
	*mock.Call
}

// Flash is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Session_Expecter) Flash(key interface{}, value interface{}) *Session_Flash_Call {
	return &Session_Flash_Call{Call: _e.mock.On("Flash", key, value)}
}

func (_c *Session_Flash_Call) Run(run func(key string, value interface{})) *Session_Flash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Session_Flash_Call) Return(_a0 session.Session) *Session_Flash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Flash_Call) RunAndReturn(run func(string, interface{}) session.Session) *Session_Flash_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with no fields
func (_m *Session) Flush() session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func() session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type Session_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *Session_Expecter) Flush() *Session_Flush_Call {
	return &Session_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *Session_Flush_Call) Run(run func()) *Session_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Flush_Call) Return(_a0 session.Session) *Session_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Flush_Call) RunAndReturn(run func() session.Session) *Session_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Forget provides a mock function with given fields: keys
func (_m *Session) Forget(keys ...string) session.Session {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Forget")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(...string) session.Session); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type Session_Forget_Call struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - keys ...string
func (_e *Session_Expecter) Forget(keys ...interface{}) *Session_Forget_Call {
	return &Session_Forget_Call{Call: _e.mock.On("Forget",
		append([]interface{}{}, keys...)...)}
}

func (_c *Session_Forget_Call) Run(run func(keys ...string)) *Session_Forget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Session_Forget_Call) Return(_a0 session.Session) *Session_Forget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Forget_Call) RunAndReturn(run func(...string) session.Session) *Session_Forget_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key, defaultValue
func (_m *Session) Get(key string, defaultValue ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Session_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Session_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
//   - defaultValue ...interface{}
func (_e *Session_Expecter) Get(key interface{}, defaultValue ...interface{}) *Session_Get_Call {
	return &Session_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *Session_Get_Call) Run(run func(key string, defaultValue ...interface{})) *Session_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Session_Get_Call) Return(_a0 interface{}) *Session_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Get_Call) RunAndReturn(run func(string, ...interface{}) interface{}) *Session_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with no fields
func (_m *Session) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type Session_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *Session_Expecter) GetID() *Session_GetID_Call {
	return &Session_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *Session_GetID_Call) Run(run func()) *Session_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_GetID_Call) Return(_a0 string) *Session_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_GetID_Call) RunAndReturn(run func() string) *Session_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *Session) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Session_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Session_Expecter) GetName() *Session_GetName_Call {
	return &Session_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Session_GetName_Call) Run(run func()) *Session_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_GetName_Call) Return(_a0 string) *Session_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_GetName_Call) RunAndReturn(run func() string) *Session_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *Session) Has(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Session_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type Session_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key string
func (_e *Session_Expecter) Has(key interface{}) *Session_Has_Call {
	return &Session_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *Session_Has_Call) Run(run func(key string)) *Session_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_Has_Call) Return(_a0 bool) *Session_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Has_Call) RunAndReturn(run func(string) bool) *Session_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function with no fields
func (_m *Session) Invalidate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Session_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type Session_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
func (_e *Session_Expecter) Invalidate() *Session_Invalidate_Call {
	return &Session_Invalidate_Call{Call: _e.mock.On("Invalidate")}
}

func (_c *Session_Invalidate_Call) Run(run func()) *Session_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Invalidate_Call) Return(_a0 error) *Session_Invalidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Invalidate_Call) RunAndReturn(run func() error) *Session_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// Keep provides a mock function with given fields: keys
func (_m *Session) Keep(keys ...string) session.Session {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Keep")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(...string) session.Session); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Keep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keep'
type Session_Keep_Call struct {
	*mock.Call
}

// Keep is a helper method to define mock.On call
//   - keys ...string
func (_e *Session_Expecter) Keep(keys ...interface{}) *Session_Keep_Call {
	return &Session_Keep_Call{Call: _e.mock.On("Keep",
		append([]interface{}{}, keys...)...)}
}

func (_c *Session_Keep_Call) Run(run func(keys ...string)) *Session_Keep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Session_Keep_Call) Return(_a0 session.Session) *Session_Keep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Keep_Call) RunAndReturn(run func(...string) session.Session) *Session_Keep_Call {
	_c.Call.Return(run)
	return _c
}

// Missing provides a mock function with given fields: key
func (_m *Session) Missing(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Missing")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Session_Missing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Missing'
type Session_Missing_Call struct {
	*mock.Call
}

// Missing is a helper method to define mock.On call
//   - key string
func (_e *Session_Expecter) Missing(key interface{}) *Session_Missing_Call {
	return &Session_Missing_Call{Call: _e.mock.On("Missing", key)}
}

func (_c *Session_Missing_Call) Run(run func(key string)) *Session_Missing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_Missing_Call) Return(_a0 bool) *Session_Missing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Missing_Call) RunAndReturn(run func(string) bool) *Session_Missing_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with given fields: key, value
func (_m *Session) Now(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type Session_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Session_Expecter) Now(key interface{}, value interface{}) *Session_Now_Call {
	return &Session_Now_Call{Call: _e.mock.On("Now", key, value)}
}

func (_c *Session_Now_Call) Run(run func(key string, value interface{})) *Session_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Session_Now_Call) Return(_a0 session.Session) *Session_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Now_Call) RunAndReturn(run func(string, interface{}) session.Session) *Session_Now_Call {
	_c.Call.Return(run)
	return _c
}

// Only provides a mock function with given fields: keys
func (_m *Session) Only(keys []string) map[string]interface{} {
	ret := _m.Called(keys)

	if len(ret) == 0 {
		panic("no return value specified for Only")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]string) map[string]interface{}); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Session_Only_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Only'
type Session_Only_Call struct {
	*mock.Call
}

// Only is a helper method to define mock.On call
//   - keys []string
func (_e *Session_Expecter) Only(keys interface{}) *Session_Only_Call {
	return &Session_Only_Call{Call: _e.mock.On("Only", keys)}
}

func (_c *Session_Only_Call) Run(run func(keys []string)) *Session_Only_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Session_Only_Call) Return(_a0 map[string]interface{}) *Session_Only_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Only_Call) RunAndReturn(run func([]string) map[string]interface{}) *Session_Only_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: key, defaultValue
func (_m *Session) Pull(key string, defaultValue ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Session_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type Session_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - key string
//   - defaultValue ...interface{}
func (_e *Session_Expecter) Pull(key interface{}, defaultValue ...interface{}) *Session_Pull_Call {
	return &Session_Pull_Call{Call: _e.mock.On("Pull",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *Session_Pull_Call) Run(run func(key string, defaultValue ...interface{})) *Session_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Session_Pull_Call) Return(_a0 interface{}) *Session_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Pull_Call) RunAndReturn(run func(string, ...interface{}) interface{}) *Session_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value
func (_m *Session) Put(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Session_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Session_Expecter) Put(key interface{}, value interface{}) *Session_Put_Call {
	return &Session_Put_Call{Call: _e.mock.On("Put", key, value)}
}

func (_c *Session_Put_Call) Run(run func(key string, value interface{})) *Session_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Session_Put_Call) Return(_a0 session.Session) *Session_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Put_Call) RunAndReturn(run func(string, interface{}) session.Session) *Session_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Reflash provides a mock function with no fields
func (_m *Session) Reflash() session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reflash")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func() session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_Reflash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reflash'
type Session_Reflash_Call struct {
	*mock.Call
}

// Reflash is a helper method to define mock.On call
func (_e *Session_Expecter) Reflash() *Session_Reflash_Call {
	return &Session_Reflash_Call{Call: _e.mock.On("Reflash")}
}

func (_c *Session_Reflash_Call) Run(run func()) *Session_Reflash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Reflash_Call) Return(_a0 session.Session) *Session_Reflash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Reflash_Call) RunAndReturn(run func() session.Session) *Session_Reflash_Call {
	_c.Call.Return(run)
	return _c
}

// Regenerate provides a mock function with given fields: destroy
func (_m *Session) Regenerate(destroy ...bool) error {
	_va := make([]interface{}, len(destroy))
	for _i := range destroy {
		_va[_i] = destroy[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Regenerate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...bool) error); ok {
		r0 = rf(destroy...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Session_Regenerate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Regenerate'
type Session_Regenerate_Call struct {
	*mock.Call
}

// Regenerate is a helper method to define mock.On call
//   - destroy ...bool
func (_e *Session_Expecter) Regenerate(destroy ...interface{}) *Session_Regenerate_Call {
	return &Session_Regenerate_Call{Call: _e.mock.On("Regenerate",
		append([]interface{}{}, destroy...)...)}
}

func (_c *Session_Regenerate_Call) Run(run func(destroy ...bool)) *Session_Regenerate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Session_Regenerate_Call) Return(_a0 error) *Session_Regenerate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Regenerate_Call) RunAndReturn(run func(...bool) error) *Session_Regenerate_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: key
func (_m *Session) Remove(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Session_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Session_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key string
func (_e *Session_Expecter) Remove(key interface{}) *Session_Remove_Call {
	return &Session_Remove_Call{Call: _e.mock.On("Remove", key)}
}

func (_c *Session_Remove_Call) Run(run func(key string)) *Session_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_Remove_Call) Return(_a0 interface{}) *Session_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Remove_Call) RunAndReturn(run func(string) interface{}) *Session_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with no fields
func (_m *Session) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Session_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Session_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *Session_Expecter) Save() *Session_Save_Call {
	return &Session_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *Session_Save_Call) Run(run func()) *Session_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Save_Call) Return(_a0 error) *Session_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Save_Call) RunAndReturn(run func() error) *Session_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SetDriver provides a mock function with given fields: driver
func (_m *Session) SetDriver(driver session.Driver) session.Session {
	ret := _m.Called(driver)

	if len(ret) == 0 {
		panic("no return value specified for SetDriver")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(session.Driver) session.Session); ok {
		r0 = rf(driver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_SetDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDriver'
type Session_SetDriver_Call struct {
	*mock.Call
}

// SetDriver is a helper method to define mock.On call
//   - driver session.Driver
func (_e *Session_Expecter) SetDriver(driver interface{}) *Session_SetDriver_Call {
	return &Session_SetDriver_Call{Call: _e.mock.On("SetDriver", driver)}
}

func (_c *Session_SetDriver_Call) Run(run func(driver session.Driver)) *Session_SetDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Driver))
	})
	return _c
}

func (_c *Session_SetDriver_Call) Return(_a0 session.Session) *Session_SetDriver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_SetDriver_Call) RunAndReturn(run func(session.Driver) session.Session) *Session_SetDriver_Call {
	_c.Call.Return(run)
	return _c
}

// SetID provides a mock function with given fields: id
func (_m *Session) SetID(id string) session.Session {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetID")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string) session.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_SetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetID'
type Session_SetID_Call struct {
	*mock.Call
}

// SetID is a helper method to define mock.On call
//   - id string
func (_e *Session_Expecter) SetID(id interface{}) *Session_SetID_Call {
	return &Session_SetID_Call{Call: _e.mock.On("SetID", id)}
}

func (_c *Session_SetID_Call) Run(run func(id string)) *Session_SetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_SetID_Call) Return(_a0 session.Session) *Session_SetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_SetID_Call) RunAndReturn(run func(string) session.Session) *Session_SetID_Call {
	_c.Call.Return(run)
	return _c
}

// SetName provides a mock function with given fields: name
func (_m *Session) SetName(name string) session.Session {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SetName")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string) session.Session); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Session_SetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetName'
type Session_SetName_Call struct {
	*mock.Call
}

// SetName is a helper method to define mock.On call
//   - name string
func (_e *Session_Expecter) SetName(name interface{}) *Session_SetName_Call {
	return &Session_SetName_Call{Call: _e.mock.On("SetName", name)}
}

func (_c *Session_SetName_Call) Run(run func(name string)) *Session_SetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Session_SetName_Call) Return(_a0 session.Session) *Session_SetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_SetName_Call) RunAndReturn(run func(string) session.Session) *Session_SetName_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *Session) Start() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Session_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Session_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Session_Expecter) Start() *Session_Start_Call {
	return &Session_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Session_Start_Call) Run(run func()) *Session_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Start_Call) Return(_a0 bool) *Session_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Start_Call) RunAndReturn(run func() bool) *Session_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function with no fields
func (_m *Session) Token() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type Session_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *Session_Expecter) Token() *Session_Token_Call {
	return &Session_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *Session_Token_Call) Run(run func()) *Session_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Session_Token_Call) Return(_a0 string) *Session_Token_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Session_Token_Call) RunAndReturn(run func() string) *Session_Token_Call {
	_c.Call.Return(run)
	return _c
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
