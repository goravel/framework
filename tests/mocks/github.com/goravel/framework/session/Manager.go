// Code generated by mockery. DO NOT EDIT.

package session

import (
	session "github.com/goravel/framework/contracts/session"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// BuildSession provides a mock function with given fields: handler, sessionID
func (_m *Manager) BuildSession(handler session.Driver, sessionID ...string) (session.Session, error) {
	_va := make([]interface{}, len(sessionID))
	for _i := range sessionID {
		_va[_i] = sessionID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BuildSession")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(session.Driver, ...string) (session.Session, error)); ok {
		return rf(handler, sessionID...)
	}
	if rf, ok := ret.Get(0).(func(session.Driver, ...string) session.Session); ok {
		r0 = rf(handler, sessionID...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(session.Driver, ...string) error); ok {
		r1 = rf(handler, sessionID...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_BuildSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSession'
type Manager_BuildSession_Call struct {
	*mock.Call
}

// BuildSession is a helper method to define mock.On call
//   - handler session.Driver
//   - sessionID ...string
func (_e *Manager_Expecter) BuildSession(handler interface{}, sessionID ...interface{}) *Manager_BuildSession_Call {
	return &Manager_BuildSession_Call{Call: _e.mock.On("BuildSession",
		append([]interface{}{handler}, sessionID...)...)}
}

func (_c *Manager_BuildSession_Call) Run(run func(handler session.Driver, sessionID ...string)) *Manager_BuildSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(session.Driver), variadicArgs...)
	})
	return _c
}

func (_c *Manager_BuildSession_Call) Return(_a0 session.Session, _a1 error) *Manager_BuildSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_BuildSession_Call) RunAndReturn(run func(session.Driver, ...string) (session.Session, error)) *Manager_BuildSession_Call {
	_c.Call.Return(run)
	return _c
}

// Driver provides a mock function with given fields: name
func (_m *Manager) Driver(name ...string) (session.Driver, error) {
	_va := make([]interface{}, len(name))
	for _i := range name {
		_va[_i] = name[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Driver")
	}

	var r0 session.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (session.Driver, error)); ok {
		return rf(name...)
	}
	if rf, ok := ret.Get(0).(func(...string) session.Driver); ok {
		r0 = rf(name...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(name...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Driver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Driver'
type Manager_Driver_Call struct {
	*mock.Call
}

// Driver is a helper method to define mock.On call
//   - name ...string
func (_e *Manager_Expecter) Driver(name ...interface{}) *Manager_Driver_Call {
	return &Manager_Driver_Call{Call: _e.mock.On("Driver",
		append([]interface{}{}, name...)...)}
}

func (_c *Manager_Driver_Call) Run(run func(name ...string)) *Manager_Driver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Manager_Driver_Call) Return(_a0 session.Driver, _a1 error) *Manager_Driver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Driver_Call) RunAndReturn(run func(...string) (session.Driver, error)) *Manager_Driver_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: driver, handler
func (_m *Manager) Extend(driver string, handler func() session.Driver) error {
	ret := _m.Called(driver, handler)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func() session.Driver) error); ok {
		r0 = rf(driver, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type Manager_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - driver string
//   - handler func() session.Driver
func (_e *Manager_Expecter) Extend(driver interface{}, handler interface{}) *Manager_Extend_Call {
	return &Manager_Extend_Call{Call: _e.mock.On("Extend", driver, handler)}
}

func (_c *Manager_Extend_Call) Run(run func(driver string, handler func() session.Driver)) *Manager_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func() session.Driver))
	})
	return _c
}

func (_c *Manager_Extend_Call) Return(_a0 error) *Manager_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Extend_Call) RunAndReturn(run func(string, func() session.Driver) error) *Manager_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseSession provides a mock function with given fields: _a0
func (_m *Manager) ReleaseSession(_a0 session.Session) {
	_m.Called(_a0)
}

// Manager_ReleaseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseSession'
type Manager_ReleaseSession_Call struct {
	*mock.Call
}

// ReleaseSession is a helper method to define mock.On call
//   - _a0 session.Session
func (_e *Manager_Expecter) ReleaseSession(_a0 interface{}) *Manager_ReleaseSession_Call {
	return &Manager_ReleaseSession_Call{Call: _e.mock.On("ReleaseSession", _a0)}
}

func (_c *Manager_ReleaseSession_Call) Run(run func(_a0 session.Session)) *Manager_ReleaseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Session))
	})
	return _c
}

func (_c *Manager_ReleaseSession_Call) Return() *Manager_ReleaseSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_ReleaseSession_Call) RunAndReturn(run func(session.Session)) *Manager_ReleaseSession_Call {
	_c.Run(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
