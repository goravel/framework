// Code generated by mockery. DO NOT EDIT.

package route

import (
	route "github.com/goravel/framework/contracts/route"
	mock "github.com/stretchr/testify/mock"
)

// GroupFunc is an autogenerated mock type for the GroupFunc type
type GroupFunc struct {
	mock.Mock
}

type GroupFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupFunc) EXPECT() *GroupFunc_Expecter {
	return &GroupFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: router
func (_m *GroupFunc) Execute(router route.Router) {
	_m.Called(router)
}

// GroupFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GroupFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - router route.Router
func (_e *GroupFunc_Expecter) Execute(router interface{}) *GroupFunc_Execute_Call {
	return &GroupFunc_Execute_Call{Call: _e.mock.On("Execute", router)}
}

func (_c *GroupFunc_Execute_Call) Run(run func(router route.Router)) *GroupFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(route.Router))
	})
	return _c
}

func (_c *GroupFunc_Execute_Call) Return() *GroupFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *GroupFunc_Execute_Call) RunAndReturn(run func(route.Router)) *GroupFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewGroupFunc creates a new instance of GroupFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupFunc {
	mock := &GroupFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
