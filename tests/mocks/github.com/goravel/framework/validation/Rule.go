// Code generated by mockery. DO NOT EDIT.

package validation

import (
	validation "github.com/goravel/framework/contracts/validation"
	mock "github.com/stretchr/testify/mock"
)

// Rule is an autogenerated mock type for the Rule type
type Rule struct {
	mock.Mock
}

type Rule_Expecter struct {
	mock *mock.Mock
}

func (_m *Rule) EXPECT() *Rule_Expecter {
	return &Rule_Expecter{mock: &_m.Mock}
}

// Message provides a mock function with no fields
func (_m *Rule) Message() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Rule_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type Rule_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *Rule_Expecter) Message() *Rule_Message_Call {
	return &Rule_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *Rule_Message_Call) Run(run func()) *Rule_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Rule_Message_Call) Return(_a0 string) *Rule_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Rule_Message_Call) RunAndReturn(run func() string) *Rule_Message_Call {
	_c.Call.Return(run)
	return _c
}

// Passes provides a mock function with given fields: data, val, options
func (_m *Rule) Passes(data validation.Data, val interface{}, options ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, data, val)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Passes")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(validation.Data, interface{}, ...interface{}) bool); ok {
		r0 = rf(data, val, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rule_Passes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Passes'
type Rule_Passes_Call struct {
	*mock.Call
}

// Passes is a helper method to define mock.On call
//   - data validation.Data
//   - val interface{}
//   - options ...interface{}
func (_e *Rule_Expecter) Passes(data interface{}, val interface{}, options ...interface{}) *Rule_Passes_Call {
	return &Rule_Passes_Call{Call: _e.mock.On("Passes",
		append([]interface{}{data, val}, options...)...)}
}

func (_c *Rule_Passes_Call) Run(run func(data validation.Data, val interface{}, options ...interface{})) *Rule_Passes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(validation.Data), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Rule_Passes_Call) Return(_a0 bool) *Rule_Passes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Rule_Passes_Call) RunAndReturn(run func(validation.Data, interface{}, ...interface{}) bool) *Rule_Passes_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *Rule) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Rule_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Rule_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *Rule_Expecter) Signature() *Rule_Signature_Call {
	return &Rule_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *Rule_Signature_Call) Run(run func()) *Rule_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Rule_Signature_Call) Return(_a0 string) *Rule_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Rule_Signature_Call) RunAndReturn(run func() string) *Rule_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// NewRule creates a new instance of Rule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRule(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rule {
	mock := &Rule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
