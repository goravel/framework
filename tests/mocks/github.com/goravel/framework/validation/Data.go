// Code generated by mockery. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

type Data_Expecter struct {
	mock *mock.Mock
}

func (_m *Data) EXPECT() *Data_Expecter {
	return &Data_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *Data) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Data_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Data_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Data_Expecter) Get(key interface{}) *Data_Get_Call {
	return &Data_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Data_Get_Call) Run(run func(key string)) *Data_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Data_Get_Call) Return(val interface{}, exist bool) *Data_Get_Call {
	_c.Call.Return(val, exist)
	return _c
}

func (_c *Data_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *Data_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *Data) Set(key string, val interface{}) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Data_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - val interface{}
func (_e *Data_Expecter) Set(key interface{}, val interface{}) *Data_Set_Call {
	return &Data_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *Data_Set_Call) Run(run func(key string, val interface{})) *Data_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Data_Set_Call) Return(_a0 error) *Data_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Data_Set_Call) RunAndReturn(run func(string, interface{}) error) *Data_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewData creates a new instance of Data. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewData(t interface {
	mock.TestingT
	Cleanup(func())
}) *Data {
	mock := &Data{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
