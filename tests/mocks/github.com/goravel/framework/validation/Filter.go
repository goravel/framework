// Code generated by mockery. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

type Filter_Expecter struct {
	mock *mock.Mock
}

func (_m *Filter) EXPECT() *Filter_Expecter {
	return &Filter_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with no fields
func (_m *Filter) Handle() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Filter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Filter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
func (_e *Filter_Expecter) Handle() *Filter_Handle_Call {
	return &Filter_Handle_Call{Call: _e.mock.On("Handle")}
}

func (_c *Filter_Handle_Call) Run(run func()) *Filter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Filter_Handle_Call) Return(_a0 interface{}) *Filter_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Filter_Handle_Call) RunAndReturn(run func() interface{}) *Filter_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *Filter) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Filter_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type Filter_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *Filter_Expecter) Signature() *Filter_Signature_Call {
	return &Filter_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *Filter_Signature_Call) Run(run func()) *Filter_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Filter_Signature_Call) Return(_a0 string) *Filter_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Filter_Signature_Call) RunAndReturn(run func() string) *Filter_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
