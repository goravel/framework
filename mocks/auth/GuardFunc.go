// Code generated by mockery. DO NOT EDIT.

package auth

import (
	auth "github.com/goravel/framework/contracts/auth"
	mock "github.com/stretchr/testify/mock"
)

// GuardFunc is an autogenerated mock type for the GuardFunc type
type GuardFunc struct {
	mock.Mock
}

type GuardFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *GuardFunc) EXPECT() *GuardFunc_Expecter {
	return &GuardFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *GuardFunc) Execute(_a0 string, _a1 auth.Auth, _a2 auth.UserProvider) auth.GuardDriver {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 auth.GuardDriver
	if rf, ok := ret.Get(0).(func(string, auth.Auth, auth.UserProvider) auth.GuardDriver); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.GuardDriver)
		}
	}

	return r0
}

// GuardFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GuardFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 string
//   - _a1 auth.Auth
//   - _a2 auth.UserProvider
func (_e *GuardFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *GuardFunc_Execute_Call {
	return &GuardFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *GuardFunc_Execute_Call) Run(run func(_a0 string, _a1 auth.Auth, _a2 auth.UserProvider)) *GuardFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(auth.Auth), args[2].(auth.UserProvider))
	})
	return _c
}

func (_c *GuardFunc_Execute_Call) Return(_a0 auth.GuardDriver) *GuardFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GuardFunc_Execute_Call) RunAndReturn(run func(string, auth.Auth, auth.UserProvider) auth.GuardDriver) *GuardFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewGuardFunc creates a new instance of GuardFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuardFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *GuardFunc {
	mock := &GuardFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
