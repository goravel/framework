// Code generated by mockery. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

type UserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProvider) EXPECT() *UserProvider_Expecter {
	return &UserProvider_Expecter{mock: &_m.Mock}
}

// RetriveById provides a mock function with given fields: user, id
func (_m *UserProvider) RetriveById(user interface{}, id interface{}) error {
	ret := _m.Called(user, id)

	if len(ret) == 0 {
		panic("no return value specified for RetriveById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserProvider_RetriveById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetriveById'
type UserProvider_RetriveById_Call struct {
	*mock.Call
}

// RetriveById is a helper method to define mock.On call
//   - user interface{}
//   - id interface{}
func (_e *UserProvider_Expecter) RetriveById(user interface{}, id interface{}) *UserProvider_RetriveById_Call {
	return &UserProvider_RetriveById_Call{Call: _e.mock.On("RetriveById", user, id)}
}

func (_c *UserProvider_RetriveById_Call) Run(run func(user interface{}, id interface{})) *UserProvider_RetriveById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *UserProvider_RetriveById_Call) Return(_a0 error) *UserProvider_RetriveById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProvider_RetriveById_Call) RunAndReturn(run func(interface{}, interface{}) error) *UserProvider_RetriveById_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
