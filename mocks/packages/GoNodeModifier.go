// Code generated by mockery. DO NOT EDIT.

package packages

import (
	dst "github.com/dave/dst"
	mock "github.com/stretchr/testify/mock"
)

// GoNodeModifier is an autogenerated mock type for the GoNodeModifier type
type GoNodeModifier struct {
	mock.Mock
}

type GoNodeModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *GoNodeModifier) EXPECT() *GoNodeModifier_Expecter {
	return &GoNodeModifier_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: node
func (_m *GoNodeModifier) Apply(node dst.Node) error {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dst.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GoNodeModifier_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type GoNodeModifier_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - node dst.Node
func (_e *GoNodeModifier_Expecter) Apply(node interface{}) *GoNodeModifier_Apply_Call {
	return &GoNodeModifier_Apply_Call{Call: _e.mock.On("Apply", node)}
}

func (_c *GoNodeModifier_Apply_Call) Run(run func(node dst.Node)) *GoNodeModifier_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dst.Node))
	})
	return _c
}

func (_c *GoNodeModifier_Apply_Call) Return(_a0 error) *GoNodeModifier_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoNodeModifier_Apply_Call) RunAndReturn(run func(dst.Node) error) *GoNodeModifier_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoNodeModifier creates a new instance of GoNodeModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoNodeModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoNodeModifier {
	mock := &GoNodeModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
