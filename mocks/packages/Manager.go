// Code generated by mockery. DO NOT EDIT.

package packages

import mock "github.com/stretchr/testify/mock"

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Install provides a mock function with given fields: dir
func (_m *Manager) Install(dir string) error {
	ret := _m.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type Manager_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - dir string
func (_e *Manager_Expecter) Install(dir interface{}) *Manager_Install_Call {
	return &Manager_Install_Call{Call: _e.mock.On("Install", dir)}
}

func (_c *Manager_Install_Call) Run(run func(dir string)) *Manager_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_Install_Call) Return(_a0 error) *Manager_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Install_Call) RunAndReturn(run func(string) error) *Manager_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function with given fields: dir
func (_m *Manager) Uninstall(dir string) error {
	ret := _m.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for Uninstall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type Manager_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - dir string
func (_e *Manager_Expecter) Uninstall(dir interface{}) *Manager_Uninstall_Call {
	return &Manager_Uninstall_Call{Call: _e.mock.On("Uninstall", dir)}
}

func (_c *Manager_Uninstall_Call) Run(run func(dir string)) *Manager_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_Uninstall_Call) Return(_a0 error) *Manager_Uninstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Uninstall_Call) RunAndReturn(run func(string) error) *Manager_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
