// Code generated by mockery. DO NOT EDIT.

package modify

import (
	modify "github.com/goravel/framework/contracts/packages/modify"
	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Overwrite provides a mock function with given fields: content, forces
func (_m *File) Overwrite(content string, forces ...bool) modify.Apply {
	_va := make([]interface{}, len(forces))
	for _i := range forces {
		_va[_i] = forces[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, content)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Overwrite")
	}

	var r0 modify.Apply
	if rf, ok := ret.Get(0).(func(string, ...bool) modify.Apply); ok {
		r0 = rf(content, forces...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modify.Apply)
		}
	}

	return r0
}

// File_Overwrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Overwrite'
type File_Overwrite_Call struct {
	*mock.Call
}

// Overwrite is a helper method to define mock.On call
//   - content string
//   - forces ...bool
func (_e *File_Expecter) Overwrite(content interface{}, forces ...interface{}) *File_Overwrite_Call {
	return &File_Overwrite_Call{Call: _e.mock.On("Overwrite",
		append([]interface{}{content}, forces...)...)}
}

func (_c *File_Overwrite_Call) Run(run func(content string, forces ...bool)) *File_Overwrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *File_Overwrite_Call) Return(_a0 modify.Apply) *File_Overwrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *File_Overwrite_Call) RunAndReturn(run func(string, ...bool) modify.Apply) *File_Overwrite_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with no fields
func (_m *File) Remove() modify.Apply {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 modify.Apply
	if rf, ok := ret.Get(0).(func() modify.Apply); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modify.Apply)
		}
	}

	return r0
}

// File_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type File_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
func (_e *File_Expecter) Remove() *File_Remove_Call {
	return &File_Remove_Call{Call: _e.mock.On("Remove")}
}

func (_c *File_Remove_Call) Run(run func()) *File_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Remove_Call) Return(_a0 modify.Apply) *File_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *File_Remove_Call) RunAndReturn(run func() modify.Apply) *File_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
