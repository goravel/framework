// Code generated by mockery. DO NOT EDIT.

package modify

import (
	modify "github.com/goravel/framework/contracts/packages/modify"
	mock "github.com/stretchr/testify/mock"
)

// Apply is an autogenerated mock type for the Apply type
type Apply struct {
	mock.Mock
}

type Apply_Expecter struct {
	mock *mock.Mock
}

func (_m *Apply) EXPECT() *Apply_Expecter {
	return &Apply_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: _a0
func (_m *Apply) Apply(_a0 ...modify.Option) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...modify.Option) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Apply_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Apply_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - _a0 ...modify.Option
func (_e *Apply_Expecter) Apply(_a0 ...interface{}) *Apply_Apply_Call {
	return &Apply_Apply_Call{Call: _e.mock.On("Apply",
		append([]interface{}{}, _a0...)...)}
}

func (_c *Apply_Apply_Call) Run(run func(_a0 ...modify.Option)) *Apply_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]modify.Option, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(modify.Option)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Apply_Apply_Call) Return(_a0 error) *Apply_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Apply_Apply_Call) RunAndReturn(run func(...modify.Option) error) *Apply_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewApply creates a new instance of Apply. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApply(t interface {
	mock.TestingT
	Cleanup(func())
}) *Apply {
	mock := &Apply{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
