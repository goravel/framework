// Code generated by mockery. DO NOT EDIT.

package modify

import (
	dstutil "github.com/dave/dst/dstutil"
	mock "github.com/stretchr/testify/mock"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: cursor
func (_m *Action) Execute(cursor *dstutil.Cursor) {
	_m.Called(cursor)
}

// Action_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Action_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - cursor *dstutil.Cursor
func (_e *Action_Expecter) Execute(cursor interface{}) *Action_Execute_Call {
	return &Action_Execute_Call{Call: _e.mock.On("Execute", cursor)}
}

func (_c *Action_Execute_Call) Run(run func(cursor *dstutil.Cursor)) *Action_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dstutil.Cursor))
	})
	return _c
}

func (_c *Action_Execute_Call) Return() *Action_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *Action_Execute_Call) RunAndReturn(run func(*dstutil.Cursor)) *Action_Execute_Call {
	_c.Run(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
