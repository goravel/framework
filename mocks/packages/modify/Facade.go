// Code generated by mockery. DO NOT EDIT.

package modify

import (
	modify "github.com/goravel/framework/contracts/packages/modify"
	mock "github.com/stretchr/testify/mock"
)

// Facade is an autogenerated mock type for the Facade type
type Facade struct {
	mock.Mock
}

type Facade_Expecter struct {
	mock *mock.Mock
}

func (_m *Facade) EXPECT() *Facade_Expecter {
	return &Facade_Expecter{mock: &_m.Mock}
}

// File provides a mock function with given fields: path
func (_m *Facade) File(path string) modify.File {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 modify.File
	if rf, ok := ret.Get(0).(func(string) modify.File); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modify.File)
		}
	}

	return r0
}

// Facade_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type Facade_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - path string
func (_e *Facade_Expecter) File(path interface{}) *Facade_File_Call {
	return &Facade_File_Call{Call: _e.mock.On("File", path)}
}

func (_c *Facade_File_Call) Run(run func(path string)) *Facade_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Facade_File_Call) Return(_a0 modify.File) *Facade_File_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Facade_File_Call) RunAndReturn(run func(string) modify.File) *Facade_File_Call {
	_c.Call.Return(run)
	return _c
}

// NewFacade creates a new instance of Facade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *Facade {
	mock := &Facade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
