// Code generated by mockery. DO NOT EDIT.

package modify

import (
	match "github.com/goravel/framework/contracts/packages/match"
	mock "github.com/stretchr/testify/mock"

	modify "github.com/goravel/framework/contracts/packages/modify"
)

// GoFile is an autogenerated mock type for the GoFile type
type GoFile struct {
	mock.Mock
}

type GoFile_Expecter struct {
	mock *mock.Mock
}

func (_m *GoFile) EXPECT() *GoFile_Expecter {
	return &GoFile_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with no fields
func (_m *GoFile) Apply() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GoFile_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type GoFile_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
func (_e *GoFile_Expecter) Apply() *GoFile_Apply_Call {
	return &GoFile_Apply_Call{Call: _e.mock.On("Apply")}
}

func (_c *GoFile_Apply_Call) Run(run func()) *GoFile_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GoFile_Apply_Call) Return(_a0 error) *GoFile_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoFile_Apply_Call) RunAndReturn(run func() error) *GoFile_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: matchers
func (_m *GoFile) Find(matchers []match.GoNode) modify.GoNode {
	ret := _m.Called(matchers)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 modify.GoNode
	if rf, ok := ret.Get(0).(func([]match.GoNode) modify.GoNode); ok {
		r0 = rf(matchers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modify.GoNode)
		}
	}

	return r0
}

// GoFile_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type GoFile_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - matchers []match.GoNode
func (_e *GoFile_Expecter) Find(matchers interface{}) *GoFile_Find_Call {
	return &GoFile_Find_Call{Call: _e.mock.On("Find", matchers)}
}

func (_c *GoFile_Find_Call) Run(run func(matchers []match.GoNode)) *GoFile_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]match.GoNode))
	})
	return _c
}

func (_c *GoFile_Find_Call) Return(_a0 modify.GoNode) *GoFile_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoFile_Find_Call) RunAndReturn(run func([]match.GoNode) modify.GoNode) *GoFile_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoFile creates a new instance of GoFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoFile {
	mock := &GoFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
