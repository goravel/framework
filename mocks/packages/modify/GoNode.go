// Code generated by mockery. DO NOT EDIT.

package modify

import (
	dst "github.com/dave/dst"
	modify "github.com/goravel/framework/contracts/packages/modify"
	mock "github.com/stretchr/testify/mock"
)

// GoNode is an autogenerated mock type for the GoNode type
type GoNode struct {
	mock.Mock
}

type GoNode_Expecter struct {
	mock *mock.Mock
}

func (_m *GoNode) EXPECT() *GoNode_Expecter {
	return &GoNode_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: node
func (_m *GoNode) Apply(node dst.Node) error {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dst.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GoNode_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type GoNode_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - node dst.Node
func (_e *GoNode_Expecter) Apply(node interface{}) *GoNode_Apply_Call {
	return &GoNode_Apply_Call{Call: _e.mock.On("Apply", node)}
}

func (_c *GoNode_Apply_Call) Run(run func(node dst.Node)) *GoNode_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dst.Node))
	})
	return _c
}

func (_c *GoNode_Apply_Call) Return(_a0 error) *GoNode_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoNode_Apply_Call) RunAndReturn(run func(dst.Node) error) *GoNode_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Modify provides a mock function with given fields: actions
func (_m *GoNode) Modify(actions ...modify.Action) modify.GoFile {
	_va := make([]interface{}, len(actions))
	for _i := range actions {
		_va[_i] = actions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Modify")
	}

	var r0 modify.GoFile
	if rf, ok := ret.Get(0).(func(...modify.Action) modify.GoFile); ok {
		r0 = rf(actions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modify.GoFile)
		}
	}

	return r0
}

// GoNode_Modify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Modify'
type GoNode_Modify_Call struct {
	*mock.Call
}

// Modify is a helper method to define mock.On call
//   - actions ...modify.Action
func (_e *GoNode_Expecter) Modify(actions ...interface{}) *GoNode_Modify_Call {
	return &GoNode_Modify_Call{Call: _e.mock.On("Modify",
		append([]interface{}{}, actions...)...)}
}

func (_c *GoNode_Modify_Call) Run(run func(actions ...modify.Action)) *GoNode_Modify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]modify.Action, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(modify.Action)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GoNode_Modify_Call) Return(_a0 modify.GoFile) *GoNode_Modify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoNode_Modify_Call) RunAndReturn(run func(...modify.Action) modify.GoFile) *GoNode_Modify_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoNode creates a new instance of GoNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoNode {
	mock := &GoNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
