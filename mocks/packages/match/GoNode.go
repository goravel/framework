// Code generated by mockery. DO NOT EDIT.

package match

import (
	dst "github.com/dave/dst"
	dstutil "github.com/dave/dst/dstutil"

	mock "github.com/stretchr/testify/mock"
)

// GoNode is an autogenerated mock type for the GoNode type
type GoNode struct {
	mock.Mock
}

type GoNode_Expecter struct {
	mock *mock.Mock
}

func (_m *GoNode) EXPECT() *GoNode_Expecter {
	return &GoNode_Expecter{mock: &_m.Mock}
}

// MatchCursor provides a mock function with given fields: cursor
func (_m *GoNode) MatchCursor(cursor *dstutil.Cursor) bool {
	ret := _m.Called(cursor)

	if len(ret) == 0 {
		panic("no return value specified for MatchCursor")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*dstutil.Cursor) bool); ok {
		r0 = rf(cursor)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GoNode_MatchCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchCursor'
type GoNode_MatchCursor_Call struct {
	*mock.Call
}

// MatchCursor is a helper method to define mock.On call
//   - cursor *dstutil.Cursor
func (_e *GoNode_Expecter) MatchCursor(cursor interface{}) *GoNode_MatchCursor_Call {
	return &GoNode_MatchCursor_Call{Call: _e.mock.On("MatchCursor", cursor)}
}

func (_c *GoNode_MatchCursor_Call) Run(run func(cursor *dstutil.Cursor)) *GoNode_MatchCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dstutil.Cursor))
	})
	return _c
}

func (_c *GoNode_MatchCursor_Call) Return(_a0 bool) *GoNode_MatchCursor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoNode_MatchCursor_Call) RunAndReturn(run func(*dstutil.Cursor) bool) *GoNode_MatchCursor_Call {
	_c.Call.Return(run)
	return _c
}

// MatchNode provides a mock function with given fields: node
func (_m *GoNode) MatchNode(node dst.Node) bool {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for MatchNode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(dst.Node) bool); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GoNode_MatchNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchNode'
type GoNode_MatchNode_Call struct {
	*mock.Call
}

// MatchNode is a helper method to define mock.On call
//   - node dst.Node
func (_e *GoNode_Expecter) MatchNode(node interface{}) *GoNode_MatchNode_Call {
	return &GoNode_MatchNode_Call{Call: _e.mock.On("MatchNode", node)}
}

func (_c *GoNode_MatchNode_Call) Run(run func(node dst.Node)) *GoNode_MatchNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dst.Node))
	})
	return _c
}

func (_c *GoNode_MatchNode_Call) Return(_a0 bool) *GoNode_MatchNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoNode_MatchNode_Call) RunAndReturn(run func(dst.Node) bool) *GoNode_MatchNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoNode creates a new instance of GoNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoNode {
	mock := &GoNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
