// Code generated by mockery. DO NOT EDIT.

package packages

import mock "github.com/stretchr/testify/mock"

// FileModifier is an autogenerated mock type for the FileModifier type
type FileModifier struct {
	mock.Mock
}

type FileModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *FileModifier) EXPECT() *FileModifier_Expecter {
	return &FileModifier_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: dir
func (_m *FileModifier) Apply(dir string) error {
	ret := _m.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileModifier_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type FileModifier_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - dir string
func (_e *FileModifier_Expecter) Apply(dir interface{}) *FileModifier_Apply_Call {
	return &FileModifier_Apply_Call{Call: _e.mock.On("Apply", dir)}
}

func (_c *FileModifier_Apply_Call) Run(run func(dir string)) *FileModifier_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileModifier_Apply_Call) Return(_a0 error) *FileModifier_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileModifier_Apply_Call) RunAndReturn(run func(string) error) *FileModifier_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileModifier creates a new instance of FileModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileModifier {
	mock := &FileModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
