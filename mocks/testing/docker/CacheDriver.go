// Code generated by mockery. DO NOT EDIT.

package docker

import (
	docker "github.com/goravel/framework/contracts/testing/docker"
	mock "github.com/stretchr/testify/mock"
)

// CacheDriver is an autogenerated mock type for the CacheDriver type
type CacheDriver struct {
	mock.Mock
}

type CacheDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheDriver) EXPECT() *CacheDriver_Expecter {
	return &CacheDriver_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *CacheDriver) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheDriver_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type CacheDriver_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *CacheDriver_Expecter) Build() *CacheDriver_Build_Call {
	return &CacheDriver_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *CacheDriver_Build_Call) Run(run func()) *CacheDriver_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheDriver_Build_Call) Return(_a0 error) *CacheDriver_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Build_Call) RunAndReturn(run func() error) *CacheDriver_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with no fields
func (_m *CacheDriver) Config() docker.CacheConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 docker.CacheConfig
	if rf, ok := ret.Get(0).(func() docker.CacheConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(docker.CacheConfig)
	}

	return r0
}

// CacheDriver_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type CacheDriver_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *CacheDriver_Expecter) Config() *CacheDriver_Config_Call {
	return &CacheDriver_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *CacheDriver_Config_Call) Run(run func()) *CacheDriver_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheDriver_Config_Call) Return(_a0 docker.CacheConfig) *CacheDriver_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Config_Call) RunAndReturn(run func() docker.CacheConfig) *CacheDriver_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Fresh provides a mock function with no fields
func (_m *CacheDriver) Fresh() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheDriver_Fresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fresh'
type CacheDriver_Fresh_Call struct {
	*mock.Call
}

// Fresh is a helper method to define mock.On call
func (_e *CacheDriver_Expecter) Fresh() *CacheDriver_Fresh_Call {
	return &CacheDriver_Fresh_Call{Call: _e.mock.On("Fresh")}
}

func (_c *CacheDriver_Fresh_Call) Run(run func()) *CacheDriver_Fresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheDriver_Fresh_Call) Return(_a0 error) *CacheDriver_Fresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Fresh_Call) RunAndReturn(run func() error) *CacheDriver_Fresh_Call {
	_c.Call.Return(run)
	return _c
}

// Image provides a mock function with given fields: image
func (_m *CacheDriver) Image(image docker.Image) {
	_m.Called(image)
}

// CacheDriver_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type CacheDriver_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
//   - image docker.Image
func (_e *CacheDriver_Expecter) Image(image interface{}) *CacheDriver_Image_Call {
	return &CacheDriver_Image_Call{Call: _e.mock.On("Image", image)}
}

func (_c *CacheDriver_Image_Call) Run(run func(image docker.Image)) *CacheDriver_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(docker.Image))
	})
	return _c
}

func (_c *CacheDriver_Image_Call) Return() *CacheDriver_Image_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheDriver_Image_Call) RunAndReturn(run func(docker.Image)) *CacheDriver_Image_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *CacheDriver) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheDriver_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type CacheDriver_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *CacheDriver_Expecter) Ready() *CacheDriver_Ready_Call {
	return &CacheDriver_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *CacheDriver_Ready_Call) Run(run func()) *CacheDriver_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheDriver_Ready_Call) Return(_a0 error) *CacheDriver_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Ready_Call) RunAndReturn(run func() error) *CacheDriver_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Reuse provides a mock function with given fields: containerID, port
func (_m *CacheDriver) Reuse(containerID string, port int) error {
	ret := _m.Called(containerID, port)

	if len(ret) == 0 {
		panic("no return value specified for Reuse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(containerID, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheDriver_Reuse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reuse'
type CacheDriver_Reuse_Call struct {
	*mock.Call
}

// Reuse is a helper method to define mock.On call
//   - containerID string
//   - port int
func (_e *CacheDriver_Expecter) Reuse(containerID interface{}, port interface{}) *CacheDriver_Reuse_Call {
	return &CacheDriver_Reuse_Call{Call: _e.mock.On("Reuse", containerID, port)}
}

func (_c *CacheDriver_Reuse_Call) Run(run func(containerID string, port int)) *CacheDriver_Reuse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *CacheDriver_Reuse_Call) Return(_a0 error) *CacheDriver_Reuse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Reuse_Call) RunAndReturn(run func(string, int) error) *CacheDriver_Reuse_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *CacheDriver) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheDriver_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type CacheDriver_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *CacheDriver_Expecter) Shutdown() *CacheDriver_Shutdown_Call {
	return &CacheDriver_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *CacheDriver_Shutdown_Call) Run(run func()) *CacheDriver_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheDriver_Shutdown_Call) Return(_a0 error) *CacheDriver_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheDriver_Shutdown_Call) RunAndReturn(run func() error) *CacheDriver_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheDriver creates a new instance of CacheDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheDriver {
	mock := &CacheDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
