// Code generated by mockery. DO NOT EDIT.

package docker

import (
	docker "github.com/goravel/framework/contracts/testing/docker"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ImageDriver is an autogenerated mock type for the ImageDriver type
type ImageDriver struct {
	mock.Mock
}

type ImageDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageDriver) EXPECT() *ImageDriver_Expecter {
	return &ImageDriver_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *ImageDriver) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageDriver_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type ImageDriver_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *ImageDriver_Expecter) Build() *ImageDriver_Build_Call {
	return &ImageDriver_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *ImageDriver_Build_Call) Run(run func()) *ImageDriver_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImageDriver_Build_Call) Return(_a0 error) *ImageDriver_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageDriver_Build_Call) RunAndReturn(run func() error) *ImageDriver_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with no fields
func (_m *ImageDriver) Config() docker.ImageConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 docker.ImageConfig
	if rf, ok := ret.Get(0).(func() docker.ImageConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(docker.ImageConfig)
	}

	return r0
}

// ImageDriver_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type ImageDriver_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *ImageDriver_Expecter) Config() *ImageDriver_Config_Call {
	return &ImageDriver_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *ImageDriver_Config_Call) Run(run func()) *ImageDriver_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImageDriver_Config_Call) Return(_a0 docker.ImageConfig) *ImageDriver_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageDriver_Config_Call) RunAndReturn(run func() docker.ImageConfig) *ImageDriver_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields: _a0, _a1
func (_m *ImageDriver) Ready(_a0 func() error, _a1 ...time.Duration) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error, ...time.Duration) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageDriver_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type ImageDriver_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - _a0 func() error
//   - _a1 ...time.Duration
func (_e *ImageDriver_Expecter) Ready(_a0 interface{}, _a1 ...interface{}) *ImageDriver_Ready_Call {
	return &ImageDriver_Ready_Call{Call: _e.mock.On("Ready",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *ImageDriver_Ready_Call) Run(run func(_a0 func() error, _a1 ...time.Duration)) *ImageDriver_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]time.Duration, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(time.Duration)
			}
		}
		run(args[0].(func() error), variadicArgs...)
	})
	return _c
}

func (_c *ImageDriver_Ready_Call) Return(_a0 error) *ImageDriver_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageDriver_Ready_Call) RunAndReturn(run func(func() error, ...time.Duration) error) *ImageDriver_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *ImageDriver) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageDriver_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type ImageDriver_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *ImageDriver_Expecter) Shutdown() *ImageDriver_Shutdown_Call {
	return &ImageDriver_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *ImageDriver_Shutdown_Call) Run(run func()) *ImageDriver_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImageDriver_Shutdown_Call) Return(_a0 error) *ImageDriver_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageDriver_Shutdown_Call) RunAndReturn(run func() error) *ImageDriver_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewImageDriver creates a new instance of ImageDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageDriver {
	mock := &ImageDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
