// Code generated by mockery. DO NOT EDIT.

package event

import mock "github.com/stretchr/testify/mock"

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

type EventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *EventListener) EXPECT() *EventListener_Expecter {
	return &EventListener_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, args
func (_m *EventListener) Handle(_a0 interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventListener_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type EventListener_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 interface{}
//   - args ...interface{}
func (_e *EventListener_Expecter) Handle(_a0 interface{}, args ...interface{}) *EventListener_Handle_Call {
	return &EventListener_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{_a0}, args...)...)}
}

func (_c *EventListener_Handle_Call) Run(run func(_a0 interface{}, args ...interface{})) *EventListener_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *EventListener_Handle_Call) Return(_a0 error) *EventListener_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventListener_Handle_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *EventListener_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
