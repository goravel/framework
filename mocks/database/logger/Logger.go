// Code generated by mockery. DO NOT EDIT.

package logger

import (
	context "context"

	carbon "github.com/dromara/carbon/v2"

	gormlogger "gorm.io/gorm/logger"

	logger "github.com/goravel/framework/contracts/database/logger"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Error(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Error(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Error_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Info(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Info(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Info_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Info_Call {
	_c.Run(run)
	return _c
}

// Level provides a mock function with given fields: _a0
func (_m *Logger) Level(_a0 logger.Level) logger.Logger {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(logger.Level) logger.Logger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type Logger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
//   - _a0 logger.Level
func (_e *Logger_Expecter) Level(_a0 interface{}) *Logger_Level_Call {
	return &Logger_Level_Call{Call: _e.mock.On("Level", _a0)}
}

func (_c *Logger_Level_Call) Run(run func(_a0 logger.Level)) *Logger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Level))
	})
	return _c
}

func (_c *Logger_Level_Call) Return(_a0 logger.Logger) *Logger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Level_Call) RunAndReturn(run func(logger.Level) logger.Logger) *Logger_Level_Call {
	_c.Call.Return(run)
	return _c
}

// ToGorm provides a mock function with no fields
func (_m *Logger) ToGorm() gormlogger.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToGorm")
	}

	var r0 gormlogger.Interface
	if rf, ok := ret.Get(0).(func() gormlogger.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gormlogger.Interface)
		}
	}

	return r0
}

// Logger_ToGorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGorm'
type Logger_ToGorm_Call struct {
	*mock.Call
}

// ToGorm is a helper method to define mock.On call
func (_e *Logger_Expecter) ToGorm() *Logger_ToGorm_Call {
	return &Logger_ToGorm_Call{Call: _e.mock.On("ToGorm")}
}

func (_c *Logger_ToGorm_Call) Run(run func()) *Logger_ToGorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_ToGorm_Call) Return(_a0 gormlogger.Interface) *Logger_ToGorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_ToGorm_Call) RunAndReturn(run func() gormlogger.Interface) *Logger_ToGorm_Call {
	_c.Call.Return(run)
	return _c
}

// Trace provides a mock function with given fields: ctx, begin, sql, rowsAffected, err
func (_m *Logger) Trace(ctx context.Context, begin carbon.Carbon, sql string, rowsAffected int64, err error) {
	_m.Called(ctx, begin, sql, rowsAffected, err)
}

// Logger_Trace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trace'
type Logger_Trace_Call struct {
	*mock.Call
}

// Trace is a helper method to define mock.On call
//   - ctx context.Context
//   - begin carbon.Carbon
//   - sql string
//   - rowsAffected int64
//   - err error
func (_e *Logger_Expecter) Trace(ctx interface{}, begin interface{}, sql interface{}, rowsAffected interface{}, err interface{}) *Logger_Trace_Call {
	return &Logger_Trace_Call{Call: _e.mock.On("Trace", ctx, begin, sql, rowsAffected, err)}
}

func (_c *Logger_Trace_Call) Run(run func(ctx context.Context, begin carbon.Carbon, sql string, rowsAffected int64, err error)) *Logger_Trace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(carbon.Carbon), args[2].(string), args[3].(int64), args[4].(error))
	})
	return _c
}

func (_c *Logger_Trace_Call) Return() *Logger_Trace_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Trace_Call) RunAndReturn(run func(context.Context, carbon.Carbon, string, int64, error)) *Logger_Trace_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Warn(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Warn(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Warn_Call {
	_c.Run(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
