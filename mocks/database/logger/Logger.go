// Code generated by mockery. DO NOT EDIT.

package logger

import (
	context "context"

	carbon "github.com/dromara/carbon/v2"

	gormlogger "gorm.io/gorm/logger"

	log "github.com/goravel/framework/contracts/log"

	logger "github.com/goravel/framework/contracts/database/logger"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Errorf provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Errorf(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Logger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Errorf(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Errorf_Call {
	return &Logger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Errorf_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Errorf_Call) Return() *Logger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Infof(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Logger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Infof(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Infof_Call {
	return &Logger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Infof_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Infof_Call) Return() *Logger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infof_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Infof_Call {
	_c.Run(run)
	return _c
}

// Level provides a mock function with given fields: _a0
func (_m *Logger) Level(_a0 logger.Level) logger.Logger {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(logger.Level) logger.Logger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type Logger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
//   - _a0 logger.Level
func (_e *Logger_Expecter) Level(_a0 interface{}) *Logger_Level_Call {
	return &Logger_Level_Call{Call: _e.mock.On("Level", _a0)}
}

func (_c *Logger_Level_Call) Run(run func(_a0 logger.Level)) *Logger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Level))
	})
	return _c
}

func (_c *Logger_Level_Call) Return(_a0 logger.Logger) *Logger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Level_Call) RunAndReturn(run func(logger.Level) logger.Logger) *Logger_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with no fields
func (_m *Logger) Log() log.Log {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 log.Log
	if rf, ok := ret.Get(0).(func() log.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Log)
		}
	}

	return r0
}

// Logger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Logger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *Logger_Expecter) Log() *Logger_Log_Call {
	return &Logger_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *Logger_Log_Call) Run(run func()) *Logger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Log_Call) Return(_a0 log.Log) *Logger_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Log_Call) RunAndReturn(run func() log.Log) *Logger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Panicf provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Panicf(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type Logger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Panicf(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Panicf_Call {
	return &Logger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Panicf_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Panicf_Call) Return() *Logger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Panicf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Panicf_Call {
	_c.Run(run)
	return _c
}

// ToGorm provides a mock function with no fields
func (_m *Logger) ToGorm() gormlogger.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToGorm")
	}

	var r0 gormlogger.Interface
	if rf, ok := ret.Get(0).(func() gormlogger.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gormlogger.Interface)
		}
	}

	return r0
}

// Logger_ToGorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGorm'
type Logger_ToGorm_Call struct {
	*mock.Call
}

// ToGorm is a helper method to define mock.On call
func (_e *Logger_Expecter) ToGorm() *Logger_ToGorm_Call {
	return &Logger_ToGorm_Call{Call: _e.mock.On("ToGorm")}
}

func (_c *Logger_ToGorm_Call) Run(run func()) *Logger_ToGorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_ToGorm_Call) Return(_a0 gormlogger.Interface) *Logger_ToGorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_ToGorm_Call) RunAndReturn(run func() gormlogger.Interface) *Logger_ToGorm_Call {
	_c.Call.Return(run)
	return _c
}

// Trace provides a mock function with given fields: ctx, begin, sql, rowsAffected, err
func (_m *Logger) Trace(ctx context.Context, begin *carbon.Carbon, sql string, rowsAffected int64, err error) {
	_m.Called(ctx, begin, sql, rowsAffected, err)
}

// Logger_Trace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trace'
type Logger_Trace_Call struct {
	*mock.Call
}

// Trace is a helper method to define mock.On call
//   - ctx context.Context
//   - begin *carbon.Carbon
//   - sql string
//   - rowsAffected int64
//   - err error
func (_e *Logger_Expecter) Trace(ctx interface{}, begin interface{}, sql interface{}, rowsAffected interface{}, err interface{}) *Logger_Trace_Call {
	return &Logger_Trace_Call{Call: _e.mock.On("Trace", ctx, begin, sql, rowsAffected, err)}
}

func (_c *Logger_Trace_Call) Run(run func(ctx context.Context, begin *carbon.Carbon, sql string, rowsAffected int64, err error)) *Logger_Trace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*carbon.Carbon), args[2].(string), args[3].(int64), args[4].(error))
	})
	return _c
}

func (_c *Logger_Trace_Call) Return() *Logger_Trace_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Trace_Call) RunAndReturn(run func(context.Context, *carbon.Carbon, string, int64, error)) *Logger_Trace_Call {
	_c.Run(run)
	return _c
}

// Warningf provides a mock function with given fields: _a0, _a1, _a2
func (_m *Logger) Warningf(_a0 context.Context, _a1 string, _a2 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	_m.Called(_ca...)
}

// Logger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type Logger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...interface{}
func (_e *Logger_Expecter) Warningf(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Logger_Warningf_Call {
	return &Logger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Logger_Warningf_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...interface{})) *Logger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warningf_Call) Return() *Logger_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warningf_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Warningf_Call {
	_c.Run(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
