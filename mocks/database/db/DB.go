// Code generated by mockery. DO NOT EDIT.

package db

import (
	context "context"

	db "github.com/goravel/framework/contracts/database/db"
	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// Connection provides a mock function with given fields: name
func (_m *DB) Connection(name string) db.DB {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Connection")
	}

	var r0 db.DB
	if rf, ok := ret.Get(0).(func(string) db.DB); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DB)
		}
	}

	return r0
}

// DB_Connection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connection'
type DB_Connection_Call struct {
	*mock.Call
}

// Connection is a helper method to define mock.On call
//   - name string
func (_e *DB_Expecter) Connection(name interface{}) *DB_Connection_Call {
	return &DB_Connection_Call{Call: _e.mock.On("Connection", name)}
}

func (_c *DB_Connection_Call) Run(run func(name string)) *DB_Connection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DB_Connection_Call) Return(_a0 db.DB) *DB_Connection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Connection_Call) RunAndReturn(run func(string) db.DB) *DB_Connection_Call {
	_c.Call.Return(run)
	return _c
}

// Table provides a mock function with given fields: name
func (_m *DB) Table(name string) db.Query {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Table")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// DB_Table_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Table'
type DB_Table_Call struct {
	*mock.Call
}

// Table is a helper method to define mock.On call
//   - name string
func (_e *DB_Expecter) Table(name interface{}) *DB_Table_Call {
	return &DB_Table_Call{Call: _e.mock.On("Table", name)}
}

func (_c *DB_Table_Call) Run(run func(name string)) *DB_Table_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DB_Table_Call) Return(_a0 db.Query) *DB_Table_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Table_Call) RunAndReturn(run func(string) db.Query) *DB_Table_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *DB) WithContext(ctx context.Context) db.DB {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 db.DB
	if rf, ok := ret.Get(0).(func(context.Context) db.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DB)
		}
	}

	return r0
}

// DB_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type DB_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DB_Expecter) WithContext(ctx interface{}) *DB_WithContext_Call {
	return &DB_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *DB_WithContext_Call) Run(run func(ctx context.Context)) *DB_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_WithContext_Call) Return(_a0 db.DB) *DB_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_WithContext_Call) RunAndReturn(run func(context.Context) db.DB) *DB_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
