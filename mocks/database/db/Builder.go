// Code generated by mockery. DO NOT EDIT.

package db

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: query, args
func (_m *Builder) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Builder_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Builder_Expecter) Exec(query interface{}, args ...interface{}) *Builder_Exec_Call {
	return &Builder_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *Builder_Exec_Call) Run(run func(query string, args ...interface{})) *Builder_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Builder_Exec_Call) Return(_a0 sql.Result, _a1 error) *Builder_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_Exec_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *Builder_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: dest, query, args
func (_m *Builder) Get(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Builder_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *Builder_Expecter) Get(dest interface{}, query interface{}, args ...interface{}) *Builder_Get_Call {
	return &Builder_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *Builder_Get_Call) Run(run func(dest interface{}, query string, args ...interface{})) *Builder_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Builder_Get_Call) Return(_a0 error) *Builder_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Get_Call) RunAndReturn(run func(interface{}, string, ...interface{}) error) *Builder_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *Builder) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Builder_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Builder_Expecter) Query(query interface{}, args ...interface{}) *Builder_Query_Call {
	return &Builder_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *Builder_Query_Call) Run(run func(query string, args ...interface{})) *Builder_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Builder_Query_Call) Return(_a0 *sql.Rows, _a1 error) *Builder_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *Builder_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: dest, query, args
func (_m *Builder) Select(dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type Builder_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *Builder_Expecter) Select(dest interface{}, query interface{}, args ...interface{}) *Builder_Select_Call {
	return &Builder_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{dest, query}, args...)...)}
}

func (_c *Builder_Select_Call) Run(run func(dest interface{}, query string, args ...interface{})) *Builder_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Builder_Select_Call) Return(_a0 error) *Builder_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Select_Call) RunAndReturn(run func(interface{}, string, ...interface{}) error) *Builder_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
