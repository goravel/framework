// Code generated by mockery. DO NOT EDIT.

package db

import (
	db "github.com/goravel/framework/contracts/database/db"
	mock "github.com/stretchr/testify/mock"
)

// Query is an autogenerated mock type for the Query type
type Query struct {
	mock.Mock
}

type Query_Expecter struct {
	mock *mock.Mock
}

func (_m *Query) EXPECT() *Query_Expecter {
	return &Query_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *Query) Count() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Query_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *Query_Expecter) Count() *Query_Count_Call {
	return &Query_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *Query_Count_Call) Run(run func()) *Query_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_Count_Call) Return(_a0 int64, _a1 error) *Query_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Count_Call) RunAndReturn(run func() (int64, error)) *Query_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CrossJoin provides a mock function with given fields: query, args
func (_m *Query) CrossJoin(query string, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CrossJoin")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_CrossJoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CrossJoin'
type Query_CrossJoin_Call struct {
	*mock.Call
}

// CrossJoin is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Query_Expecter) CrossJoin(query interface{}, args ...interface{}) *Query_CrossJoin_Call {
	return &Query_CrossJoin_Call{Call: _e.mock.On("CrossJoin",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_CrossJoin_Call) Run(run func(query string, args ...interface{})) *Query_CrossJoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_CrossJoin_Call) Return(_a0 db.Query) *Query_CrossJoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_CrossJoin_Call) RunAndReturn(run func(string, ...interface{}) db.Query) *Query_CrossJoin_Call {
	_c.Call.Return(run)
	return _c
}

// Cursor provides a mock function with no fields
func (_m *Query) Cursor() (chan db.Row, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cursor")
	}

	var r0 chan db.Row
	var r1 error
	if rf, ok := ret.Get(0).(func() (chan db.Row, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chan db.Row); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan db.Row)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Cursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cursor'
type Query_Cursor_Call struct {
	*mock.Call
}

// Cursor is a helper method to define mock.On call
func (_e *Query_Expecter) Cursor() *Query_Cursor_Call {
	return &Query_Cursor_Call{Call: _e.mock.On("Cursor")}
}

func (_c *Query_Cursor_Call) Run(run func()) *Query_Cursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_Cursor_Call) Return(_a0 chan db.Row, _a1 error) *Query_Cursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Cursor_Call) RunAndReturn(run func() (chan db.Row, error)) *Query_Cursor_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function with given fields: column, value
func (_m *Query) Decrement(column string, value ...uint64) error {
	_va := make([]interface{}, len(value))
	for _i := range value {
		_va[_i] = value[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, column)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...uint64) error); ok {
		r0 = rf(column, value...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type Query_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - column string
//   - value ...uint64
func (_e *Query_Expecter) Decrement(column interface{}, value ...interface{}) *Query_Decrement_Call {
	return &Query_Decrement_Call{Call: _e.mock.On("Decrement",
		append([]interface{}{column}, value...)...)}
}

func (_c *Query_Decrement_Call) Run(run func(column string, value ...uint64)) *Query_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_Decrement_Call) Return(_a0 error) *Query_Decrement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Decrement_Call) RunAndReturn(run func(string, ...uint64) error) *Query_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with no fields
func (_m *Query) Delete() (*db.Result, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *db.Result
	var r1 error
	if rf, ok := ret.Get(0).(func() (*db.Result, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *db.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Result)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Query_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *Query_Expecter) Delete() *Query_Delete_Call {
	return &Query_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *Query_Delete_Call) Run(run func()) *Query_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_Delete_Call) Return(_a0 *db.Result, _a1 error) *Query_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Delete_Call) RunAndReturn(run func() (*db.Result, error)) *Query_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Distinct provides a mock function with no fields
func (_m *Query) Distinct() db.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Distinct")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func() db.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Distinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distinct'
type Query_Distinct_Call struct {
	*mock.Call
}

// Distinct is a helper method to define mock.On call
func (_e *Query_Expecter) Distinct() *Query_Distinct_Call {
	return &Query_Distinct_Call{Call: _e.mock.On("Distinct")}
}

func (_c *Query_Distinct_Call) Run(run func()) *Query_Distinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_Distinct_Call) Return(_a0 db.Query) *Query_Distinct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Distinct_Call) RunAndReturn(run func() db.Query) *Query_Distinct_Call {
	_c.Call.Return(run)
	return _c
}

// DoesntExist provides a mock function with no fields
func (_m *Query) DoesntExist() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DoesntExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_DoesntExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesntExist'
type Query_DoesntExist_Call struct {
	*mock.Call
}

// DoesntExist is a helper method to define mock.On call
func (_e *Query_Expecter) DoesntExist() *Query_DoesntExist_Call {
	return &Query_DoesntExist_Call{Call: _e.mock.On("DoesntExist")}
}

func (_c *Query_DoesntExist_Call) Run(run func()) *Query_DoesntExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_DoesntExist_Call) Return(_a0 bool, _a1 error) *Query_DoesntExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_DoesntExist_Call) RunAndReturn(run func() (bool, error)) *Query_DoesntExist_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with no fields
func (_m *Query) Exists() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Query_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *Query_Expecter) Exists() *Query_Exists_Call {
	return &Query_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *Query_Exists_Call) Run(run func()) *Query_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_Exists_Call) Return(_a0 bool, _a1 error) *Query_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Exists_Call) RunAndReturn(run func() (bool, error)) *Query_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: dest, conds
func (_m *Query) Find(dest interface{}, conds ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(dest, conds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type Query_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - dest interface{}
//   - conds ...interface{}
func (_e *Query_Expecter) Find(dest interface{}, conds ...interface{}) *Query_Find_Call {
	return &Query_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{dest}, conds...)...)}
}

func (_c *Query_Find_Call) Run(run func(dest interface{}, conds ...interface{})) *Query_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_Find_Call) Return(_a0 error) *Query_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Find_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *Query_Find_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with given fields: dest
func (_m *Query) First(dest interface{}) error {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type Query_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//   - dest interface{}
func (_e *Query_Expecter) First(dest interface{}) *Query_First_Call {
	return &Query_First_Call{Call: _e.mock.On("First", dest)}
}

func (_c *Query_First_Call) Run(run func(dest interface{})) *Query_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Query_First_Call) Return(_a0 error) *Query_First_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_First_Call) RunAndReturn(run func(interface{}) error) *Query_First_Call {
	_c.Call.Return(run)
	return _c
}

// FirstOr provides a mock function with given fields: dest, callback
func (_m *Query) FirstOr(dest interface{}, callback func() error) error {
	ret := _m.Called(dest, callback)

	if len(ret) == 0 {
		panic("no return value specified for FirstOr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, func() error) error); ok {
		r0 = rf(dest, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_FirstOr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOr'
type Query_FirstOr_Call struct {
	*mock.Call
}

// FirstOr is a helper method to define mock.On call
//   - dest interface{}
//   - callback func() error
func (_e *Query_Expecter) FirstOr(dest interface{}, callback interface{}) *Query_FirstOr_Call {
	return &Query_FirstOr_Call{Call: _e.mock.On("FirstOr", dest, callback)}
}

func (_c *Query_FirstOr_Call) Run(run func(dest interface{}, callback func() error)) *Query_FirstOr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(func() error))
	})
	return _c
}

func (_c *Query_FirstOr_Call) Return(_a0 error) *Query_FirstOr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_FirstOr_Call) RunAndReturn(run func(interface{}, func() error) error) *Query_FirstOr_Call {
	_c.Call.Return(run)
	return _c
}

// FirstOrFail provides a mock function with given fields: dest
func (_m *Query) FirstOrFail(dest interface{}) error {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for FirstOrFail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_FirstOrFail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOrFail'
type Query_FirstOrFail_Call struct {
	*mock.Call
}

// FirstOrFail is a helper method to define mock.On call
//   - dest interface{}
func (_e *Query_Expecter) FirstOrFail(dest interface{}) *Query_FirstOrFail_Call {
	return &Query_FirstOrFail_Call{Call: _e.mock.On("FirstOrFail", dest)}
}

func (_c *Query_FirstOrFail_Call) Run(run func(dest interface{})) *Query_FirstOrFail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Query_FirstOrFail_Call) Return(_a0 error) *Query_FirstOrFail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_FirstOrFail_Call) RunAndReturn(run func(interface{}) error) *Query_FirstOrFail_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: dest
func (_m *Query) Get(dest interface{}) error {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Query_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - dest interface{}
func (_e *Query_Expecter) Get(dest interface{}) *Query_Get_Call {
	return &Query_Get_Call{Call: _e.mock.On("Get", dest)}
}

func (_c *Query_Get_Call) Run(run func(dest interface{})) *Query_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Query_Get_Call) Return(_a0 error) *Query_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Get_Call) RunAndReturn(run func(interface{}) error) *Query_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GroupBy provides a mock function with given fields: column
func (_m *Query) GroupBy(column ...string) db.Query {
	_va := make([]interface{}, len(column))
	for _i := range column {
		_va[_i] = column[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupBy")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(...string) db.Query); ok {
		r0 = rf(column...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_GroupBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupBy'
type Query_GroupBy_Call struct {
	*mock.Call
}

// GroupBy is a helper method to define mock.On call
//   - column ...string
func (_e *Query_Expecter) GroupBy(column ...interface{}) *Query_GroupBy_Call {
	return &Query_GroupBy_Call{Call: _e.mock.On("GroupBy",
		append([]interface{}{}, column...)...)}
}

func (_c *Query_GroupBy_Call) Run(run func(column ...string)) *Query_GroupBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Query_GroupBy_Call) Return(_a0 db.Query) *Query_GroupBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_GroupBy_Call) RunAndReturn(run func(...string) db.Query) *Query_GroupBy_Call {
	_c.Call.Return(run)
	return _c
}

// Having provides a mock function with given fields: query, args
func (_m *Query) Having(query interface{}, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Having")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Having_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Having'
type Query_Having_Call struct {
	*mock.Call
}

// Having is a helper method to define mock.On call
//   - query interface{}
//   - args ...interface{}
func (_e *Query_Expecter) Having(query interface{}, args ...interface{}) *Query_Having_Call {
	return &Query_Having_Call{Call: _e.mock.On("Having",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_Having_Call) Run(run func(query interface{}, args ...interface{})) *Query_Having_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_Having_Call) Return(_a0 db.Query) *Query_Having_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Having_Call) RunAndReturn(run func(interface{}, ...interface{}) db.Query) *Query_Having_Call {
	_c.Call.Return(run)
	return _c
}

// InRandomOrder provides a mock function with no fields
func (_m *Query) InRandomOrder() db.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InRandomOrder")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func() db.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_InRandomOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InRandomOrder'
type Query_InRandomOrder_Call struct {
	*mock.Call
}

// InRandomOrder is a helper method to define mock.On call
func (_e *Query_Expecter) InRandomOrder() *Query_InRandomOrder_Call {
	return &Query_InRandomOrder_Call{Call: _e.mock.On("InRandomOrder")}
}

func (_c *Query_InRandomOrder_Call) Run(run func()) *Query_InRandomOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_InRandomOrder_Call) Return(_a0 db.Query) *Query_InRandomOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_InRandomOrder_Call) RunAndReturn(run func() db.Query) *Query_InRandomOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function with given fields: column, value
func (_m *Query) Increment(column string, value ...uint64) error {
	_va := make([]interface{}, len(value))
	for _i := range value {
		_va[_i] = value[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, column)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...uint64) error); ok {
		r0 = rf(column, value...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type Query_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - column string
//   - value ...uint64
func (_e *Query_Expecter) Increment(column interface{}, value ...interface{}) *Query_Increment_Call {
	return &Query_Increment_Call{Call: _e.mock.On("Increment",
		append([]interface{}{column}, value...)...)}
}

func (_c *Query_Increment_Call) Run(run func(column string, value ...uint64)) *Query_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_Increment_Call) Return(_a0 error) *Query_Increment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Increment_Call) RunAndReturn(run func(string, ...uint64) error) *Query_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: data
func (_m *Query) Insert(data interface{}) (*db.Result, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *db.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*db.Result, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *db.Result); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Query_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - data interface{}
func (_e *Query_Expecter) Insert(data interface{}) *Query_Insert_Call {
	return &Query_Insert_Call{Call: _e.mock.On("Insert", data)}
}

func (_c *Query_Insert_Call) Run(run func(data interface{})) *Query_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Query_Insert_Call) Return(_a0 *db.Result, _a1 error) *Query_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Insert_Call) RunAndReturn(run func(interface{}) (*db.Result, error)) *Query_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGetId provides a mock function with given fields: data
func (_m *Query) InsertGetId(data interface{}) (int64, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertGetId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (int64, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) int64); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_InsertGetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGetId'
type Query_InsertGetId_Call struct {
	*mock.Call
}

// InsertGetId is a helper method to define mock.On call
//   - data interface{}
func (_e *Query_Expecter) InsertGetId(data interface{}) *Query_InsertGetId_Call {
	return &Query_InsertGetId_Call{Call: _e.mock.On("InsertGetId", data)}
}

func (_c *Query_InsertGetId_Call) Run(run func(data interface{})) *Query_InsertGetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Query_InsertGetId_Call) Return(_a0 int64, _a1 error) *Query_InsertGetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_InsertGetId_Call) RunAndReturn(run func(interface{}) (int64, error)) *Query_InsertGetId_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: query, args
func (_m *Query) Join(query string, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type Query_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Query_Expecter) Join(query interface{}, args ...interface{}) *Query_Join_Call {
	return &Query_Join_Call{Call: _e.mock.On("Join",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_Join_Call) Run(run func(query string, args ...interface{})) *Query_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_Join_Call) Return(_a0 db.Query) *Query_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Join_Call) RunAndReturn(run func(string, ...interface{}) db.Query) *Query_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Latest provides a mock function with given fields: dest, column
func (_m *Query) Latest(dest interface{}, column ...string) error {
	_va := make([]interface{}, len(column))
	for _i := range column {
		_va[_i] = column[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Latest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...string) error); ok {
		r0 = rf(dest, column...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Latest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Latest'
type Query_Latest_Call struct {
	*mock.Call
}

// Latest is a helper method to define mock.On call
//   - dest interface{}
//   - column ...string
func (_e *Query_Expecter) Latest(dest interface{}, column ...interface{}) *Query_Latest_Call {
	return &Query_Latest_Call{Call: _e.mock.On("Latest",
		append([]interface{}{dest}, column...)...)}
}

func (_c *Query_Latest_Call) Run(run func(dest interface{}, column ...string)) *Query_Latest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_Latest_Call) Return(_a0 error) *Query_Latest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Latest_Call) RunAndReturn(run func(interface{}, ...string) error) *Query_Latest_Call {
	_c.Call.Return(run)
	return _c
}

// LeftJoin provides a mock function with given fields: query, args
func (_m *Query) LeftJoin(query string, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LeftJoin")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_LeftJoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeftJoin'
type Query_LeftJoin_Call struct {
	*mock.Call
}

// LeftJoin is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Query_Expecter) LeftJoin(query interface{}, args ...interface{}) *Query_LeftJoin_Call {
	return &Query_LeftJoin_Call{Call: _e.mock.On("LeftJoin",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_LeftJoin_Call) Run(run func(query string, args ...interface{})) *Query_LeftJoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_LeftJoin_Call) Return(_a0 db.Query) *Query_LeftJoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_LeftJoin_Call) RunAndReturn(run func(string, ...interface{}) db.Query) *Query_LeftJoin_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function with given fields: limit
func (_m *Query) Limit(limit uint64) db.Query {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(uint64) db.Query); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type Query_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
//   - limit uint64
func (_e *Query_Expecter) Limit(limit interface{}) *Query_Limit_Call {
	return &Query_Limit_Call{Call: _e.mock.On("Limit", limit)}
}

func (_c *Query_Limit_Call) Run(run func(limit uint64)) *Query_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Query_Limit_Call) Return(_a0 db.Query) *Query_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Limit_Call) RunAndReturn(run func(uint64) db.Query) *Query_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// LockForUpdate provides a mock function with no fields
func (_m *Query) LockForUpdate() db.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LockForUpdate")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func() db.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_LockForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockForUpdate'
type Query_LockForUpdate_Call struct {
	*mock.Call
}

// LockForUpdate is a helper method to define mock.On call
func (_e *Query_Expecter) LockForUpdate() *Query_LockForUpdate_Call {
	return &Query_LockForUpdate_Call{Call: _e.mock.On("LockForUpdate")}
}

func (_c *Query_LockForUpdate_Call) Run(run func()) *Query_LockForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_LockForUpdate_Call) Return(_a0 db.Query) *Query_LockForUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_LockForUpdate_Call) RunAndReturn(run func() db.Query) *Query_LockForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Offset provides a mock function with given fields: offset
func (_m *Query) Offset(offset uint64) db.Query {
	ret := _m.Called(offset)

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(uint64) db.Query); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Offset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Offset'
type Query_Offset_Call struct {
	*mock.Call
}

// Offset is a helper method to define mock.On call
//   - offset uint64
func (_e *Query_Expecter) Offset(offset interface{}) *Query_Offset_Call {
	return &Query_Offset_Call{Call: _e.mock.On("Offset", offset)}
}

func (_c *Query_Offset_Call) Run(run func(offset uint64)) *Query_Offset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Query_Offset_Call) Return(_a0 db.Query) *Query_Offset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Offset_Call) RunAndReturn(run func(uint64) db.Query) *Query_Offset_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhere provides a mock function with given fields: query, args
func (_m *Query) OrWhere(query interface{}, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrWhere")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhere_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhere'
type Query_OrWhere_Call struct {
	*mock.Call
}

// OrWhere is a helper method to define mock.On call
//   - query interface{}
//   - args ...interface{}
func (_e *Query_Expecter) OrWhere(query interface{}, args ...interface{}) *Query_OrWhere_Call {
	return &Query_OrWhere_Call{Call: _e.mock.On("OrWhere",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_OrWhere_Call) Run(run func(query interface{}, args ...interface{})) *Query_OrWhere_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_OrWhere_Call) Return(_a0 db.Query) *Query_OrWhere_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhere_Call) RunAndReturn(run func(interface{}, ...interface{}) db.Query) *Query_OrWhere_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereBetween provides a mock function with given fields: column, x, y
func (_m *Query) OrWhereBetween(column string, x interface{}, y interface{}) db.Query {
	ret := _m.Called(column, x, y)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereBetween")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) db.Query); ok {
		r0 = rf(column, x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereBetween'
type Query_OrWhereBetween_Call struct {
	*mock.Call
}

// OrWhereBetween is a helper method to define mock.On call
//   - column string
//   - x interface{}
//   - y interface{}
func (_e *Query_Expecter) OrWhereBetween(column interface{}, x interface{}, y interface{}) *Query_OrWhereBetween_Call {
	return &Query_OrWhereBetween_Call{Call: _e.mock.On("OrWhereBetween", column, x, y)}
}

func (_c *Query_OrWhereBetween_Call) Run(run func(column string, x interface{}, y interface{})) *Query_OrWhereBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *Query_OrWhereBetween_Call) Return(_a0 db.Query) *Query_OrWhereBetween_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereBetween_Call) RunAndReturn(run func(string, interface{}, interface{}) db.Query) *Query_OrWhereBetween_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereColumn provides a mock function with given fields: column1, column2
func (_m *Query) OrWhereColumn(column1 string, column2 ...string) db.Query {
	_va := make([]interface{}, len(column2))
	for _i := range column2 {
		_va[_i] = column2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, column1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereColumn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...string) db.Query); ok {
		r0 = rf(column1, column2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereColumn'
type Query_OrWhereColumn_Call struct {
	*mock.Call
}

// OrWhereColumn is a helper method to define mock.On call
//   - column1 string
//   - column2 ...string
func (_e *Query_Expecter) OrWhereColumn(column1 interface{}, column2 ...interface{}) *Query_OrWhereColumn_Call {
	return &Query_OrWhereColumn_Call{Call: _e.mock.On("OrWhereColumn",
		append([]interface{}{column1}, column2...)...)}
}

func (_c *Query_OrWhereColumn_Call) Run(run func(column1 string, column2 ...string)) *Query_OrWhereColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_OrWhereColumn_Call) Return(_a0 db.Query) *Query_OrWhereColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereColumn_Call) RunAndReturn(run func(string, ...string) db.Query) *Query_OrWhereColumn_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereIn provides a mock function with given fields: column, args
func (_m *Query) OrWhereIn(column string, args []interface{}) db.Query {
	ret := _m.Called(column, args)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereIn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(column, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereIn'
type Query_OrWhereIn_Call struct {
	*mock.Call
}

// OrWhereIn is a helper method to define mock.On call
//   - column string
//   - args []interface{}
func (_e *Query_Expecter) OrWhereIn(column interface{}, args interface{}) *Query_OrWhereIn_Call {
	return &Query_OrWhereIn_Call{Call: _e.mock.On("OrWhereIn", column, args)}
}

func (_c *Query_OrWhereIn_Call) Run(run func(column string, args []interface{})) *Query_OrWhereIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_OrWhereIn_Call) Return(_a0 db.Query) *Query_OrWhereIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereIn_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_OrWhereIn_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereLike provides a mock function with given fields: column, value
func (_m *Query) OrWhereLike(column string, value string) db.Query {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereLike")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, string) db.Query); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereLike'
type Query_OrWhereLike_Call struct {
	*mock.Call
}

// OrWhereLike is a helper method to define mock.On call
//   - column string
//   - value string
func (_e *Query_Expecter) OrWhereLike(column interface{}, value interface{}) *Query_OrWhereLike_Call {
	return &Query_OrWhereLike_Call{Call: _e.mock.On("OrWhereLike", column, value)}
}

func (_c *Query_OrWhereLike_Call) Run(run func(column string, value string)) *Query_OrWhereLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Query_OrWhereLike_Call) Return(_a0 db.Query) *Query_OrWhereLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereLike_Call) RunAndReturn(run func(string, string) db.Query) *Query_OrWhereLike_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNot provides a mock function with given fields: query, args
func (_m *Query) OrWhereNot(query interface{}, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNot")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNot'
type Query_OrWhereNot_Call struct {
	*mock.Call
}

// OrWhereNot is a helper method to define mock.On call
//   - query interface{}
//   - args ...interface{}
func (_e *Query_Expecter) OrWhereNot(query interface{}, args ...interface{}) *Query_OrWhereNot_Call {
	return &Query_OrWhereNot_Call{Call: _e.mock.On("OrWhereNot",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_OrWhereNot_Call) Run(run func(query interface{}, args ...interface{})) *Query_OrWhereNot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_OrWhereNot_Call) Return(_a0 db.Query) *Query_OrWhereNot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNot_Call) RunAndReturn(run func(interface{}, ...interface{}) db.Query) *Query_OrWhereNot_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNotBetween provides a mock function with given fields: column, x, y
func (_m *Query) OrWhereNotBetween(column string, x interface{}, y interface{}) db.Query {
	ret := _m.Called(column, x, y)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNotBetween")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) db.Query); ok {
		r0 = rf(column, x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNotBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNotBetween'
type Query_OrWhereNotBetween_Call struct {
	*mock.Call
}

// OrWhereNotBetween is a helper method to define mock.On call
//   - column string
//   - x interface{}
//   - y interface{}
func (_e *Query_Expecter) OrWhereNotBetween(column interface{}, x interface{}, y interface{}) *Query_OrWhereNotBetween_Call {
	return &Query_OrWhereNotBetween_Call{Call: _e.mock.On("OrWhereNotBetween", column, x, y)}
}

func (_c *Query_OrWhereNotBetween_Call) Run(run func(column string, x interface{}, y interface{})) *Query_OrWhereNotBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *Query_OrWhereNotBetween_Call) Return(_a0 db.Query) *Query_OrWhereNotBetween_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNotBetween_Call) RunAndReturn(run func(string, interface{}, interface{}) db.Query) *Query_OrWhereNotBetween_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNotIn provides a mock function with given fields: column, args
func (_m *Query) OrWhereNotIn(column string, args []interface{}) db.Query {
	ret := _m.Called(column, args)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNotIn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(column, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNotIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNotIn'
type Query_OrWhereNotIn_Call struct {
	*mock.Call
}

// OrWhereNotIn is a helper method to define mock.On call
//   - column string
//   - args []interface{}
func (_e *Query_Expecter) OrWhereNotIn(column interface{}, args interface{}) *Query_OrWhereNotIn_Call {
	return &Query_OrWhereNotIn_Call{Call: _e.mock.On("OrWhereNotIn", column, args)}
}

func (_c *Query_OrWhereNotIn_Call) Run(run func(column string, args []interface{})) *Query_OrWhereNotIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_OrWhereNotIn_Call) Return(_a0 db.Query) *Query_OrWhereNotIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNotIn_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_OrWhereNotIn_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNotLike provides a mock function with given fields: column, value
func (_m *Query) OrWhereNotLike(column string, value string) db.Query {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNotLike")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, string) db.Query); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNotLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNotLike'
type Query_OrWhereNotLike_Call struct {
	*mock.Call
}

// OrWhereNotLike is a helper method to define mock.On call
//   - column string
//   - value string
func (_e *Query_Expecter) OrWhereNotLike(column interface{}, value interface{}) *Query_OrWhereNotLike_Call {
	return &Query_OrWhereNotLike_Call{Call: _e.mock.On("OrWhereNotLike", column, value)}
}

func (_c *Query_OrWhereNotLike_Call) Run(run func(column string, value string)) *Query_OrWhereNotLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Query_OrWhereNotLike_Call) Return(_a0 db.Query) *Query_OrWhereNotLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNotLike_Call) RunAndReturn(run func(string, string) db.Query) *Query_OrWhereNotLike_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNotNull provides a mock function with given fields: column
func (_m *Query) OrWhereNotNull(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNotNull")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNotNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNotNull'
type Query_OrWhereNotNull_Call struct {
	*mock.Call
}

// OrWhereNotNull is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) OrWhereNotNull(column interface{}) *Query_OrWhereNotNull_Call {
	return &Query_OrWhereNotNull_Call{Call: _e.mock.On("OrWhereNotNull", column)}
}

func (_c *Query_OrWhereNotNull_Call) Run(run func(column string)) *Query_OrWhereNotNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_OrWhereNotNull_Call) Return(_a0 db.Query) *Query_OrWhereNotNull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNotNull_Call) RunAndReturn(run func(string) db.Query) *Query_OrWhereNotNull_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereNull provides a mock function with given fields: column
func (_m *Query) OrWhereNull(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereNull")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereNull'
type Query_OrWhereNull_Call struct {
	*mock.Call
}

// OrWhereNull is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) OrWhereNull(column interface{}) *Query_OrWhereNull_Call {
	return &Query_OrWhereNull_Call{Call: _e.mock.On("OrWhereNull", column)}
}

func (_c *Query_OrWhereNull_Call) Run(run func(column string)) *Query_OrWhereNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_OrWhereNull_Call) Return(_a0 db.Query) *Query_OrWhereNull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereNull_Call) RunAndReturn(run func(string) db.Query) *Query_OrWhereNull_Call {
	_c.Call.Return(run)
	return _c
}

// OrWhereRaw provides a mock function with given fields: raw, args
func (_m *Query) OrWhereRaw(raw string, args []interface{}) db.Query {
	ret := _m.Called(raw, args)

	if len(ret) == 0 {
		panic("no return value specified for OrWhereRaw")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(raw, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrWhereRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrWhereRaw'
type Query_OrWhereRaw_Call struct {
	*mock.Call
}

// OrWhereRaw is a helper method to define mock.On call
//   - raw string
//   - args []interface{}
func (_e *Query_Expecter) OrWhereRaw(raw interface{}, args interface{}) *Query_OrWhereRaw_Call {
	return &Query_OrWhereRaw_Call{Call: _e.mock.On("OrWhereRaw", raw, args)}
}

func (_c *Query_OrWhereRaw_Call) Run(run func(raw string, args []interface{})) *Query_OrWhereRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_OrWhereRaw_Call) Return(_a0 db.Query) *Query_OrWhereRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrWhereRaw_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_OrWhereRaw_Call {
	_c.Call.Return(run)
	return _c
}

// OrderBy provides a mock function with given fields: column
func (_m *Query) OrderBy(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for OrderBy")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrderBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderBy'
type Query_OrderBy_Call struct {
	*mock.Call
}

// OrderBy is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) OrderBy(column interface{}) *Query_OrderBy_Call {
	return &Query_OrderBy_Call{Call: _e.mock.On("OrderBy", column)}
}

func (_c *Query_OrderBy_Call) Run(run func(column string)) *Query_OrderBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_OrderBy_Call) Return(_a0 db.Query) *Query_OrderBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrderBy_Call) RunAndReturn(run func(string) db.Query) *Query_OrderBy_Call {
	_c.Call.Return(run)
	return _c
}

// OrderByDesc provides a mock function with given fields: column
func (_m *Query) OrderByDesc(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for OrderByDesc")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrderByDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderByDesc'
type Query_OrderByDesc_Call struct {
	*mock.Call
}

// OrderByDesc is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) OrderByDesc(column interface{}) *Query_OrderByDesc_Call {
	return &Query_OrderByDesc_Call{Call: _e.mock.On("OrderByDesc", column)}
}

func (_c *Query_OrderByDesc_Call) Run(run func(column string)) *Query_OrderByDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_OrderByDesc_Call) Return(_a0 db.Query) *Query_OrderByDesc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrderByDesc_Call) RunAndReturn(run func(string) db.Query) *Query_OrderByDesc_Call {
	_c.Call.Return(run)
	return _c
}

// OrderByRaw provides a mock function with given fields: raw
func (_m *Query) OrderByRaw(raw string) db.Query {
	ret := _m.Called(raw)

	if len(ret) == 0 {
		panic("no return value specified for OrderByRaw")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_OrderByRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderByRaw'
type Query_OrderByRaw_Call struct {
	*mock.Call
}

// OrderByRaw is a helper method to define mock.On call
//   - raw string
func (_e *Query_Expecter) OrderByRaw(raw interface{}) *Query_OrderByRaw_Call {
	return &Query_OrderByRaw_Call{Call: _e.mock.On("OrderByRaw", raw)}
}

func (_c *Query_OrderByRaw_Call) Run(run func(raw string)) *Query_OrderByRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_OrderByRaw_Call) Return(_a0 db.Query) *Query_OrderByRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_OrderByRaw_Call) RunAndReturn(run func(string) db.Query) *Query_OrderByRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Pluck provides a mock function with given fields: column, dest
func (_m *Query) Pluck(column string, dest interface{}) error {
	ret := _m.Called(column, dest)

	if len(ret) == 0 {
		panic("no return value specified for Pluck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(column, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Pluck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pluck'
type Query_Pluck_Call struct {
	*mock.Call
}

// Pluck is a helper method to define mock.On call
//   - column string
//   - dest interface{}
func (_e *Query_Expecter) Pluck(column interface{}, dest interface{}) *Query_Pluck_Call {
	return &Query_Pluck_Call{Call: _e.mock.On("Pluck", column, dest)}
}

func (_c *Query_Pluck_Call) Run(run func(column string, dest interface{})) *Query_Pluck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Query_Pluck_Call) Return(_a0 error) *Query_Pluck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Pluck_Call) RunAndReturn(run func(string, interface{}) error) *Query_Pluck_Call {
	_c.Call.Return(run)
	return _c
}

// RightJoin provides a mock function with given fields: query, args
func (_m *Query) RightJoin(query string, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RightJoin")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_RightJoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RightJoin'
type Query_RightJoin_Call struct {
	*mock.Call
}

// RightJoin is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *Query_Expecter) RightJoin(query interface{}, args ...interface{}) *Query_RightJoin_Call {
	return &Query_RightJoin_Call{Call: _e.mock.On("RightJoin",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_RightJoin_Call) Run(run func(query string, args ...interface{})) *Query_RightJoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_RightJoin_Call) Return(_a0 db.Query) *Query_RightJoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_RightJoin_Call) RunAndReturn(run func(string, ...interface{}) db.Query) *Query_RightJoin_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: columns
func (_m *Query) Select(columns ...string) db.Query {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(...string) db.Query); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type Query_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - columns ...string
func (_e *Query_Expecter) Select(columns ...interface{}) *Query_Select_Call {
	return &Query_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{}, columns...)...)}
}

func (_c *Query_Select_Call) Run(run func(columns ...string)) *Query_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Query_Select_Call) Return(_a0 db.Query) *Query_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Select_Call) RunAndReturn(run func(...string) db.Query) *Query_Select_Call {
	_c.Call.Return(run)
	return _c
}

// SharedLock provides a mock function with no fields
func (_m *Query) SharedLock() db.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SharedLock")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func() db.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_SharedLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharedLock'
type Query_SharedLock_Call struct {
	*mock.Call
}

// SharedLock is a helper method to define mock.On call
func (_e *Query_Expecter) SharedLock() *Query_SharedLock_Call {
	return &Query_SharedLock_Call{Call: _e.mock.On("SharedLock")}
}

func (_c *Query_SharedLock_Call) Run(run func()) *Query_SharedLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_SharedLock_Call) Return(_a0 db.Query) *Query_SharedLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_SharedLock_Call) RunAndReturn(run func() db.Query) *Query_SharedLock_Call {
	_c.Call.Return(run)
	return _c
}

// ToRawSql provides a mock function with no fields
func (_m *Query) ToRawSql() db.ToSql {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToRawSql")
	}

	var r0 db.ToSql
	if rf, ok := ret.Get(0).(func() db.ToSql); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.ToSql)
		}
	}

	return r0
}

// Query_ToRawSql_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRawSql'
type Query_ToRawSql_Call struct {
	*mock.Call
}

// ToRawSql is a helper method to define mock.On call
func (_e *Query_Expecter) ToRawSql() *Query_ToRawSql_Call {
	return &Query_ToRawSql_Call{Call: _e.mock.On("ToRawSql")}
}

func (_c *Query_ToRawSql_Call) Run(run func()) *Query_ToRawSql_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_ToRawSql_Call) Return(_a0 db.ToSql) *Query_ToRawSql_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_ToRawSql_Call) RunAndReturn(run func() db.ToSql) *Query_ToRawSql_Call {
	_c.Call.Return(run)
	return _c
}

// ToSql provides a mock function with no fields
func (_m *Query) ToSql() db.ToSql {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToSql")
	}

	var r0 db.ToSql
	if rf, ok := ret.Get(0).(func() db.ToSql); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.ToSql)
		}
	}

	return r0
}

// Query_ToSql_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToSql'
type Query_ToSql_Call struct {
	*mock.Call
}

// ToSql is a helper method to define mock.On call
func (_e *Query_Expecter) ToSql() *Query_ToSql_Call {
	return &Query_ToSql_Call{Call: _e.mock.On("ToSql")}
}

func (_c *Query_ToSql_Call) Run(run func()) *Query_ToSql_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Query_ToSql_Call) Return(_a0 db.ToSql) *Query_ToSql_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_ToSql_Call) RunAndReturn(run func() db.ToSql) *Query_ToSql_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: column, value
func (_m *Query) Update(column interface{}, value ...interface{}) (*db.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, column)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *db.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) (*db.Result, error)); ok {
		return rf(column, value...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *db.Result); ok {
		r0 = rf(column, value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(column, value...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Query_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - column interface{}
//   - value ...interface{}
func (_e *Query_Expecter) Update(column interface{}, value ...interface{}) *Query_Update_Call {
	return &Query_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{column}, value...)...)}
}

func (_c *Query_Update_Call) Run(run func(column interface{}, value ...interface{})) *Query_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_Update_Call) Return(_a0 *db.Result, _a1 error) *Query_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Query_Update_Call) RunAndReturn(run func(interface{}, ...interface{}) (*db.Result, error)) *Query_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields: column, dest
func (_m *Query) Value(column string, dest interface{}) error {
	ret := _m.Called(column, dest)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(column, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Query_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - column string
//   - dest interface{}
func (_e *Query_Expecter) Value(column interface{}, dest interface{}) *Query_Value_Call {
	return &Query_Value_Call{Call: _e.mock.On("Value", column, dest)}
}

func (_c *Query_Value_Call) Run(run func(column string, dest interface{})) *Query_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Query_Value_Call) Return(_a0 error) *Query_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Value_Call) RunAndReturn(run func(string, interface{}) error) *Query_Value_Call {
	_c.Call.Return(run)
	return _c
}

// When provides a mock function with given fields: condition, callback
func (_m *Query) When(condition bool, callback func(db.Query) db.Query) db.Query {
	ret := _m.Called(condition, callback)

	if len(ret) == 0 {
		panic("no return value specified for When")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(bool, func(db.Query) db.Query) db.Query); ok {
		r0 = rf(condition, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_When_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'When'
type Query_When_Call struct {
	*mock.Call
}

// When is a helper method to define mock.On call
//   - condition bool
//   - callback func(db.Query) db.Query
func (_e *Query_Expecter) When(condition interface{}, callback interface{}) *Query_When_Call {
	return &Query_When_Call{Call: _e.mock.On("When", condition, callback)}
}

func (_c *Query_When_Call) Run(run func(condition bool, callback func(db.Query) db.Query)) *Query_When_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(func(db.Query) db.Query))
	})
	return _c
}

func (_c *Query_When_Call) Return(_a0 db.Query) *Query_When_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_When_Call) RunAndReturn(run func(bool, func(db.Query) db.Query) db.Query) *Query_When_Call {
	_c.Call.Return(run)
	return _c
}

// Where provides a mock function with given fields: query, args
func (_m *Query) Where(query interface{}, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_Where_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Where'
type Query_Where_Call struct {
	*mock.Call
}

// Where is a helper method to define mock.On call
//   - query interface{}
//   - args ...interface{}
func (_e *Query_Expecter) Where(query interface{}, args ...interface{}) *Query_Where_Call {
	return &Query_Where_Call{Call: _e.mock.On("Where",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_Where_Call) Run(run func(query interface{}, args ...interface{})) *Query_Where_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_Where_Call) Return(_a0 db.Query) *Query_Where_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_Where_Call) RunAndReturn(run func(interface{}, ...interface{}) db.Query) *Query_Where_Call {
	_c.Call.Return(run)
	return _c
}

// WhereBetween provides a mock function with given fields: column, x, y
func (_m *Query) WhereBetween(column string, x interface{}, y interface{}) db.Query {
	ret := _m.Called(column, x, y)

	if len(ret) == 0 {
		panic("no return value specified for WhereBetween")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) db.Query); ok {
		r0 = rf(column, x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereBetween'
type Query_WhereBetween_Call struct {
	*mock.Call
}

// WhereBetween is a helper method to define mock.On call
//   - column string
//   - x interface{}
//   - y interface{}
func (_e *Query_Expecter) WhereBetween(column interface{}, x interface{}, y interface{}) *Query_WhereBetween_Call {
	return &Query_WhereBetween_Call{Call: _e.mock.On("WhereBetween", column, x, y)}
}

func (_c *Query_WhereBetween_Call) Run(run func(column string, x interface{}, y interface{})) *Query_WhereBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *Query_WhereBetween_Call) Return(_a0 db.Query) *Query_WhereBetween_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereBetween_Call) RunAndReturn(run func(string, interface{}, interface{}) db.Query) *Query_WhereBetween_Call {
	_c.Call.Return(run)
	return _c
}

// WhereColumn provides a mock function with given fields: column1, column2
func (_m *Query) WhereColumn(column1 string, column2 ...string) db.Query {
	_va := make([]interface{}, len(column2))
	for _i := range column2 {
		_va[_i] = column2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, column1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WhereColumn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, ...string) db.Query); ok {
		r0 = rf(column1, column2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereColumn'
type Query_WhereColumn_Call struct {
	*mock.Call
}

// WhereColumn is a helper method to define mock.On call
//   - column1 string
//   - column2 ...string
func (_e *Query_Expecter) WhereColumn(column1 interface{}, column2 ...interface{}) *Query_WhereColumn_Call {
	return &Query_WhereColumn_Call{Call: _e.mock.On("WhereColumn",
		append([]interface{}{column1}, column2...)...)}
}

func (_c *Query_WhereColumn_Call) Run(run func(column1 string, column2 ...string)) *Query_WhereColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Query_WhereColumn_Call) Return(_a0 db.Query) *Query_WhereColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereColumn_Call) RunAndReturn(run func(string, ...string) db.Query) *Query_WhereColumn_Call {
	_c.Call.Return(run)
	return _c
}

// WhereExists provides a mock function with given fields: _a0
func (_m *Query) WhereExists(_a0 func() db.Query) db.Query {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WhereExists")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(func() db.Query) db.Query); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereExists'
type Query_WhereExists_Call struct {
	*mock.Call
}

// WhereExists is a helper method to define mock.On call
//   - _a0 func() db.Query
func (_e *Query_Expecter) WhereExists(_a0 interface{}) *Query_WhereExists_Call {
	return &Query_WhereExists_Call{Call: _e.mock.On("WhereExists", _a0)}
}

func (_c *Query_WhereExists_Call) Run(run func(_a0 func() db.Query)) *Query_WhereExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() db.Query))
	})
	return _c
}

func (_c *Query_WhereExists_Call) Return(_a0 db.Query) *Query_WhereExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereExists_Call) RunAndReturn(run func(func() db.Query) db.Query) *Query_WhereExists_Call {
	_c.Call.Return(run)
	return _c
}

// WhereIn provides a mock function with given fields: column, args
func (_m *Query) WhereIn(column string, args []interface{}) db.Query {
	ret := _m.Called(column, args)

	if len(ret) == 0 {
		panic("no return value specified for WhereIn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(column, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereIn'
type Query_WhereIn_Call struct {
	*mock.Call
}

// WhereIn is a helper method to define mock.On call
//   - column string
//   - args []interface{}
func (_e *Query_Expecter) WhereIn(column interface{}, args interface{}) *Query_WhereIn_Call {
	return &Query_WhereIn_Call{Call: _e.mock.On("WhereIn", column, args)}
}

func (_c *Query_WhereIn_Call) Run(run func(column string, args []interface{})) *Query_WhereIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_WhereIn_Call) Return(_a0 db.Query) *Query_WhereIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereIn_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_WhereIn_Call {
	_c.Call.Return(run)
	return _c
}

// WhereLike provides a mock function with given fields: column, value
func (_m *Query) WhereLike(column string, value string) db.Query {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereLike")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, string) db.Query); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereLike'
type Query_WhereLike_Call struct {
	*mock.Call
}

// WhereLike is a helper method to define mock.On call
//   - column string
//   - value string
func (_e *Query_Expecter) WhereLike(column interface{}, value interface{}) *Query_WhereLike_Call {
	return &Query_WhereLike_Call{Call: _e.mock.On("WhereLike", column, value)}
}

func (_c *Query_WhereLike_Call) Run(run func(column string, value string)) *Query_WhereLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Query_WhereLike_Call) Return(_a0 db.Query) *Query_WhereLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereLike_Call) RunAndReturn(run func(string, string) db.Query) *Query_WhereLike_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNot provides a mock function with given fields: query, args
func (_m *Query) WhereNot(query interface{}, args ...interface{}) db.Query {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WhereNot")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) db.Query); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNot'
type Query_WhereNot_Call struct {
	*mock.Call
}

// WhereNot is a helper method to define mock.On call
//   - query interface{}
//   - args ...interface{}
func (_e *Query_Expecter) WhereNot(query interface{}, args ...interface{}) *Query_WhereNot_Call {
	return &Query_WhereNot_Call{Call: _e.mock.On("WhereNot",
		append([]interface{}{query}, args...)...)}
}

func (_c *Query_WhereNot_Call) Run(run func(query interface{}, args ...interface{})) *Query_WhereNot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Query_WhereNot_Call) Return(_a0 db.Query) *Query_WhereNot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNot_Call) RunAndReturn(run func(interface{}, ...interface{}) db.Query) *Query_WhereNot_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotBetween provides a mock function with given fields: column, x, y
func (_m *Query) WhereNotBetween(column string, x interface{}, y interface{}) db.Query {
	ret := _m.Called(column, x, y)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotBetween")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) db.Query); ok {
		r0 = rf(column, x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNotBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotBetween'
type Query_WhereNotBetween_Call struct {
	*mock.Call
}

// WhereNotBetween is a helper method to define mock.On call
//   - column string
//   - x interface{}
//   - y interface{}
func (_e *Query_Expecter) WhereNotBetween(column interface{}, x interface{}, y interface{}) *Query_WhereNotBetween_Call {
	return &Query_WhereNotBetween_Call{Call: _e.mock.On("WhereNotBetween", column, x, y)}
}

func (_c *Query_WhereNotBetween_Call) Run(run func(column string, x interface{}, y interface{})) *Query_WhereNotBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *Query_WhereNotBetween_Call) Return(_a0 db.Query) *Query_WhereNotBetween_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNotBetween_Call) RunAndReturn(run func(string, interface{}, interface{}) db.Query) *Query_WhereNotBetween_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotIn provides a mock function with given fields: column, args
func (_m *Query) WhereNotIn(column string, args []interface{}) db.Query {
	ret := _m.Called(column, args)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotIn")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(column, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNotIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotIn'
type Query_WhereNotIn_Call struct {
	*mock.Call
}

// WhereNotIn is a helper method to define mock.On call
//   - column string
//   - args []interface{}
func (_e *Query_Expecter) WhereNotIn(column interface{}, args interface{}) *Query_WhereNotIn_Call {
	return &Query_WhereNotIn_Call{Call: _e.mock.On("WhereNotIn", column, args)}
}

func (_c *Query_WhereNotIn_Call) Run(run func(column string, args []interface{})) *Query_WhereNotIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_WhereNotIn_Call) Return(_a0 db.Query) *Query_WhereNotIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNotIn_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_WhereNotIn_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotLike provides a mock function with given fields: column, value
func (_m *Query) WhereNotLike(column string, value string) db.Query {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotLike")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, string) db.Query); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNotLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotLike'
type Query_WhereNotLike_Call struct {
	*mock.Call
}

// WhereNotLike is a helper method to define mock.On call
//   - column string
//   - value string
func (_e *Query_Expecter) WhereNotLike(column interface{}, value interface{}) *Query_WhereNotLike_Call {
	return &Query_WhereNotLike_Call{Call: _e.mock.On("WhereNotLike", column, value)}
}

func (_c *Query_WhereNotLike_Call) Run(run func(column string, value string)) *Query_WhereNotLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Query_WhereNotLike_Call) Return(_a0 db.Query) *Query_WhereNotLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNotLike_Call) RunAndReturn(run func(string, string) db.Query) *Query_WhereNotLike_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNotNull provides a mock function with given fields: column
func (_m *Query) WhereNotNull(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for WhereNotNull")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNotNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNotNull'
type Query_WhereNotNull_Call struct {
	*mock.Call
}

// WhereNotNull is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) WhereNotNull(column interface{}) *Query_WhereNotNull_Call {
	return &Query_WhereNotNull_Call{Call: _e.mock.On("WhereNotNull", column)}
}

func (_c *Query_WhereNotNull_Call) Run(run func(column string)) *Query_WhereNotNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_WhereNotNull_Call) Return(_a0 db.Query) *Query_WhereNotNull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNotNull_Call) RunAndReturn(run func(string) db.Query) *Query_WhereNotNull_Call {
	_c.Call.Return(run)
	return _c
}

// WhereNull provides a mock function with given fields: column
func (_m *Query) WhereNull(column string) db.Query {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for WhereNull")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string) db.Query); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereNull'
type Query_WhereNull_Call struct {
	*mock.Call
}

// WhereNull is a helper method to define mock.On call
//   - column string
func (_e *Query_Expecter) WhereNull(column interface{}) *Query_WhereNull_Call {
	return &Query_WhereNull_Call{Call: _e.mock.On("WhereNull", column)}
}

func (_c *Query_WhereNull_Call) Run(run func(column string)) *Query_WhereNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Query_WhereNull_Call) Return(_a0 db.Query) *Query_WhereNull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereNull_Call) RunAndReturn(run func(string) db.Query) *Query_WhereNull_Call {
	_c.Call.Return(run)
	return _c
}

// WhereRaw provides a mock function with given fields: raw, args
func (_m *Query) WhereRaw(raw string, args []interface{}) db.Query {
	ret := _m.Called(raw, args)

	if len(ret) == 0 {
		panic("no return value specified for WhereRaw")
	}

	var r0 db.Query
	if rf, ok := ret.Get(0).(func(string, []interface{}) db.Query); ok {
		r0 = rf(raw, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Query)
		}
	}

	return r0
}

// Query_WhereRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhereRaw'
type Query_WhereRaw_Call struct {
	*mock.Call
}

// WhereRaw is a helper method to define mock.On call
//   - raw string
//   - args []interface{}
func (_e *Query_Expecter) WhereRaw(raw interface{}, args interface{}) *Query_WhereRaw_Call {
	return &Query_WhereRaw_Call{Call: _e.mock.On("WhereRaw", raw, args)}
}

func (_c *Query_WhereRaw_Call) Run(run func(raw string, args []interface{})) *Query_WhereRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *Query_WhereRaw_Call) Return(_a0 db.Query) *Query_WhereRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Query_WhereRaw_Call) RunAndReturn(run func(string, []interface{}) db.Query) *Query_WhereRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuery creates a new instance of Query. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *Query {
	mock := &Query{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
