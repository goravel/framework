// Code generated by mockery. DO NOT EDIT.

package schema

import (
	driver "github.com/goravel/framework/contracts/database/driver"
	mock "github.com/stretchr/testify/mock"

	schema "github.com/goravel/framework/contracts/database/schema"
)

// ForeignIDColumnDefinition is an autogenerated mock type for the ForeignIDColumnDefinition type
type ForeignIDColumnDefinition struct {
	mock.Mock
}

type ForeignIDColumnDefinition_Expecter struct {
	mock *mock.Mock
}

func (_m *ForeignIDColumnDefinition) EXPECT() *ForeignIDColumnDefinition_Expecter {
	return &ForeignIDColumnDefinition_Expecter{mock: &_m.Mock}
}

// After provides a mock function with given fields: column
func (_m *ForeignIDColumnDefinition) After(column string) driver.ColumnDefinition {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for After")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(string) driver.ColumnDefinition); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_After_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'After'
type ForeignIDColumnDefinition_After_Call struct {
	*mock.Call
}

// After is a helper method to define mock.On call
//   - column string
func (_e *ForeignIDColumnDefinition_Expecter) After(column interface{}) *ForeignIDColumnDefinition_After_Call {
	return &ForeignIDColumnDefinition_After_Call{Call: _e.mock.On("After", column)}
}

func (_c *ForeignIDColumnDefinition_After_Call) Run(run func(column string)) *ForeignIDColumnDefinition_After_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_After_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_After_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_After_Call) RunAndReturn(run func(string) driver.ColumnDefinition) *ForeignIDColumnDefinition_After_Call {
	_c.Call.Return(run)
	return _c
}

// Always provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) Always() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Always")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Always_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Always'
type ForeignIDColumnDefinition_Always_Call struct {
	*mock.Call
}

// Always is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) Always() *ForeignIDColumnDefinition_Always_Call {
	return &ForeignIDColumnDefinition_Always_Call{Call: _e.mock.On("Always")}
}

func (_c *ForeignIDColumnDefinition_Always_Call) Run(run func()) *ForeignIDColumnDefinition_Always_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Always_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Always_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Always_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_Always_Call {
	_c.Call.Return(run)
	return _c
}

// AutoIncrement provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) AutoIncrement() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoIncrement")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_AutoIncrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoIncrement'
type ForeignIDColumnDefinition_AutoIncrement_Call struct {
	*mock.Call
}

// AutoIncrement is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) AutoIncrement() *ForeignIDColumnDefinition_AutoIncrement_Call {
	return &ForeignIDColumnDefinition_AutoIncrement_Call{Call: _e.mock.On("AutoIncrement")}
}

func (_c *ForeignIDColumnDefinition_AutoIncrement_Call) Run(run func()) *ForeignIDColumnDefinition_AutoIncrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_AutoIncrement_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_AutoIncrement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_AutoIncrement_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_AutoIncrement_Call {
	_c.Call.Return(run)
	return _c
}

// Change provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) Change() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type ForeignIDColumnDefinition_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) Change() *ForeignIDColumnDefinition_Change_Call {
	return &ForeignIDColumnDefinition_Change_Call{Call: _e.mock.On("Change")}
}

func (_c *ForeignIDColumnDefinition_Change_Call) Run(run func()) *ForeignIDColumnDefinition_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Change_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Change_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_Change_Call {
	_c.Call.Return(run)
	return _c
}

// Comment provides a mock function with given fields: comment
func (_m *ForeignIDColumnDefinition) Comment(comment string) driver.ColumnDefinition {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for Comment")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(string) driver.ColumnDefinition); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Comment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Comment'
type ForeignIDColumnDefinition_Comment_Call struct {
	*mock.Call
}

// Comment is a helper method to define mock.On call
//   - comment string
func (_e *ForeignIDColumnDefinition_Expecter) Comment(comment interface{}) *ForeignIDColumnDefinition_Comment_Call {
	return &ForeignIDColumnDefinition_Comment_Call{Call: _e.mock.On("Comment", comment)}
}

func (_c *ForeignIDColumnDefinition_Comment_Call) Run(run func(comment string)) *ForeignIDColumnDefinition_Comment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Comment_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Comment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Comment_Call) RunAndReturn(run func(string) driver.ColumnDefinition) *ForeignIDColumnDefinition_Comment_Call {
	_c.Call.Return(run)
	return _c
}

// Constrained provides a mock function with given fields: table, column, indexName
func (_m *ForeignIDColumnDefinition) Constrained(table string, column string, indexName string) schema.ForeignKeyDefinition {
	ret := _m.Called(table, column, indexName)

	if len(ret) == 0 {
		panic("no return value specified for Constrained")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func(string, string, string) schema.ForeignKeyDefinition); ok {
		r0 = rf(table, column, indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Constrained_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Constrained'
type ForeignIDColumnDefinition_Constrained_Call struct {
	*mock.Call
}

// Constrained is a helper method to define mock.On call
//   - table string
//   - column string
//   - indexName string
func (_e *ForeignIDColumnDefinition_Expecter) Constrained(table interface{}, column interface{}, indexName interface{}) *ForeignIDColumnDefinition_Constrained_Call {
	return &ForeignIDColumnDefinition_Constrained_Call{Call: _e.mock.On("Constrained", table, column, indexName)}
}

func (_c *ForeignIDColumnDefinition_Constrained_Call) Run(run func(table string, column string, indexName string)) *ForeignIDColumnDefinition_Constrained_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Constrained_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignIDColumnDefinition_Constrained_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Constrained_Call) RunAndReturn(run func(string, string, string) schema.ForeignKeyDefinition) *ForeignIDColumnDefinition_Constrained_Call {
	_c.Call.Return(run)
	return _c
}

// Default provides a mock function with given fields: def
func (_m *ForeignIDColumnDefinition) Default(def interface{}) driver.ColumnDefinition {
	ret := _m.Called(def)

	if len(ret) == 0 {
		panic("no return value specified for Default")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(interface{}) driver.ColumnDefinition); ok {
		r0 = rf(def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Default_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Default'
type ForeignIDColumnDefinition_Default_Call struct {
	*mock.Call
}

// Default is a helper method to define mock.On call
//   - def interface{}
func (_e *ForeignIDColumnDefinition_Expecter) Default(def interface{}) *ForeignIDColumnDefinition_Default_Call {
	return &ForeignIDColumnDefinition_Default_Call{Call: _e.mock.On("Default", def)}
}

func (_c *ForeignIDColumnDefinition_Default_Call) Run(run func(def interface{})) *ForeignIDColumnDefinition_Default_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Default_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Default_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Default_Call) RunAndReturn(run func(interface{}) driver.ColumnDefinition) *ForeignIDColumnDefinition_Default_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) First() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type ForeignIDColumnDefinition_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) First() *ForeignIDColumnDefinition_First_Call {
	return &ForeignIDColumnDefinition_First_Call{Call: _e.mock.On("First")}
}

func (_c *ForeignIDColumnDefinition_First_Call) Run(run func()) *ForeignIDColumnDefinition_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_First_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_First_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_First_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_First_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratedAs provides a mock function with given fields: expression
func (_m *ForeignIDColumnDefinition) GeneratedAs(expression ...string) driver.ColumnDefinition {
	_va := make([]interface{}, len(expression))
	for _i := range expression {
		_va[_i] = expression[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GeneratedAs")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(...string) driver.ColumnDefinition); ok {
		r0 = rf(expression...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_GeneratedAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratedAs'
type ForeignIDColumnDefinition_GeneratedAs_Call struct {
	*mock.Call
}

// GeneratedAs is a helper method to define mock.On call
//   - expression ...string
func (_e *ForeignIDColumnDefinition_Expecter) GeneratedAs(expression ...interface{}) *ForeignIDColumnDefinition_GeneratedAs_Call {
	return &ForeignIDColumnDefinition_GeneratedAs_Call{Call: _e.mock.On("GeneratedAs",
		append([]interface{}{}, expression...)...)}
}

func (_c *ForeignIDColumnDefinition_GeneratedAs_Call) Run(run func(expression ...string)) *ForeignIDColumnDefinition_GeneratedAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GeneratedAs_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_GeneratedAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GeneratedAs_Call) RunAndReturn(run func(...string) driver.ColumnDefinition) *ForeignIDColumnDefinition_GeneratedAs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAfter provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetAfter() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAfter")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForeignIDColumnDefinition_GetAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAfter'
type ForeignIDColumnDefinition_GetAfter_Call struct {
	*mock.Call
}

// GetAfter is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetAfter() *ForeignIDColumnDefinition_GetAfter_Call {
	return &ForeignIDColumnDefinition_GetAfter_Call{Call: _e.mock.On("GetAfter")}
}

func (_c *ForeignIDColumnDefinition_GetAfter_Call) Run(run func()) *ForeignIDColumnDefinition_GetAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAfter_Call) Return(_a0 string) *ForeignIDColumnDefinition_GetAfter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAfter_Call) RunAndReturn(run func() string) *ForeignIDColumnDefinition_GetAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllowed provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetAllowed() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllowed")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// ForeignIDColumnDefinition_GetAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllowed'
type ForeignIDColumnDefinition_GetAllowed_Call struct {
	*mock.Call
}

// GetAllowed is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetAllowed() *ForeignIDColumnDefinition_GetAllowed_Call {
	return &ForeignIDColumnDefinition_GetAllowed_Call{Call: _e.mock.On("GetAllowed")}
}

func (_c *ForeignIDColumnDefinition_GetAllowed_Call) Run(run func()) *ForeignIDColumnDefinition_GetAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAllowed_Call) Return(_a0 []interface{}) *ForeignIDColumnDefinition_GetAllowed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAllowed_Call) RunAndReturn(run func() []interface{}) *ForeignIDColumnDefinition_GetAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// GetAutoIncrement provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetAutoIncrement() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAutoIncrement")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_GetAutoIncrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAutoIncrement'
type ForeignIDColumnDefinition_GetAutoIncrement_Call struct {
	*mock.Call
}

// GetAutoIncrement is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetAutoIncrement() *ForeignIDColumnDefinition_GetAutoIncrement_Call {
	return &ForeignIDColumnDefinition_GetAutoIncrement_Call{Call: _e.mock.On("GetAutoIncrement")}
}

func (_c *ForeignIDColumnDefinition_GetAutoIncrement_Call) Run(run func()) *ForeignIDColumnDefinition_GetAutoIncrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAutoIncrement_Call) Return(_a0 bool) *ForeignIDColumnDefinition_GetAutoIncrement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetAutoIncrement_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_GetAutoIncrement_Call {
	_c.Call.Return(run)
	return _c
}

// GetComment provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetComment() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetComment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForeignIDColumnDefinition_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type ForeignIDColumnDefinition_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetComment() *ForeignIDColumnDefinition_GetComment_Call {
	return &ForeignIDColumnDefinition_GetComment_Call{Call: _e.mock.On("GetComment")}
}

func (_c *ForeignIDColumnDefinition_GetComment_Call) Run(run func()) *ForeignIDColumnDefinition_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetComment_Call) Return(comment string) *ForeignIDColumnDefinition_GetComment_Call {
	_c.Call.Return(comment)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetComment_Call) RunAndReturn(run func() string) *ForeignIDColumnDefinition_GetComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefault provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetDefault() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefault")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ForeignIDColumnDefinition_GetDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefault'
type ForeignIDColumnDefinition_GetDefault_Call struct {
	*mock.Call
}

// GetDefault is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetDefault() *ForeignIDColumnDefinition_GetDefault_Call {
	return &ForeignIDColumnDefinition_GetDefault_Call{Call: _e.mock.On("GetDefault")}
}

func (_c *ForeignIDColumnDefinition_GetDefault_Call) Run(run func()) *ForeignIDColumnDefinition_GetDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetDefault_Call) Return(_a0 interface{}) *ForeignIDColumnDefinition_GetDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetDefault_Call) RunAndReturn(run func() interface{}) *ForeignIDColumnDefinition_GetDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeneratedAs provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetGeneratedAs() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGeneratedAs")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForeignIDColumnDefinition_GetGeneratedAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneratedAs'
type ForeignIDColumnDefinition_GetGeneratedAs_Call struct {
	*mock.Call
}

// GetGeneratedAs is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetGeneratedAs() *ForeignIDColumnDefinition_GetGeneratedAs_Call {
	return &ForeignIDColumnDefinition_GetGeneratedAs_Call{Call: _e.mock.On("GetGeneratedAs")}
}

func (_c *ForeignIDColumnDefinition_GetGeneratedAs_Call) Run(run func()) *ForeignIDColumnDefinition_GetGeneratedAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetGeneratedAs_Call) Return(_a0 string) *ForeignIDColumnDefinition_GetGeneratedAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetGeneratedAs_Call) RunAndReturn(run func() string) *ForeignIDColumnDefinition_GetGeneratedAs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLength provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetLength() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLength")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ForeignIDColumnDefinition_GetLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLength'
type ForeignIDColumnDefinition_GetLength_Call struct {
	*mock.Call
}

// GetLength is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetLength() *ForeignIDColumnDefinition_GetLength_Call {
	return &ForeignIDColumnDefinition_GetLength_Call{Call: _e.mock.On("GetLength")}
}

func (_c *ForeignIDColumnDefinition_GetLength_Call) Run(run func()) *ForeignIDColumnDefinition_GetLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetLength_Call) Return(_a0 int) *ForeignIDColumnDefinition_GetLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetLength_Call) RunAndReturn(run func() int) *ForeignIDColumnDefinition_GetLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForeignIDColumnDefinition_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ForeignIDColumnDefinition_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetName() *ForeignIDColumnDefinition_GetName_Call {
	return &ForeignIDColumnDefinition_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ForeignIDColumnDefinition_GetName_Call) Run(run func()) *ForeignIDColumnDefinition_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetName_Call) Return(_a0 string) *ForeignIDColumnDefinition_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetName_Call) RunAndReturn(run func() string) *ForeignIDColumnDefinition_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNullable provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetNullable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNullable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_GetNullable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNullable'
type ForeignIDColumnDefinition_GetNullable_Call struct {
	*mock.Call
}

// GetNullable is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetNullable() *ForeignIDColumnDefinition_GetNullable_Call {
	return &ForeignIDColumnDefinition_GetNullable_Call{Call: _e.mock.On("GetNullable")}
}

func (_c *ForeignIDColumnDefinition_GetNullable_Call) Run(run func()) *ForeignIDColumnDefinition_GetNullable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetNullable_Call) Return(_a0 bool) *ForeignIDColumnDefinition_GetNullable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetNullable_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_GetNullable_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnUpdate provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetOnUpdate() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnUpdate")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ForeignIDColumnDefinition_GetOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnUpdate'
type ForeignIDColumnDefinition_GetOnUpdate_Call struct {
	*mock.Call
}

// GetOnUpdate is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetOnUpdate() *ForeignIDColumnDefinition_GetOnUpdate_Call {
	return &ForeignIDColumnDefinition_GetOnUpdate_Call{Call: _e.mock.On("GetOnUpdate")}
}

func (_c *ForeignIDColumnDefinition_GetOnUpdate_Call) Run(run func()) *ForeignIDColumnDefinition_GetOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetOnUpdate_Call) Return(_a0 interface{}) *ForeignIDColumnDefinition_GetOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetOnUpdate_Call) RunAndReturn(run func() interface{}) *ForeignIDColumnDefinition_GetOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaces provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetPlaces() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlaces")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ForeignIDColumnDefinition_GetPlaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaces'
type ForeignIDColumnDefinition_GetPlaces_Call struct {
	*mock.Call
}

// GetPlaces is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetPlaces() *ForeignIDColumnDefinition_GetPlaces_Call {
	return &ForeignIDColumnDefinition_GetPlaces_Call{Call: _e.mock.On("GetPlaces")}
}

func (_c *ForeignIDColumnDefinition_GetPlaces_Call) Run(run func()) *ForeignIDColumnDefinition_GetPlaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetPlaces_Call) Return(_a0 int) *ForeignIDColumnDefinition_GetPlaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetPlaces_Call) RunAndReturn(run func() int) *ForeignIDColumnDefinition_GetPlaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrecision provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetPrecision() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrecision")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ForeignIDColumnDefinition_GetPrecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrecision'
type ForeignIDColumnDefinition_GetPrecision_Call struct {
	*mock.Call
}

// GetPrecision is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetPrecision() *ForeignIDColumnDefinition_GetPrecision_Call {
	return &ForeignIDColumnDefinition_GetPrecision_Call{Call: _e.mock.On("GetPrecision")}
}

func (_c *ForeignIDColumnDefinition_GetPrecision_Call) Run(run func()) *ForeignIDColumnDefinition_GetPrecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetPrecision_Call) Return(_a0 int) *ForeignIDColumnDefinition_GetPrecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetPrecision_Call) RunAndReturn(run func() int) *ForeignIDColumnDefinition_GetPrecision_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotal provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetTotal() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotal")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ForeignIDColumnDefinition_GetTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotal'
type ForeignIDColumnDefinition_GetTotal_Call struct {
	*mock.Call
}

// GetTotal is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetTotal() *ForeignIDColumnDefinition_GetTotal_Call {
	return &ForeignIDColumnDefinition_GetTotal_Call{Call: _e.mock.On("GetTotal")}
}

func (_c *ForeignIDColumnDefinition_GetTotal_Call) Run(run func()) *ForeignIDColumnDefinition_GetTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetTotal_Call) Return(_a0 int) *ForeignIDColumnDefinition_GetTotal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetTotal_Call) RunAndReturn(run func() int) *ForeignIDColumnDefinition_GetTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForeignIDColumnDefinition_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type ForeignIDColumnDefinition_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetType() *ForeignIDColumnDefinition_GetType_Call {
	return &ForeignIDColumnDefinition_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *ForeignIDColumnDefinition_GetType_Call) Run(run func()) *ForeignIDColumnDefinition_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetType_Call) Return(_a0 string) *ForeignIDColumnDefinition_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetType_Call) RunAndReturn(run func() string) *ForeignIDColumnDefinition_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnsigned provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetUnsigned() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnsigned")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_GetUnsigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnsigned'
type ForeignIDColumnDefinition_GetUnsigned_Call struct {
	*mock.Call
}

// GetUnsigned is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetUnsigned() *ForeignIDColumnDefinition_GetUnsigned_Call {
	return &ForeignIDColumnDefinition_GetUnsigned_Call{Call: _e.mock.On("GetUnsigned")}
}

func (_c *ForeignIDColumnDefinition_GetUnsigned_Call) Run(run func()) *ForeignIDColumnDefinition_GetUnsigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUnsigned_Call) Return(_a0 bool) *ForeignIDColumnDefinition_GetUnsigned_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUnsigned_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_GetUnsigned_Call {
	_c.Call.Return(run)
	return _c
}

// GetUseCurrent provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetUseCurrent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseCurrent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_GetUseCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUseCurrent'
type ForeignIDColumnDefinition_GetUseCurrent_Call struct {
	*mock.Call
}

// GetUseCurrent is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetUseCurrent() *ForeignIDColumnDefinition_GetUseCurrent_Call {
	return &ForeignIDColumnDefinition_GetUseCurrent_Call{Call: _e.mock.On("GetUseCurrent")}
}

func (_c *ForeignIDColumnDefinition_GetUseCurrent_Call) Run(run func()) *ForeignIDColumnDefinition_GetUseCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUseCurrent_Call) Return(_a0 bool) *ForeignIDColumnDefinition_GetUseCurrent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUseCurrent_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_GetUseCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// GetUseCurrentOnUpdate provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) GetUseCurrentOnUpdate() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseCurrentOnUpdate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUseCurrentOnUpdate'
type ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call struct {
	*mock.Call
}

// GetUseCurrentOnUpdate is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) GetUseCurrentOnUpdate() *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call {
	return &ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call{Call: _e.mock.On("GetUseCurrentOnUpdate")}
}

func (_c *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call) Run(run func()) *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call) Return(_a0 bool) *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_GetUseCurrentOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// IsAlways provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) IsAlways() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAlways")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_IsAlways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAlways'
type ForeignIDColumnDefinition_IsAlways_Call struct {
	*mock.Call
}

// IsAlways is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) IsAlways() *ForeignIDColumnDefinition_IsAlways_Call {
	return &ForeignIDColumnDefinition_IsAlways_Call{Call: _e.mock.On("IsAlways")}
}

func (_c *ForeignIDColumnDefinition_IsAlways_Call) Run(run func()) *ForeignIDColumnDefinition_IsAlways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_IsAlways_Call) Return(_a0 bool) *ForeignIDColumnDefinition_IsAlways_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_IsAlways_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_IsAlways_Call {
	_c.Call.Return(run)
	return _c
}

// IsChange provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) IsChange() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsChange")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_IsChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChange'
type ForeignIDColumnDefinition_IsChange_Call struct {
	*mock.Call
}

// IsChange is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) IsChange() *ForeignIDColumnDefinition_IsChange_Call {
	return &ForeignIDColumnDefinition_IsChange_Call{Call: _e.mock.On("IsChange")}
}

func (_c *ForeignIDColumnDefinition_IsChange_Call) Run(run func()) *ForeignIDColumnDefinition_IsChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_IsChange_Call) Return(_a0 bool) *ForeignIDColumnDefinition_IsChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_IsChange_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_IsChange_Call {
	_c.Call.Return(run)
	return _c
}

// IsFirst provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) IsFirst() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFirst")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_IsFirst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFirst'
type ForeignIDColumnDefinition_IsFirst_Call struct {
	*mock.Call
}

// IsFirst is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) IsFirst() *ForeignIDColumnDefinition_IsFirst_Call {
	return &ForeignIDColumnDefinition_IsFirst_Call{Call: _e.mock.On("IsFirst")}
}

func (_c *ForeignIDColumnDefinition_IsFirst_Call) Run(run func()) *ForeignIDColumnDefinition_IsFirst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_IsFirst_Call) Return(_a0 bool) *ForeignIDColumnDefinition_IsFirst_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_IsFirst_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_IsFirst_Call {
	_c.Call.Return(run)
	return _c
}

// IsSetComment provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) IsSetComment() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSetComment")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_IsSetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSetComment'
type ForeignIDColumnDefinition_IsSetComment_Call struct {
	*mock.Call
}

// IsSetComment is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) IsSetComment() *ForeignIDColumnDefinition_IsSetComment_Call {
	return &ForeignIDColumnDefinition_IsSetComment_Call{Call: _e.mock.On("IsSetComment")}
}

func (_c *ForeignIDColumnDefinition_IsSetComment_Call) Run(run func()) *ForeignIDColumnDefinition_IsSetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_IsSetComment_Call) Return(_a0 bool) *ForeignIDColumnDefinition_IsSetComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_IsSetComment_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_IsSetComment_Call {
	_c.Call.Return(run)
	return _c
}

// IsSetGeneratedAs provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) IsSetGeneratedAs() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSetGeneratedAs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForeignIDColumnDefinition_IsSetGeneratedAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSetGeneratedAs'
type ForeignIDColumnDefinition_IsSetGeneratedAs_Call struct {
	*mock.Call
}

// IsSetGeneratedAs is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) IsSetGeneratedAs() *ForeignIDColumnDefinition_IsSetGeneratedAs_Call {
	return &ForeignIDColumnDefinition_IsSetGeneratedAs_Call{Call: _e.mock.On("IsSetGeneratedAs")}
}

func (_c *ForeignIDColumnDefinition_IsSetGeneratedAs_Call) Run(run func()) *ForeignIDColumnDefinition_IsSetGeneratedAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_IsSetGeneratedAs_Call) Return(_a0 bool) *ForeignIDColumnDefinition_IsSetGeneratedAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_IsSetGeneratedAs_Call) RunAndReturn(run func() bool) *ForeignIDColumnDefinition_IsSetGeneratedAs_Call {
	_c.Call.Return(run)
	return _c
}

// Nullable provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) Nullable() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nullable")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Nullable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nullable'
type ForeignIDColumnDefinition_Nullable_Call struct {
	*mock.Call
}

// Nullable is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) Nullable() *ForeignIDColumnDefinition_Nullable_Call {
	return &ForeignIDColumnDefinition_Nullable_Call{Call: _e.mock.On("Nullable")}
}

func (_c *ForeignIDColumnDefinition_Nullable_Call) Run(run func()) *ForeignIDColumnDefinition_Nullable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Nullable_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Nullable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Nullable_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_Nullable_Call {
	_c.Call.Return(run)
	return _c
}

// OnUpdate provides a mock function with given fields: value
func (_m *ForeignIDColumnDefinition) OnUpdate(value interface{}) driver.ColumnDefinition {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for OnUpdate")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(interface{}) driver.ColumnDefinition); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_OnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUpdate'
type ForeignIDColumnDefinition_OnUpdate_Call struct {
	*mock.Call
}

// OnUpdate is a helper method to define mock.On call
//   - value interface{}
func (_e *ForeignIDColumnDefinition_Expecter) OnUpdate(value interface{}) *ForeignIDColumnDefinition_OnUpdate_Call {
	return &ForeignIDColumnDefinition_OnUpdate_Call{Call: _e.mock.On("OnUpdate", value)}
}

func (_c *ForeignIDColumnDefinition_OnUpdate_Call) Run(run func(value interface{})) *ForeignIDColumnDefinition_OnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_OnUpdate_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_OnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_OnUpdate_Call) RunAndReturn(run func(interface{}) driver.ColumnDefinition) *ForeignIDColumnDefinition_OnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Places provides a mock function with given fields: places
func (_m *ForeignIDColumnDefinition) Places(places int) driver.ColumnDefinition {
	ret := _m.Called(places)

	if len(ret) == 0 {
		panic("no return value specified for Places")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(int) driver.ColumnDefinition); ok {
		r0 = rf(places)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Places_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Places'
type ForeignIDColumnDefinition_Places_Call struct {
	*mock.Call
}

// Places is a helper method to define mock.On call
//   - places int
func (_e *ForeignIDColumnDefinition_Expecter) Places(places interface{}) *ForeignIDColumnDefinition_Places_Call {
	return &ForeignIDColumnDefinition_Places_Call{Call: _e.mock.On("Places", places)}
}

func (_c *ForeignIDColumnDefinition_Places_Call) Run(run func(places int)) *ForeignIDColumnDefinition_Places_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Places_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Places_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Places_Call) RunAndReturn(run func(int) driver.ColumnDefinition) *ForeignIDColumnDefinition_Places_Call {
	_c.Call.Return(run)
	return _c
}

// References provides a mock function with given fields: column, indexName
func (_m *ForeignIDColumnDefinition) References(column string, indexName string) schema.ForeignKeyDefinition {
	ret := _m.Called(column, indexName)

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 schema.ForeignKeyDefinition
	if rf, ok := ret.Get(0).(func(string, string) schema.ForeignKeyDefinition); ok {
		r0 = rf(column, indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ForeignKeyDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_References_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'References'
type ForeignIDColumnDefinition_References_Call struct {
	*mock.Call
}

// References is a helper method to define mock.On call
//   - column string
//   - indexName string
func (_e *ForeignIDColumnDefinition_Expecter) References(column interface{}, indexName interface{}) *ForeignIDColumnDefinition_References_Call {
	return &ForeignIDColumnDefinition_References_Call{Call: _e.mock.On("References", column, indexName)}
}

func (_c *ForeignIDColumnDefinition_References_Call) Run(run func(column string, indexName string)) *ForeignIDColumnDefinition_References_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_References_Call) Return(_a0 schema.ForeignKeyDefinition) *ForeignIDColumnDefinition_References_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_References_Call) RunAndReturn(run func(string, string) schema.ForeignKeyDefinition) *ForeignIDColumnDefinition_References_Call {
	_c.Call.Return(run)
	return _c
}

// Total provides a mock function with given fields: total
func (_m *ForeignIDColumnDefinition) Total(total int) driver.ColumnDefinition {
	ret := _m.Called(total)

	if len(ret) == 0 {
		panic("no return value specified for Total")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func(int) driver.ColumnDefinition); ok {
		r0 = rf(total)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Total_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Total'
type ForeignIDColumnDefinition_Total_Call struct {
	*mock.Call
}

// Total is a helper method to define mock.On call
//   - total int
func (_e *ForeignIDColumnDefinition_Expecter) Total(total interface{}) *ForeignIDColumnDefinition_Total_Call {
	return &ForeignIDColumnDefinition_Total_Call{Call: _e.mock.On("Total", total)}
}

func (_c *ForeignIDColumnDefinition_Total_Call) Run(run func(total int)) *ForeignIDColumnDefinition_Total_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Total_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Total_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Total_Call) RunAndReturn(run func(int) driver.ColumnDefinition) *ForeignIDColumnDefinition_Total_Call {
	_c.Call.Return(run)
	return _c
}

// Unsigned provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) Unsigned() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unsigned")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_Unsigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsigned'
type ForeignIDColumnDefinition_Unsigned_Call struct {
	*mock.Call
}

// Unsigned is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) Unsigned() *ForeignIDColumnDefinition_Unsigned_Call {
	return &ForeignIDColumnDefinition_Unsigned_Call{Call: _e.mock.On("Unsigned")}
}

func (_c *ForeignIDColumnDefinition_Unsigned_Call) Run(run func()) *ForeignIDColumnDefinition_Unsigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_Unsigned_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_Unsigned_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_Unsigned_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_Unsigned_Call {
	_c.Call.Return(run)
	return _c
}

// UseCurrent provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) UseCurrent() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCurrent")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_UseCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCurrent'
type ForeignIDColumnDefinition_UseCurrent_Call struct {
	*mock.Call
}

// UseCurrent is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) UseCurrent() *ForeignIDColumnDefinition_UseCurrent_Call {
	return &ForeignIDColumnDefinition_UseCurrent_Call{Call: _e.mock.On("UseCurrent")}
}

func (_c *ForeignIDColumnDefinition_UseCurrent_Call) Run(run func()) *ForeignIDColumnDefinition_UseCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_UseCurrent_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_UseCurrent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_UseCurrent_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_UseCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// UseCurrentOnUpdate provides a mock function with no fields
func (_m *ForeignIDColumnDefinition) UseCurrentOnUpdate() driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCurrentOnUpdate")
	}

	var r0 driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ColumnDefinition)
		}
	}

	return r0
}

// ForeignIDColumnDefinition_UseCurrentOnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCurrentOnUpdate'
type ForeignIDColumnDefinition_UseCurrentOnUpdate_Call struct {
	*mock.Call
}

// UseCurrentOnUpdate is a helper method to define mock.On call
func (_e *ForeignIDColumnDefinition_Expecter) UseCurrentOnUpdate() *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call {
	return &ForeignIDColumnDefinition_UseCurrentOnUpdate_Call{Call: _e.mock.On("UseCurrentOnUpdate")}
}

func (_c *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call) Run(run func()) *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call) Return(_a0 driver.ColumnDefinition) *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call) RunAndReturn(run func() driver.ColumnDefinition) *ForeignIDColumnDefinition_UseCurrentOnUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewForeignIDColumnDefinition creates a new instance of ForeignIDColumnDefinition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewForeignIDColumnDefinition(t interface {
	mock.TestingT
	Cleanup(func())
}) *ForeignIDColumnDefinition {
	mock := &ForeignIDColumnDefinition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
