// Code generated by mockery. DO NOT EDIT.

package driver

import (
	clause "gorm.io/gorm/clause"

	mock "github.com/stretchr/testify/mock"
)

// GormGrammar is an autogenerated mock type for the GormGrammar type
type GormGrammar struct {
	mock.Mock
}

type GormGrammar_Expecter struct {
	mock *mock.Mock
}

func (_m *GormGrammar) EXPECT() *GormGrammar_Expecter {
	return &GormGrammar_Expecter{mock: &_m.Mock}
}

// CompileLockForUpdateForGorm provides a mock function with no fields
func (_m *GormGrammar) CompileLockForUpdateForGorm() clause.Expression {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompileLockForUpdateForGorm")
	}

	var r0 clause.Expression
	if rf, ok := ret.Get(0).(func() clause.Expression); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clause.Expression)
		}
	}

	return r0
}

// GormGrammar_CompileLockForUpdateForGorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileLockForUpdateForGorm'
type GormGrammar_CompileLockForUpdateForGorm_Call struct {
	*mock.Call
}

// CompileLockForUpdateForGorm is a helper method to define mock.On call
func (_e *GormGrammar_Expecter) CompileLockForUpdateForGorm() *GormGrammar_CompileLockForUpdateForGorm_Call {
	return &GormGrammar_CompileLockForUpdateForGorm_Call{Call: _e.mock.On("CompileLockForUpdateForGorm")}
}

func (_c *GormGrammar_CompileLockForUpdateForGorm_Call) Run(run func()) *GormGrammar_CompileLockForUpdateForGorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GormGrammar_CompileLockForUpdateForGorm_Call) Return(_a0 clause.Expression) *GormGrammar_CompileLockForUpdateForGorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormGrammar_CompileLockForUpdateForGorm_Call) RunAndReturn(run func() clause.Expression) *GormGrammar_CompileLockForUpdateForGorm_Call {
	_c.Call.Return(run)
	return _c
}

// CompileRandomOrderForGorm provides a mock function with no fields
func (_m *GormGrammar) CompileRandomOrderForGorm() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompileRandomOrderForGorm")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GormGrammar_CompileRandomOrderForGorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileRandomOrderForGorm'
type GormGrammar_CompileRandomOrderForGorm_Call struct {
	*mock.Call
}

// CompileRandomOrderForGorm is a helper method to define mock.On call
func (_e *GormGrammar_Expecter) CompileRandomOrderForGorm() *GormGrammar_CompileRandomOrderForGorm_Call {
	return &GormGrammar_CompileRandomOrderForGorm_Call{Call: _e.mock.On("CompileRandomOrderForGorm")}
}

func (_c *GormGrammar_CompileRandomOrderForGorm_Call) Run(run func()) *GormGrammar_CompileRandomOrderForGorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GormGrammar_CompileRandomOrderForGorm_Call) Return(_a0 string) *GormGrammar_CompileRandomOrderForGorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormGrammar_CompileRandomOrderForGorm_Call) RunAndReturn(run func() string) *GormGrammar_CompileRandomOrderForGorm_Call {
	_c.Call.Return(run)
	return _c
}

// CompileSharedLockForGorm provides a mock function with no fields
func (_m *GormGrammar) CompileSharedLockForGorm() clause.Expression {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompileSharedLockForGorm")
	}

	var r0 clause.Expression
	if rf, ok := ret.Get(0).(func() clause.Expression); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clause.Expression)
		}
	}

	return r0
}

// GormGrammar_CompileSharedLockForGorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileSharedLockForGorm'
type GormGrammar_CompileSharedLockForGorm_Call struct {
	*mock.Call
}

// CompileSharedLockForGorm is a helper method to define mock.On call
func (_e *GormGrammar_Expecter) CompileSharedLockForGorm() *GormGrammar_CompileSharedLockForGorm_Call {
	return &GormGrammar_CompileSharedLockForGorm_Call{Call: _e.mock.On("CompileSharedLockForGorm")}
}

func (_c *GormGrammar_CompileSharedLockForGorm_Call) Run(run func()) *GormGrammar_CompileSharedLockForGorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GormGrammar_CompileSharedLockForGorm_Call) Return(_a0 clause.Expression) *GormGrammar_CompileSharedLockForGorm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormGrammar_CompileSharedLockForGorm_Call) RunAndReturn(run func() clause.Expression) *GormGrammar_CompileSharedLockForGorm_Call {
	_c.Call.Return(run)
	return _c
}

// NewGormGrammar creates a new instance of GormGrammar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGormGrammar(t interface {
	mock.TestingT
	Cleanup(func())
}) *GormGrammar {
	mock := &GormGrammar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
