// Code generated by mockery. DO NOT EDIT.

package driver

import (
	driver "github.com/goravel/framework/contracts/database/driver"
	mock "github.com/stretchr/testify/mock"
)

// Blueprint is an autogenerated mock type for the Blueprint type
type Blueprint struct {
	mock.Mock
}

type Blueprint_Expecter struct {
	mock *mock.Mock
}

func (_m *Blueprint) EXPECT() *Blueprint_Expecter {
	return &Blueprint_Expecter{mock: &_m.Mock}
}

// GetAddedColumns provides a mock function with no fields
func (_m *Blueprint) GetAddedColumns() []driver.ColumnDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddedColumns")
	}

	var r0 []driver.ColumnDefinition
	if rf, ok := ret.Get(0).(func() []driver.ColumnDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.ColumnDefinition)
		}
	}

	return r0
}

// Blueprint_GetAddedColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddedColumns'
type Blueprint_GetAddedColumns_Call struct {
	*mock.Call
}

// GetAddedColumns is a helper method to define mock.On call
func (_e *Blueprint_Expecter) GetAddedColumns() *Blueprint_GetAddedColumns_Call {
	return &Blueprint_GetAddedColumns_Call{Call: _e.mock.On("GetAddedColumns")}
}

func (_c *Blueprint_GetAddedColumns_Call) Run(run func()) *Blueprint_GetAddedColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Blueprint_GetAddedColumns_Call) Return(_a0 []driver.ColumnDefinition) *Blueprint_GetAddedColumns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Blueprint_GetAddedColumns_Call) RunAndReturn(run func() []driver.ColumnDefinition) *Blueprint_GetAddedColumns_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableName provides a mock function with no fields
func (_m *Blueprint) GetTableName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTableName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Blueprint_GetTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableName'
type Blueprint_GetTableName_Call struct {
	*mock.Call
}

// GetTableName is a helper method to define mock.On call
func (_e *Blueprint_Expecter) GetTableName() *Blueprint_GetTableName_Call {
	return &Blueprint_GetTableName_Call{Call: _e.mock.On("GetTableName")}
}

func (_c *Blueprint_GetTableName_Call) Run(run func()) *Blueprint_GetTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Blueprint_GetTableName_Call) Return(_a0 string) *Blueprint_GetTableName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Blueprint_GetTableName_Call) RunAndReturn(run func() string) *Blueprint_GetTableName_Call {
	_c.Call.Return(run)
	return _c
}

// HasCommand provides a mock function with given fields: command
func (_m *Blueprint) HasCommand(command string) bool {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for HasCommand")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Blueprint_HasCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasCommand'
type Blueprint_HasCommand_Call struct {
	*mock.Call
}

// HasCommand is a helper method to define mock.On call
//   - command string
func (_e *Blueprint_Expecter) HasCommand(command interface{}) *Blueprint_HasCommand_Call {
	return &Blueprint_HasCommand_Call{Call: _e.mock.On("HasCommand", command)}
}

func (_c *Blueprint_HasCommand_Call) Run(run func(command string)) *Blueprint_HasCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Blueprint_HasCommand_Call) Return(_a0 bool) *Blueprint_HasCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Blueprint_HasCommand_Call) RunAndReturn(run func(string) bool) *Blueprint_HasCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlueprint creates a new instance of Blueprint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlueprint(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blueprint {
	mock := &Blueprint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
