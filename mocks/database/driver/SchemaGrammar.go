// Code generated by mockery. DO NOT EDIT.

package driver

import (
	driver "github.com/goravel/framework/contracts/database/driver"
	mock "github.com/stretchr/testify/mock"
)

// SchemaGrammar is an autogenerated mock type for the SchemaGrammar type
type SchemaGrammar struct {
	mock.Mock
}

type SchemaGrammar_Expecter struct {
	mock *mock.Mock
}

func (_m *SchemaGrammar) EXPECT() *SchemaGrammar_Expecter {
	return &SchemaGrammar_Expecter{mock: &_m.Mock}
}

// CompileAdd provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileAdd(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileAdd")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileAdd'
type SchemaGrammar_CompileAdd_Call struct {
	*mock.Call
}

// CompileAdd is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileAdd(blueprint interface{}, command interface{}) *SchemaGrammar_CompileAdd_Call {
	return &SchemaGrammar_CompileAdd_Call{Call: _e.mock.On("CompileAdd", blueprint, command)}
}

func (_c *SchemaGrammar_CompileAdd_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileAdd_Call) Return(_a0 string) *SchemaGrammar_CompileAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileAdd_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CompileChange provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileChange(blueprint driver.Blueprint, command *driver.Command) []string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileChange")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) []string); ok {
		r0 = rf(blueprint, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileChange'
type SchemaGrammar_CompileChange_Call struct {
	*mock.Call
}

// CompileChange is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileChange(blueprint interface{}, command interface{}) *SchemaGrammar_CompileChange_Call {
	return &SchemaGrammar_CompileChange_Call{Call: _e.mock.On("CompileChange", blueprint, command)}
}

func (_c *SchemaGrammar_CompileChange_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileChange_Call) Return(_a0 []string) *SchemaGrammar_CompileChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileChange_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) []string) *SchemaGrammar_CompileChange_Call {
	_c.Call.Return(run)
	return _c
}

// CompileColumns provides a mock function with given fields: schema, table
func (_m *SchemaGrammar) CompileColumns(schema string, table string) (string, error) {
	ret := _m.Called(schema, table)

	if len(ret) == 0 {
		panic("no return value specified for CompileColumns")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchemaGrammar_CompileColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileColumns'
type SchemaGrammar_CompileColumns_Call struct {
	*mock.Call
}

// CompileColumns is a helper method to define mock.On call
//   - schema string
//   - table string
func (_e *SchemaGrammar_Expecter) CompileColumns(schema interface{}, table interface{}) *SchemaGrammar_CompileColumns_Call {
	return &SchemaGrammar_CompileColumns_Call{Call: _e.mock.On("CompileColumns", schema, table)}
}

func (_c *SchemaGrammar_CompileColumns_Call) Run(run func(schema string, table string)) *SchemaGrammar_CompileColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompileColumns_Call) Return(_a0 string, _a1 error) *SchemaGrammar_CompileColumns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchemaGrammar_CompileColumns_Call) RunAndReturn(run func(string, string) (string, error)) *SchemaGrammar_CompileColumns_Call {
	_c.Call.Return(run)
	return _c
}

// CompileComment provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileComment(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileComment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileComment'
type SchemaGrammar_CompileComment_Call struct {
	*mock.Call
}

// CompileComment is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileComment(blueprint interface{}, command interface{}) *SchemaGrammar_CompileComment_Call {
	return &SchemaGrammar_CompileComment_Call{Call: _e.mock.On("CompileComment", blueprint, command)}
}

func (_c *SchemaGrammar_CompileComment_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileComment_Call) Return(_a0 string) *SchemaGrammar_CompileComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileComment_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileComment_Call {
	_c.Call.Return(run)
	return _c
}

// CompileCreate provides a mock function with given fields: blueprint
func (_m *SchemaGrammar) CompileCreate(blueprint driver.Blueprint) string {
	ret := _m.Called(blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompileCreate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint) string); ok {
		r0 = rf(blueprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileCreate'
type SchemaGrammar_CompileCreate_Call struct {
	*mock.Call
}

// CompileCreate is a helper method to define mock.On call
//   - blueprint driver.Blueprint
func (_e *SchemaGrammar_Expecter) CompileCreate(blueprint interface{}) *SchemaGrammar_CompileCreate_Call {
	return &SchemaGrammar_CompileCreate_Call{Call: _e.mock.On("CompileCreate", blueprint)}
}

func (_c *SchemaGrammar_CompileCreate_Call) Run(run func(blueprint driver.Blueprint)) *SchemaGrammar_CompileCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint))
	})
	return _c
}

func (_c *SchemaGrammar_CompileCreate_Call) Return(_a0 string) *SchemaGrammar_CompileCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileCreate_Call) RunAndReturn(run func(driver.Blueprint) string) *SchemaGrammar_CompileCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDefault provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDefault(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDefault")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDefault'
type SchemaGrammar_CompileDefault_Call struct {
	*mock.Call
}

// CompileDefault is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDefault(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDefault_Call {
	return &SchemaGrammar_CompileDefault_Call{Call: _e.mock.On("CompileDefault", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDefault_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDefault_Call) Return(_a0 string) *SchemaGrammar_CompileDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDefault_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDefault_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDrop provides a mock function with given fields: blueprint
func (_m *SchemaGrammar) CompileDrop(blueprint driver.Blueprint) string {
	ret := _m.Called(blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompileDrop")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint) string); ok {
		r0 = rf(blueprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDrop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDrop'
type SchemaGrammar_CompileDrop_Call struct {
	*mock.Call
}

// CompileDrop is a helper method to define mock.On call
//   - blueprint driver.Blueprint
func (_e *SchemaGrammar_Expecter) CompileDrop(blueprint interface{}) *SchemaGrammar_CompileDrop_Call {
	return &SchemaGrammar_CompileDrop_Call{Call: _e.mock.On("CompileDrop", blueprint)}
}

func (_c *SchemaGrammar_CompileDrop_Call) Run(run func(blueprint driver.Blueprint)) *SchemaGrammar_CompileDrop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDrop_Call) Return(_a0 string) *SchemaGrammar_CompileDrop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDrop_Call) RunAndReturn(run func(driver.Blueprint) string) *SchemaGrammar_CompileDrop_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllTables provides a mock function with given fields: schema, tables
func (_m *SchemaGrammar) CompileDropAllTables(schema string, tables []driver.Table) []string {
	ret := _m.Called(schema, tables)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllTables")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, []driver.Table) []string); ok {
		r0 = rf(schema, tables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileDropAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllTables'
type SchemaGrammar_CompileDropAllTables_Call struct {
	*mock.Call
}

// CompileDropAllTables is a helper method to define mock.On call
//   - schema string
//   - tables []driver.Table
func (_e *SchemaGrammar_Expecter) CompileDropAllTables(schema interface{}, tables interface{}) *SchemaGrammar_CompileDropAllTables_Call {
	return &SchemaGrammar_CompileDropAllTables_Call{Call: _e.mock.On("CompileDropAllTables", schema, tables)}
}

func (_c *SchemaGrammar_CompileDropAllTables_Call) Run(run func(schema string, tables []driver.Table)) *SchemaGrammar_CompileDropAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]driver.Table))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropAllTables_Call) Return(_a0 []string) *SchemaGrammar_CompileDropAllTables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropAllTables_Call) RunAndReturn(run func(string, []driver.Table) []string) *SchemaGrammar_CompileDropAllTables_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllTypes provides a mock function with given fields: schema, types
func (_m *SchemaGrammar) CompileDropAllTypes(schema string, types []driver.Type) []string {
	ret := _m.Called(schema, types)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllTypes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, []driver.Type) []string); ok {
		r0 = rf(schema, types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileDropAllTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllTypes'
type SchemaGrammar_CompileDropAllTypes_Call struct {
	*mock.Call
}

// CompileDropAllTypes is a helper method to define mock.On call
//   - schema string
//   - types []driver.Type
func (_e *SchemaGrammar_Expecter) CompileDropAllTypes(schema interface{}, types interface{}) *SchemaGrammar_CompileDropAllTypes_Call {
	return &SchemaGrammar_CompileDropAllTypes_Call{Call: _e.mock.On("CompileDropAllTypes", schema, types)}
}

func (_c *SchemaGrammar_CompileDropAllTypes_Call) Run(run func(schema string, types []driver.Type)) *SchemaGrammar_CompileDropAllTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]driver.Type))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropAllTypes_Call) Return(_a0 []string) *SchemaGrammar_CompileDropAllTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropAllTypes_Call) RunAndReturn(run func(string, []driver.Type) []string) *SchemaGrammar_CompileDropAllTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllViews provides a mock function with given fields: schema, views
func (_m *SchemaGrammar) CompileDropAllViews(schema string, views []driver.View) []string {
	ret := _m.Called(schema, views)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllViews")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, []driver.View) []string); ok {
		r0 = rf(schema, views)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileDropAllViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllViews'
type SchemaGrammar_CompileDropAllViews_Call struct {
	*mock.Call
}

// CompileDropAllViews is a helper method to define mock.On call
//   - schema string
//   - views []driver.View
func (_e *SchemaGrammar_Expecter) CompileDropAllViews(schema interface{}, views interface{}) *SchemaGrammar_CompileDropAllViews_Call {
	return &SchemaGrammar_CompileDropAllViews_Call{Call: _e.mock.On("CompileDropAllViews", schema, views)}
}

func (_c *SchemaGrammar_CompileDropAllViews_Call) Run(run func(schema string, views []driver.View)) *SchemaGrammar_CompileDropAllViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]driver.View))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropAllViews_Call) Return(_a0 []string) *SchemaGrammar_CompileDropAllViews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropAllViews_Call) RunAndReturn(run func(string, []driver.View) []string) *SchemaGrammar_CompileDropAllViews_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropColumn provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropColumn(blueprint driver.Blueprint, command *driver.Command) []string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropColumn")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) []string); ok {
		r0 = rf(blueprint, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileDropColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropColumn'
type SchemaGrammar_CompileDropColumn_Call struct {
	*mock.Call
}

// CompileDropColumn is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropColumn(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropColumn_Call {
	return &SchemaGrammar_CompileDropColumn_Call{Call: _e.mock.On("CompileDropColumn", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropColumn_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropColumn_Call) Return(_a0 []string) *SchemaGrammar_CompileDropColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropColumn_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) []string) *SchemaGrammar_CompileDropColumn_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropForeign provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropForeign(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropForeign")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropForeign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropForeign'
type SchemaGrammar_CompileDropForeign_Call struct {
	*mock.Call
}

// CompileDropForeign is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropForeign(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropForeign_Call {
	return &SchemaGrammar_CompileDropForeign_Call{Call: _e.mock.On("CompileDropForeign", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropForeign_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropForeign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropForeign_Call) Return(_a0 string) *SchemaGrammar_CompileDropForeign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropForeign_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDropForeign_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropFullText provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropFullText(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropFullText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropFullText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropFullText'
type SchemaGrammar_CompileDropFullText_Call struct {
	*mock.Call
}

// CompileDropFullText is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropFullText(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropFullText_Call {
	return &SchemaGrammar_CompileDropFullText_Call{Call: _e.mock.On("CompileDropFullText", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropFullText_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropFullText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropFullText_Call) Return(_a0 string) *SchemaGrammar_CompileDropFullText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropFullText_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDropFullText_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropIfExists provides a mock function with given fields: blueprint
func (_m *SchemaGrammar) CompileDropIfExists(blueprint driver.Blueprint) string {
	ret := _m.Called(blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropIfExists")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint) string); ok {
		r0 = rf(blueprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropIfExists'
type SchemaGrammar_CompileDropIfExists_Call struct {
	*mock.Call
}

// CompileDropIfExists is a helper method to define mock.On call
//   - blueprint driver.Blueprint
func (_e *SchemaGrammar_Expecter) CompileDropIfExists(blueprint interface{}) *SchemaGrammar_CompileDropIfExists_Call {
	return &SchemaGrammar_CompileDropIfExists_Call{Call: _e.mock.On("CompileDropIfExists", blueprint)}
}

func (_c *SchemaGrammar_CompileDropIfExists_Call) Run(run func(blueprint driver.Blueprint)) *SchemaGrammar_CompileDropIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropIfExists_Call) Return(_a0 string) *SchemaGrammar_CompileDropIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropIfExists_Call) RunAndReturn(run func(driver.Blueprint) string) *SchemaGrammar_CompileDropIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropIndex provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropIndex(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropIndex")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropIndex'
type SchemaGrammar_CompileDropIndex_Call struct {
	*mock.Call
}

// CompileDropIndex is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropIndex(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropIndex_Call {
	return &SchemaGrammar_CompileDropIndex_Call{Call: _e.mock.On("CompileDropIndex", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropIndex_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropIndex_Call) Return(_a0 string) *SchemaGrammar_CompileDropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropIndex_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropPrimary provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropPrimary(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropPrimary")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropPrimary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropPrimary'
type SchemaGrammar_CompileDropPrimary_Call struct {
	*mock.Call
}

// CompileDropPrimary is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropPrimary(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropPrimary_Call {
	return &SchemaGrammar_CompileDropPrimary_Call{Call: _e.mock.On("CompileDropPrimary", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropPrimary_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropPrimary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropPrimary_Call) Return(_a0 string) *SchemaGrammar_CompileDropPrimary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropPrimary_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDropPrimary_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropUnique provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileDropUnique(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropUnique")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileDropUnique_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropUnique'
type SchemaGrammar_CompileDropUnique_Call struct {
	*mock.Call
}

// CompileDropUnique is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileDropUnique(blueprint interface{}, command interface{}) *SchemaGrammar_CompileDropUnique_Call {
	return &SchemaGrammar_CompileDropUnique_Call{Call: _e.mock.On("CompileDropUnique", blueprint, command)}
}

func (_c *SchemaGrammar_CompileDropUnique_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileDropUnique_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileDropUnique_Call) Return(_a0 string) *SchemaGrammar_CompileDropUnique_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileDropUnique_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileDropUnique_Call {
	_c.Call.Return(run)
	return _c
}

// CompileForeign provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileForeign(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileForeign")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileForeign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileForeign'
type SchemaGrammar_CompileForeign_Call struct {
	*mock.Call
}

// CompileForeign is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileForeign(blueprint interface{}, command interface{}) *SchemaGrammar_CompileForeign_Call {
	return &SchemaGrammar_CompileForeign_Call{Call: _e.mock.On("CompileForeign", blueprint, command)}
}

func (_c *SchemaGrammar_CompileForeign_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileForeign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileForeign_Call) Return(_a0 string) *SchemaGrammar_CompileForeign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileForeign_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileForeign_Call {
	_c.Call.Return(run)
	return _c
}

// CompileForeignKeys provides a mock function with given fields: schema, table
func (_m *SchemaGrammar) CompileForeignKeys(schema string, table string) string {
	ret := _m.Called(schema, table)

	if len(ret) == 0 {
		panic("no return value specified for CompileForeignKeys")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileForeignKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileForeignKeys'
type SchemaGrammar_CompileForeignKeys_Call struct {
	*mock.Call
}

// CompileForeignKeys is a helper method to define mock.On call
//   - schema string
//   - table string
func (_e *SchemaGrammar_Expecter) CompileForeignKeys(schema interface{}, table interface{}) *SchemaGrammar_CompileForeignKeys_Call {
	return &SchemaGrammar_CompileForeignKeys_Call{Call: _e.mock.On("CompileForeignKeys", schema, table)}
}

func (_c *SchemaGrammar_CompileForeignKeys_Call) Run(run func(schema string, table string)) *SchemaGrammar_CompileForeignKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompileForeignKeys_Call) Return(_a0 string) *SchemaGrammar_CompileForeignKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileForeignKeys_Call) RunAndReturn(run func(string, string) string) *SchemaGrammar_CompileForeignKeys_Call {
	_c.Call.Return(run)
	return _c
}

// CompileFullText provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileFullText(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileFullText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileFullText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileFullText'
type SchemaGrammar_CompileFullText_Call struct {
	*mock.Call
}

// CompileFullText is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileFullText(blueprint interface{}, command interface{}) *SchemaGrammar_CompileFullText_Call {
	return &SchemaGrammar_CompileFullText_Call{Call: _e.mock.On("CompileFullText", blueprint, command)}
}

func (_c *SchemaGrammar_CompileFullText_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileFullText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileFullText_Call) Return(_a0 string) *SchemaGrammar_CompileFullText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileFullText_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileFullText_Call {
	_c.Call.Return(run)
	return _c
}

// CompileIndex provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileIndex(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileIndex")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileIndex'
type SchemaGrammar_CompileIndex_Call struct {
	*mock.Call
}

// CompileIndex is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileIndex(blueprint interface{}, command interface{}) *SchemaGrammar_CompileIndex_Call {
	return &SchemaGrammar_CompileIndex_Call{Call: _e.mock.On("CompileIndex", blueprint, command)}
}

func (_c *SchemaGrammar_CompileIndex_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileIndex_Call) Return(_a0 string) *SchemaGrammar_CompileIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileIndex_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CompileIndexes provides a mock function with given fields: schema, table
func (_m *SchemaGrammar) CompileIndexes(schema string, table string) (string, error) {
	ret := _m.Called(schema, table)

	if len(ret) == 0 {
		panic("no return value specified for CompileIndexes")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchemaGrammar_CompileIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileIndexes'
type SchemaGrammar_CompileIndexes_Call struct {
	*mock.Call
}

// CompileIndexes is a helper method to define mock.On call
//   - schema string
//   - table string
func (_e *SchemaGrammar_Expecter) CompileIndexes(schema interface{}, table interface{}) *SchemaGrammar_CompileIndexes_Call {
	return &SchemaGrammar_CompileIndexes_Call{Call: _e.mock.On("CompileIndexes", schema, table)}
}

func (_c *SchemaGrammar_CompileIndexes_Call) Run(run func(schema string, table string)) *SchemaGrammar_CompileIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompileIndexes_Call) Return(_a0 string, _a1 error) *SchemaGrammar_CompileIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchemaGrammar_CompileIndexes_Call) RunAndReturn(run func(string, string) (string, error)) *SchemaGrammar_CompileIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// CompilePrimary provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompilePrimary(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompilePrimary")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompilePrimary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompilePrimary'
type SchemaGrammar_CompilePrimary_Call struct {
	*mock.Call
}

// CompilePrimary is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompilePrimary(blueprint interface{}, command interface{}) *SchemaGrammar_CompilePrimary_Call {
	return &SchemaGrammar_CompilePrimary_Call{Call: _e.mock.On("CompilePrimary", blueprint, command)}
}

func (_c *SchemaGrammar_CompilePrimary_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompilePrimary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompilePrimary_Call) Return(_a0 string) *SchemaGrammar_CompilePrimary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompilePrimary_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompilePrimary_Call {
	_c.Call.Return(run)
	return _c
}

// CompilePrune provides a mock function with given fields: database
func (_m *SchemaGrammar) CompilePrune(database string) string {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for CompilePrune")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompilePrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompilePrune'
type SchemaGrammar_CompilePrune_Call struct {
	*mock.Call
}

// CompilePrune is a helper method to define mock.On call
//   - database string
func (_e *SchemaGrammar_Expecter) CompilePrune(database interface{}) *SchemaGrammar_CompilePrune_Call {
	return &SchemaGrammar_CompilePrune_Call{Call: _e.mock.On("CompilePrune", database)}
}

func (_c *SchemaGrammar_CompilePrune_Call) Run(run func(database string)) *SchemaGrammar_CompilePrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompilePrune_Call) Return(_a0 string) *SchemaGrammar_CompilePrune_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompilePrune_Call) RunAndReturn(run func(string) string) *SchemaGrammar_CompilePrune_Call {
	_c.Call.Return(run)
	return _c
}

// CompileRename provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileRename(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileRename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileRename'
type SchemaGrammar_CompileRename_Call struct {
	*mock.Call
}

// CompileRename is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileRename(blueprint interface{}, command interface{}) *SchemaGrammar_CompileRename_Call {
	return &SchemaGrammar_CompileRename_Call{Call: _e.mock.On("CompileRename", blueprint, command)}
}

func (_c *SchemaGrammar_CompileRename_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileRename_Call) Return(_a0 string) *SchemaGrammar_CompileRename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileRename_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileRename_Call {
	_c.Call.Return(run)
	return _c
}

// CompileRenameColumn provides a mock function with given fields: blueprint, command, columns
func (_m *SchemaGrammar) CompileRenameColumn(blueprint driver.Blueprint, command *driver.Command, columns []driver.Column) (string, error) {
	ret := _m.Called(blueprint, command, columns)

	if len(ret) == 0 {
		panic("no return value specified for CompileRenameColumn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command, []driver.Column) (string, error)); ok {
		return rf(blueprint, command, columns)
	}
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command, []driver.Column) string); ok {
		r0 = rf(blueprint, command, columns)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(driver.Blueprint, *driver.Command, []driver.Column) error); ok {
		r1 = rf(blueprint, command, columns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchemaGrammar_CompileRenameColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileRenameColumn'
type SchemaGrammar_CompileRenameColumn_Call struct {
	*mock.Call
}

// CompileRenameColumn is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
//   - columns []driver.Column
func (_e *SchemaGrammar_Expecter) CompileRenameColumn(blueprint interface{}, command interface{}, columns interface{}) *SchemaGrammar_CompileRenameColumn_Call {
	return &SchemaGrammar_CompileRenameColumn_Call{Call: _e.mock.On("CompileRenameColumn", blueprint, command, columns)}
}

func (_c *SchemaGrammar_CompileRenameColumn_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command, columns []driver.Column)) *SchemaGrammar_CompileRenameColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command), args[2].([]driver.Column))
	})
	return _c
}

func (_c *SchemaGrammar_CompileRenameColumn_Call) Return(_a0 string, _a1 error) *SchemaGrammar_CompileRenameColumn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchemaGrammar_CompileRenameColumn_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command, []driver.Column) (string, error)) *SchemaGrammar_CompileRenameColumn_Call {
	_c.Call.Return(run)
	return _c
}

// CompileRenameIndex provides a mock function with given fields: blueprint, command, indexes
func (_m *SchemaGrammar) CompileRenameIndex(blueprint driver.Blueprint, command *driver.Command, indexes []driver.Index) []string {
	ret := _m.Called(blueprint, command, indexes)

	if len(ret) == 0 {
		panic("no return value specified for CompileRenameIndex")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command, []driver.Index) []string); ok {
		r0 = rf(blueprint, command, indexes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_CompileRenameIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileRenameIndex'
type SchemaGrammar_CompileRenameIndex_Call struct {
	*mock.Call
}

// CompileRenameIndex is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
//   - indexes []driver.Index
func (_e *SchemaGrammar_Expecter) CompileRenameIndex(blueprint interface{}, command interface{}, indexes interface{}) *SchemaGrammar_CompileRenameIndex_Call {
	return &SchemaGrammar_CompileRenameIndex_Call{Call: _e.mock.On("CompileRenameIndex", blueprint, command, indexes)}
}

func (_c *SchemaGrammar_CompileRenameIndex_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command, indexes []driver.Index)) *SchemaGrammar_CompileRenameIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command), args[2].([]driver.Index))
	})
	return _c
}

func (_c *SchemaGrammar_CompileRenameIndex_Call) Return(_a0 []string) *SchemaGrammar_CompileRenameIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileRenameIndex_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command, []driver.Index) []string) *SchemaGrammar_CompileRenameIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTableComment provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileTableComment(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileTableComment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileTableComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTableComment'
type SchemaGrammar_CompileTableComment_Call struct {
	*mock.Call
}

// CompileTableComment is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileTableComment(blueprint interface{}, command interface{}) *SchemaGrammar_CompileTableComment_Call {
	return &SchemaGrammar_CompileTableComment_Call{Call: _e.mock.On("CompileTableComment", blueprint, command)}
}

func (_c *SchemaGrammar_CompileTableComment_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileTableComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileTableComment_Call) Return(_a0 string) *SchemaGrammar_CompileTableComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileTableComment_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileTableComment_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTables provides a mock function with given fields: database
func (_m *SchemaGrammar) CompileTables(database string) string {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for CompileTables")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTables'
type SchemaGrammar_CompileTables_Call struct {
	*mock.Call
}

// CompileTables is a helper method to define mock.On call
//   - database string
func (_e *SchemaGrammar_Expecter) CompileTables(database interface{}) *SchemaGrammar_CompileTables_Call {
	return &SchemaGrammar_CompileTables_Call{Call: _e.mock.On("CompileTables", database)}
}

func (_c *SchemaGrammar_CompileTables_Call) Run(run func(database string)) *SchemaGrammar_CompileTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompileTables_Call) Return(_a0 string) *SchemaGrammar_CompileTables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileTables_Call) RunAndReturn(run func(string) string) *SchemaGrammar_CompileTables_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTypes provides a mock function with no fields
func (_m *SchemaGrammar) CompileTypes() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompileTypes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTypes'
type SchemaGrammar_CompileTypes_Call struct {
	*mock.Call
}

// CompileTypes is a helper method to define mock.On call
func (_e *SchemaGrammar_Expecter) CompileTypes() *SchemaGrammar_CompileTypes_Call {
	return &SchemaGrammar_CompileTypes_Call{Call: _e.mock.On("CompileTypes")}
}

func (_c *SchemaGrammar_CompileTypes_Call) Run(run func()) *SchemaGrammar_CompileTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchemaGrammar_CompileTypes_Call) Return(_a0 string) *SchemaGrammar_CompileTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileTypes_Call) RunAndReturn(run func() string) *SchemaGrammar_CompileTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CompileUnique provides a mock function with given fields: blueprint, command
func (_m *SchemaGrammar) CompileUnique(blueprint driver.Blueprint, command *driver.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileUnique")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.Blueprint, *driver.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileUnique_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileUnique'
type SchemaGrammar_CompileUnique_Call struct {
	*mock.Call
}

// CompileUnique is a helper method to define mock.On call
//   - blueprint driver.Blueprint
//   - command *driver.Command
func (_e *SchemaGrammar_Expecter) CompileUnique(blueprint interface{}, command interface{}) *SchemaGrammar_CompileUnique_Call {
	return &SchemaGrammar_CompileUnique_Call{Call: _e.mock.On("CompileUnique", blueprint, command)}
}

func (_c *SchemaGrammar_CompileUnique_Call) Run(run func(blueprint driver.Blueprint, command *driver.Command)) *SchemaGrammar_CompileUnique_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.Blueprint), args[1].(*driver.Command))
	})
	return _c
}

func (_c *SchemaGrammar_CompileUnique_Call) Return(_a0 string) *SchemaGrammar_CompileUnique_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileUnique_Call) RunAndReturn(run func(driver.Blueprint, *driver.Command) string) *SchemaGrammar_CompileUnique_Call {
	_c.Call.Return(run)
	return _c
}

// CompileViews provides a mock function with given fields: database
func (_m *SchemaGrammar) CompileViews(database string) string {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for CompileViews")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_CompileViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileViews'
type SchemaGrammar_CompileViews_Call struct {
	*mock.Call
}

// CompileViews is a helper method to define mock.On call
//   - database string
func (_e *SchemaGrammar_Expecter) CompileViews(database interface{}) *SchemaGrammar_CompileViews_Call {
	return &SchemaGrammar_CompileViews_Call{Call: _e.mock.On("CompileViews", database)}
}

func (_c *SchemaGrammar_CompileViews_Call) Run(run func(database string)) *SchemaGrammar_CompileViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SchemaGrammar_CompileViews_Call) Return(_a0 string) *SchemaGrammar_CompileViews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_CompileViews_Call) RunAndReturn(run func(string) string) *SchemaGrammar_CompileViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttributeCommands provides a mock function with no fields
func (_m *SchemaGrammar) GetAttributeCommands() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAttributeCommands")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SchemaGrammar_GetAttributeCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttributeCommands'
type SchemaGrammar_GetAttributeCommands_Call struct {
	*mock.Call
}

// GetAttributeCommands is a helper method to define mock.On call
func (_e *SchemaGrammar_Expecter) GetAttributeCommands() *SchemaGrammar_GetAttributeCommands_Call {
	return &SchemaGrammar_GetAttributeCommands_Call{Call: _e.mock.On("GetAttributeCommands")}
}

func (_c *SchemaGrammar_GetAttributeCommands_Call) Run(run func()) *SchemaGrammar_GetAttributeCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchemaGrammar_GetAttributeCommands_Call) Return(_a0 []string) *SchemaGrammar_GetAttributeCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_GetAttributeCommands_Call) RunAndReturn(run func() []string) *SchemaGrammar_GetAttributeCommands_Call {
	_c.Call.Return(run)
	return _c
}

// TypeBigInteger provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeBigInteger(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeBigInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeBigInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeBigInteger'
type SchemaGrammar_TypeBigInteger_Call struct {
	*mock.Call
}

// TypeBigInteger is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeBigInteger(column interface{}) *SchemaGrammar_TypeBigInteger_Call {
	return &SchemaGrammar_TypeBigInteger_Call{Call: _e.mock.On("TypeBigInteger", column)}
}

func (_c *SchemaGrammar_TypeBigInteger_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeBigInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeBigInteger_Call) Return(_a0 string) *SchemaGrammar_TypeBigInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeBigInteger_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeBigInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeBoolean provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeBoolean(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeBoolean")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeBoolean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeBoolean'
type SchemaGrammar_TypeBoolean_Call struct {
	*mock.Call
}

// TypeBoolean is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeBoolean(column interface{}) *SchemaGrammar_TypeBoolean_Call {
	return &SchemaGrammar_TypeBoolean_Call{Call: _e.mock.On("TypeBoolean", column)}
}

func (_c *SchemaGrammar_TypeBoolean_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeBoolean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeBoolean_Call) Return(_a0 string) *SchemaGrammar_TypeBoolean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeBoolean_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeBoolean_Call {
	_c.Call.Return(run)
	return _c
}

// TypeChar provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeChar(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeChar")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeChar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeChar'
type SchemaGrammar_TypeChar_Call struct {
	*mock.Call
}

// TypeChar is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeChar(column interface{}) *SchemaGrammar_TypeChar_Call {
	return &SchemaGrammar_TypeChar_Call{Call: _e.mock.On("TypeChar", column)}
}

func (_c *SchemaGrammar_TypeChar_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeChar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeChar_Call) Return(_a0 string) *SchemaGrammar_TypeChar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeChar_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeChar_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDate provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeDate(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDate'
type SchemaGrammar_TypeDate_Call struct {
	*mock.Call
}

// TypeDate is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeDate(column interface{}) *SchemaGrammar_TypeDate_Call {
	return &SchemaGrammar_TypeDate_Call{Call: _e.mock.On("TypeDate", column)}
}

func (_c *SchemaGrammar_TypeDate_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeDate_Call) Return(_a0 string) *SchemaGrammar_TypeDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeDate_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeDate_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDateTime provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeDateTime(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDateTime")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeDateTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDateTime'
type SchemaGrammar_TypeDateTime_Call struct {
	*mock.Call
}

// TypeDateTime is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeDateTime(column interface{}) *SchemaGrammar_TypeDateTime_Call {
	return &SchemaGrammar_TypeDateTime_Call{Call: _e.mock.On("TypeDateTime", column)}
}

func (_c *SchemaGrammar_TypeDateTime_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeDateTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeDateTime_Call) Return(_a0 string) *SchemaGrammar_TypeDateTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeDateTime_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeDateTime_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDateTimeTz provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeDateTimeTz(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDateTimeTz")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeDateTimeTz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDateTimeTz'
type SchemaGrammar_TypeDateTimeTz_Call struct {
	*mock.Call
}

// TypeDateTimeTz is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeDateTimeTz(column interface{}) *SchemaGrammar_TypeDateTimeTz_Call {
	return &SchemaGrammar_TypeDateTimeTz_Call{Call: _e.mock.On("TypeDateTimeTz", column)}
}

func (_c *SchemaGrammar_TypeDateTimeTz_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeDateTimeTz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeDateTimeTz_Call) Return(_a0 string) *SchemaGrammar_TypeDateTimeTz_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeDateTimeTz_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeDateTimeTz_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDecimal provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeDecimal(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDecimal")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeDecimal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDecimal'
type SchemaGrammar_TypeDecimal_Call struct {
	*mock.Call
}

// TypeDecimal is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeDecimal(column interface{}) *SchemaGrammar_TypeDecimal_Call {
	return &SchemaGrammar_TypeDecimal_Call{Call: _e.mock.On("TypeDecimal", column)}
}

func (_c *SchemaGrammar_TypeDecimal_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeDecimal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeDecimal_Call) Return(_a0 string) *SchemaGrammar_TypeDecimal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeDecimal_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeDecimal_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDouble provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeDouble(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDouble")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeDouble_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDouble'
type SchemaGrammar_TypeDouble_Call struct {
	*mock.Call
}

// TypeDouble is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeDouble(column interface{}) *SchemaGrammar_TypeDouble_Call {
	return &SchemaGrammar_TypeDouble_Call{Call: _e.mock.On("TypeDouble", column)}
}

func (_c *SchemaGrammar_TypeDouble_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeDouble_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeDouble_Call) Return(_a0 string) *SchemaGrammar_TypeDouble_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeDouble_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeDouble_Call {
	_c.Call.Return(run)
	return _c
}

// TypeEnum provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeEnum(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeEnum")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeEnum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeEnum'
type SchemaGrammar_TypeEnum_Call struct {
	*mock.Call
}

// TypeEnum is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeEnum(column interface{}) *SchemaGrammar_TypeEnum_Call {
	return &SchemaGrammar_TypeEnum_Call{Call: _e.mock.On("TypeEnum", column)}
}

func (_c *SchemaGrammar_TypeEnum_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeEnum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeEnum_Call) Return(_a0 string) *SchemaGrammar_TypeEnum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeEnum_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeEnum_Call {
	_c.Call.Return(run)
	return _c
}

// TypeFloat provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeFloat(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeFloat")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeFloat'
type SchemaGrammar_TypeFloat_Call struct {
	*mock.Call
}

// TypeFloat is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeFloat(column interface{}) *SchemaGrammar_TypeFloat_Call {
	return &SchemaGrammar_TypeFloat_Call{Call: _e.mock.On("TypeFloat", column)}
}

func (_c *SchemaGrammar_TypeFloat_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeFloat_Call) Return(_a0 string) *SchemaGrammar_TypeFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeFloat_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeFloat_Call {
	_c.Call.Return(run)
	return _c
}

// TypeInteger provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeInteger(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeInteger'
type SchemaGrammar_TypeInteger_Call struct {
	*mock.Call
}

// TypeInteger is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeInteger(column interface{}) *SchemaGrammar_TypeInteger_Call {
	return &SchemaGrammar_TypeInteger_Call{Call: _e.mock.On("TypeInteger", column)}
}

func (_c *SchemaGrammar_TypeInteger_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeInteger_Call) Return(_a0 string) *SchemaGrammar_TypeInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeInteger_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeJson provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeJson(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeJson")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeJson'
type SchemaGrammar_TypeJson_Call struct {
	*mock.Call
}

// TypeJson is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeJson(column interface{}) *SchemaGrammar_TypeJson_Call {
	return &SchemaGrammar_TypeJson_Call{Call: _e.mock.On("TypeJson", column)}
}

func (_c *SchemaGrammar_TypeJson_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeJson_Call) Return(_a0 string) *SchemaGrammar_TypeJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeJson_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeJson_Call {
	_c.Call.Return(run)
	return _c
}

// TypeJsonb provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeJsonb(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeJsonb")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeJsonb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeJsonb'
type SchemaGrammar_TypeJsonb_Call struct {
	*mock.Call
}

// TypeJsonb is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeJsonb(column interface{}) *SchemaGrammar_TypeJsonb_Call {
	return &SchemaGrammar_TypeJsonb_Call{Call: _e.mock.On("TypeJsonb", column)}
}

func (_c *SchemaGrammar_TypeJsonb_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeJsonb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeJsonb_Call) Return(_a0 string) *SchemaGrammar_TypeJsonb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeJsonb_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeJsonb_Call {
	_c.Call.Return(run)
	return _c
}

// TypeLongText provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeLongText(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeLongText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeLongText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeLongText'
type SchemaGrammar_TypeLongText_Call struct {
	*mock.Call
}

// TypeLongText is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeLongText(column interface{}) *SchemaGrammar_TypeLongText_Call {
	return &SchemaGrammar_TypeLongText_Call{Call: _e.mock.On("TypeLongText", column)}
}

func (_c *SchemaGrammar_TypeLongText_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeLongText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeLongText_Call) Return(_a0 string) *SchemaGrammar_TypeLongText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeLongText_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeLongText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeMediumInteger provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeMediumInteger(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeMediumInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeMediumInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeMediumInteger'
type SchemaGrammar_TypeMediumInteger_Call struct {
	*mock.Call
}

// TypeMediumInteger is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeMediumInteger(column interface{}) *SchemaGrammar_TypeMediumInteger_Call {
	return &SchemaGrammar_TypeMediumInteger_Call{Call: _e.mock.On("TypeMediumInteger", column)}
}

func (_c *SchemaGrammar_TypeMediumInteger_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeMediumInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeMediumInteger_Call) Return(_a0 string) *SchemaGrammar_TypeMediumInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeMediumInteger_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeMediumInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeMediumText provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeMediumText(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeMediumText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeMediumText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeMediumText'
type SchemaGrammar_TypeMediumText_Call struct {
	*mock.Call
}

// TypeMediumText is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeMediumText(column interface{}) *SchemaGrammar_TypeMediumText_Call {
	return &SchemaGrammar_TypeMediumText_Call{Call: _e.mock.On("TypeMediumText", column)}
}

func (_c *SchemaGrammar_TypeMediumText_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeMediumText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeMediumText_Call) Return(_a0 string) *SchemaGrammar_TypeMediumText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeMediumText_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeMediumText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeSmallInteger provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeSmallInteger(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeSmallInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeSmallInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeSmallInteger'
type SchemaGrammar_TypeSmallInteger_Call struct {
	*mock.Call
}

// TypeSmallInteger is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeSmallInteger(column interface{}) *SchemaGrammar_TypeSmallInteger_Call {
	return &SchemaGrammar_TypeSmallInteger_Call{Call: _e.mock.On("TypeSmallInteger", column)}
}

func (_c *SchemaGrammar_TypeSmallInteger_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeSmallInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeSmallInteger_Call) Return(_a0 string) *SchemaGrammar_TypeSmallInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeSmallInteger_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeSmallInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeString(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type SchemaGrammar_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeString(column interface{}) *SchemaGrammar_TypeString_Call {
	return &SchemaGrammar_TypeString_Call{Call: _e.mock.On("TypeString", column)}
}

func (_c *SchemaGrammar_TypeString_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeString_Call) Return(_a0 string) *SchemaGrammar_TypeString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeString_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// TypeText provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeText(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeText'
type SchemaGrammar_TypeText_Call struct {
	*mock.Call
}

// TypeText is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeText(column interface{}) *SchemaGrammar_TypeText_Call {
	return &SchemaGrammar_TypeText_Call{Call: _e.mock.On("TypeText", column)}
}

func (_c *SchemaGrammar_TypeText_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeText_Call) Return(_a0 string) *SchemaGrammar_TypeText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeText_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTime provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTime(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTime")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTime'
type SchemaGrammar_TypeTime_Call struct {
	*mock.Call
}

// TypeTime is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTime(column interface{}) *SchemaGrammar_TypeTime_Call {
	return &SchemaGrammar_TypeTime_Call{Call: _e.mock.On("TypeTime", column)}
}

func (_c *SchemaGrammar_TypeTime_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTime_Call) Return(_a0 string) *SchemaGrammar_TypeTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTime_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTime_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTimeTz provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTimeTz(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTimeTz")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTimeTz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTimeTz'
type SchemaGrammar_TypeTimeTz_Call struct {
	*mock.Call
}

// TypeTimeTz is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTimeTz(column interface{}) *SchemaGrammar_TypeTimeTz_Call {
	return &SchemaGrammar_TypeTimeTz_Call{Call: _e.mock.On("TypeTimeTz", column)}
}

func (_c *SchemaGrammar_TypeTimeTz_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTimeTz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTimeTz_Call) Return(_a0 string) *SchemaGrammar_TypeTimeTz_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTimeTz_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTimeTz_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTimestamp provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTimestamp(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTimestamp")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTimestamp'
type SchemaGrammar_TypeTimestamp_Call struct {
	*mock.Call
}

// TypeTimestamp is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTimestamp(column interface{}) *SchemaGrammar_TypeTimestamp_Call {
	return &SchemaGrammar_TypeTimestamp_Call{Call: _e.mock.On("TypeTimestamp", column)}
}

func (_c *SchemaGrammar_TypeTimestamp_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTimestamp_Call) Return(_a0 string) *SchemaGrammar_TypeTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTimestamp_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTimestampTz provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTimestampTz(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTimestampTz")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTimestampTz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTimestampTz'
type SchemaGrammar_TypeTimestampTz_Call struct {
	*mock.Call
}

// TypeTimestampTz is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTimestampTz(column interface{}) *SchemaGrammar_TypeTimestampTz_Call {
	return &SchemaGrammar_TypeTimestampTz_Call{Call: _e.mock.On("TypeTimestampTz", column)}
}

func (_c *SchemaGrammar_TypeTimestampTz_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTimestampTz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTimestampTz_Call) Return(_a0 string) *SchemaGrammar_TypeTimestampTz_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTimestampTz_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTimestampTz_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTinyInteger provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTinyInteger(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTinyInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTinyInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTinyInteger'
type SchemaGrammar_TypeTinyInteger_Call struct {
	*mock.Call
}

// TypeTinyInteger is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTinyInteger(column interface{}) *SchemaGrammar_TypeTinyInteger_Call {
	return &SchemaGrammar_TypeTinyInteger_Call{Call: _e.mock.On("TypeTinyInteger", column)}
}

func (_c *SchemaGrammar_TypeTinyInteger_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTinyInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTinyInteger_Call) Return(_a0 string) *SchemaGrammar_TypeTinyInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTinyInteger_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTinyInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTinyText provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeTinyText(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTinyText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeTinyText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTinyText'
type SchemaGrammar_TypeTinyText_Call struct {
	*mock.Call
}

// TypeTinyText is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeTinyText(column interface{}) *SchemaGrammar_TypeTinyText_Call {
	return &SchemaGrammar_TypeTinyText_Call{Call: _e.mock.On("TypeTinyText", column)}
}

func (_c *SchemaGrammar_TypeTinyText_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeTinyText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeTinyText_Call) Return(_a0 string) *SchemaGrammar_TypeTinyText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeTinyText_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeTinyText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeUuid provides a mock function with given fields: column
func (_m *SchemaGrammar) TypeUuid(column driver.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeUuid")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(driver.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaGrammar_TypeUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeUuid'
type SchemaGrammar_TypeUuid_Call struct {
	*mock.Call
}

// TypeUuid is a helper method to define mock.On call
//   - column driver.ColumnDefinition
func (_e *SchemaGrammar_Expecter) TypeUuid(column interface{}) *SchemaGrammar_TypeUuid_Call {
	return &SchemaGrammar_TypeUuid_Call{Call: _e.mock.On("TypeUuid", column)}
}

func (_c *SchemaGrammar_TypeUuid_Call) Run(run func(column driver.ColumnDefinition)) *SchemaGrammar_TypeUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(driver.ColumnDefinition))
	})
	return _c
}

func (_c *SchemaGrammar_TypeUuid_Call) Return(_a0 string) *SchemaGrammar_TypeUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchemaGrammar_TypeUuid_Call) RunAndReturn(run func(driver.ColumnDefinition) string) *SchemaGrammar_TypeUuid_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchemaGrammar creates a new instance of SchemaGrammar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchemaGrammar(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchemaGrammar {
	mock := &SchemaGrammar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
