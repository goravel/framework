// Code generated by mockery. DO NOT EDIT.

package orm

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// ModelWithGlobalScopes is an autogenerated mock type for the ModelWithGlobalScopes type
type ModelWithGlobalScopes struct {
	mock.Mock
}

type ModelWithGlobalScopes_Expecter struct {
	mock *mock.Mock
}

func (_m *ModelWithGlobalScopes) EXPECT() *ModelWithGlobalScopes_Expecter {
	return &ModelWithGlobalScopes_Expecter{mock: &_m.Mock}
}

// GlobalScopes provides a mock function with no fields
func (_m *ModelWithGlobalScopes) GlobalScopes() []func(orm.Query) orm.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalScopes")
	}

	var r0 []func(orm.Query) orm.Query
	if rf, ok := ret.Get(0).(func() []func(orm.Query) orm.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]func(orm.Query) orm.Query)
		}
	}

	return r0
}

// ModelWithGlobalScopes_GlobalScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalScopes'
type ModelWithGlobalScopes_GlobalScopes_Call struct {
	*mock.Call
}

// GlobalScopes is a helper method to define mock.On call
func (_e *ModelWithGlobalScopes_Expecter) GlobalScopes() *ModelWithGlobalScopes_GlobalScopes_Call {
	return &ModelWithGlobalScopes_GlobalScopes_Call{Call: _e.mock.On("GlobalScopes")}
}

func (_c *ModelWithGlobalScopes_GlobalScopes_Call) Run(run func()) *ModelWithGlobalScopes_GlobalScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelWithGlobalScopes_GlobalScopes_Call) Return(_a0 []func(orm.Query) orm.Query) *ModelWithGlobalScopes_GlobalScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelWithGlobalScopes_GlobalScopes_Call) RunAndReturn(run func() []func(orm.Query) orm.Query) *ModelWithGlobalScopes_GlobalScopes_Call {
	_c.Call.Return(run)
	return _c
}

// NewModelWithGlobalScopes creates a new instance of ModelWithGlobalScopes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModelWithGlobalScopes(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModelWithGlobalScopes {
	mock := &ModelWithGlobalScopes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
