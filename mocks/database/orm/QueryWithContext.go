// Code generated by mockery. DO NOT EDIT.

package orm

import (
	context "context"

	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// QueryWithContext is an autogenerated mock type for the QueryWithContext type
type QueryWithContext struct {
	mock.Mock
}

type QueryWithContext_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryWithContext) EXPECT() *QueryWithContext_Expecter {
	return &QueryWithContext_Expecter{mock: &_m.Mock}
}

// WithContext provides a mock function with given fields: ctx
func (_m *QueryWithContext) WithContext(ctx context.Context) orm.Query {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 orm.Query
	if rf, ok := ret.Get(0).(func(context.Context) orm.Query); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Query)
		}
	}

	return r0
}

// QueryWithContext_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type QueryWithContext_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryWithContext_Expecter) WithContext(ctx interface{}) *QueryWithContext_WithContext_Call {
	return &QueryWithContext_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *QueryWithContext_WithContext_Call) Run(run func(ctx context.Context)) *QueryWithContext_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryWithContext_WithContext_Call) Return(_a0 orm.Query) *QueryWithContext_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryWithContext_WithContext_Call) RunAndReturn(run func(context.Context) orm.Query) *QueryWithContext_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryWithContext creates a new instance of QueryWithContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryWithContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryWithContext {
	mock := &QueryWithContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
