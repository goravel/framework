// Code generated by mockery. DO NOT EDIT.

package queue

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JobWithShouldRetry is an autogenerated mock type for the JobWithShouldRetry type
type JobWithShouldRetry struct {
	mock.Mock
}

type JobWithShouldRetry_Expecter struct {
	mock *mock.Mock
}

func (_m *JobWithShouldRetry) EXPECT() *JobWithShouldRetry_Expecter {
	return &JobWithShouldRetry_Expecter{mock: &_m.Mock}
}

// ShouldRetry provides a mock function with given fields: err, attempt
func (_m *JobWithShouldRetry) ShouldRetry(err error, attempt int) (bool, time.Duration) {
	ret := _m.Called(err, attempt)

	if len(ret) == 0 {
		panic("no return value specified for ShouldRetry")
	}

	var r0 bool
	var r1 time.Duration
	if rf, ok := ret.Get(0).(func(error, int) (bool, time.Duration)); ok {
		return rf(err, attempt)
	}
	if rf, ok := ret.Get(0).(func(error, int) bool); ok {
		r0 = rf(err, attempt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(error, int) time.Duration); ok {
		r1 = rf(err, attempt)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	return r0, r1
}

// JobWithShouldRetry_ShouldRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRetry'
type JobWithShouldRetry_ShouldRetry_Call struct {
	*mock.Call
}

// ShouldRetry is a helper method to define mock.On call
//   - err error
//   - attempt int
func (_e *JobWithShouldRetry_Expecter) ShouldRetry(err interface{}, attempt interface{}) *JobWithShouldRetry_ShouldRetry_Call {
	return &JobWithShouldRetry_ShouldRetry_Call{Call: _e.mock.On("ShouldRetry", err, attempt)}
}

func (_c *JobWithShouldRetry_ShouldRetry_Call) Run(run func(err error, attempt int)) *JobWithShouldRetry_ShouldRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(int))
	})
	return _c
}

func (_c *JobWithShouldRetry_ShouldRetry_Call) Return(retryable bool, delay time.Duration) *JobWithShouldRetry_ShouldRetry_Call {
	_c.Call.Return(retryable, delay)
	return _c
}

func (_c *JobWithShouldRetry_ShouldRetry_Call) RunAndReturn(run func(error, int) (bool, time.Duration)) *JobWithShouldRetry_ShouldRetry_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobWithShouldRetry creates a new instance of JobWithShouldRetry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobWithShouldRetry(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobWithShouldRetry {
	mock := &JobWithShouldRetry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
