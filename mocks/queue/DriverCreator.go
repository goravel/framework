// Code generated by mockery. DO NOT EDIT.

package queue

import (
	queue "github.com/goravel/framework/contracts/queue"
	mock "github.com/stretchr/testify/mock"
)

// DriverCreator is an autogenerated mock type for the DriverCreator type
type DriverCreator struct {
	mock.Mock
}

type DriverCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *DriverCreator) EXPECT() *DriverCreator_Expecter {
	return &DriverCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: connection
func (_m *DriverCreator) Create(connection string) (queue.Driver, error) {
	ret := _m.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 queue.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (queue.Driver, error)); ok {
		return rf(connection)
	}
	if rf, ok := ret.Get(0).(func(string) queue.Driver); ok {
		r0 = rf(connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DriverCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - connection string
func (_e *DriverCreator_Expecter) Create(connection interface{}) *DriverCreator_Create_Call {
	return &DriverCreator_Create_Call{Call: _e.mock.On("Create", connection)}
}

func (_c *DriverCreator_Create_Call) Run(run func(connection string)) *DriverCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DriverCreator_Create_Call) Return(_a0 queue.Driver, _a1 error) *DriverCreator_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DriverCreator_Create_Call) RunAndReturn(run func(string) (queue.Driver, error)) *DriverCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriverCreator creates a new instance of DriverCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverCreator {
	mock := &DriverCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
