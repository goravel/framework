// Code generated by mockery. DO NOT EDIT.

package queue

import (
	queue "github.com/goravel/framework/contracts/queue"
	mock "github.com/stretchr/testify/mock"
)

// Failer is an autogenerated mock type for the Failer type
type Failer struct {
	mock.Mock
}

type Failer_Expecter struct {
	mock *mock.Mock
}

func (_m *Failer) EXPECT() *Failer_Expecter {
	return &Failer_Expecter{mock: &_m.Mock}
}

// All provides a mock function with no fields
func (_m *Failer) All() ([]queue.FailedJob, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []queue.FailedJob
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]queue.FailedJob, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []queue.FailedJob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queue.FailedJob)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Failer_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Failer_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Failer_Expecter) All() *Failer_All_Call {
	return &Failer_All_Call{Call: _e.mock.On("All")}
}

func (_c *Failer_All_Call) Run(run func()) *Failer_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Failer_All_Call) Return(_a0 []queue.FailedJob, _a1 error) *Failer_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Failer_All_Call) RunAndReturn(run func() ([]queue.FailedJob, error)) *Failer_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: connection, _a1, uuids
func (_m *Failer) Get(connection string, _a1 string, uuids []string) ([]queue.FailedJob, error) {
	ret := _m.Called(connection, _a1, uuids)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []queue.FailedJob
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) ([]queue.FailedJob, error)); ok {
		return rf(connection, _a1, uuids)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) []queue.FailedJob); ok {
		r0 = rf(connection, _a1, uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queue.FailedJob)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(connection, _a1, uuids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Failer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Failer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - connection string
//   - _a1 string
//   - uuids []string
func (_e *Failer_Expecter) Get(connection interface{}, _a1 interface{}, uuids interface{}) *Failer_Get_Call {
	return &Failer_Get_Call{Call: _e.mock.On("Get", connection, _a1, uuids)}
}

func (_c *Failer_Get_Call) Run(run func(connection string, _a1 string, uuids []string)) *Failer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *Failer_Get_Call) Return(_a0 []queue.FailedJob, _a1 error) *Failer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Failer_Get_Call) RunAndReturn(run func(string, string, []string) ([]queue.FailedJob, error)) *Failer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewFailer creates a new instance of Failer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Failer {
	mock := &Failer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
