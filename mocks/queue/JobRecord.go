// Code generated by mockery. DO NOT EDIT.

package queue

import (
	carbon "github.com/dromara/carbon/v2"
	mock "github.com/stretchr/testify/mock"
)

// JobRecord is an autogenerated mock type for the JobRecord type
type JobRecord struct {
	mock.Mock
}

type JobRecord_Expecter struct {
	mock *mock.Mock
}

func (_m *JobRecord) EXPECT() *JobRecord_Expecter {
	return &JobRecord_Expecter{mock: &_m.Mock}
}

// Increment provides a mock function with no fields
func (_m *JobRecord) Increment() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// JobRecord_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type JobRecord_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
func (_e *JobRecord_Expecter) Increment() *JobRecord_Increment_Call {
	return &JobRecord_Increment_Call{Call: _e.mock.On("Increment")}
}

func (_c *JobRecord_Increment_Call) Run(run func()) *JobRecord_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JobRecord_Increment_Call) Return(_a0 int) *JobRecord_Increment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobRecord_Increment_Call) RunAndReturn(run func() int) *JobRecord_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function with no fields
func (_m *JobRecord) Touch() *carbon.LayoutType[carbon.DateTimeType] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Touch")
	}

	var r0 *carbon.LayoutType[carbon.DateTimeType]
	if rf, ok := ret.Get(0).(func() *carbon.LayoutType[carbon.DateTimeType]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carbon.LayoutType[carbon.DateTimeType])
		}
	}

	return r0
}

// JobRecord_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type JobRecord_Touch_Call struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
func (_e *JobRecord_Expecter) Touch() *JobRecord_Touch_Call {
	return &JobRecord_Touch_Call{Call: _e.mock.On("Touch")}
}

func (_c *JobRecord_Touch_Call) Run(run func()) *JobRecord_Touch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JobRecord_Touch_Call) Return(_a0 *carbon.LayoutType[carbon.DateTimeType]) *JobRecord_Touch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobRecord_Touch_Call) RunAndReturn(run func() *carbon.LayoutType[carbon.DateTimeType]) *JobRecord_Touch_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobRecord creates a new instance of JobRecord. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobRecord(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobRecord {
	mock := &JobRecord{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
