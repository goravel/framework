// Code generated by mockery. DO NOT EDIT.

package queue

import (
	queue "github.com/goravel/framework/contracts/queue"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PendingJob is an autogenerated mock type for the PendingJob type
type PendingJob struct {
	mock.Mock
}

type PendingJob_Expecter struct {
	mock *mock.Mock
}

func (_m *PendingJob) EXPECT() *PendingJob_Expecter {
	return &PendingJob_Expecter{mock: &_m.Mock}
}

// Delay provides a mock function with given fields: _a0
func (_m *PendingJob) Delay(_a0 time.Time) queue.PendingJob {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delay")
	}

	var r0 queue.PendingJob
	if rf, ok := ret.Get(0).(func(time.Time) queue.PendingJob); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.PendingJob)
		}
	}

	return r0
}

// PendingJob_Delay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delay'
type PendingJob_Delay_Call struct {
	*mock.Call
}

// Delay is a helper method to define mock.On call
//   - _a0 time.Time
func (_e *PendingJob_Expecter) Delay(_a0 interface{}) *PendingJob_Delay_Call {
	return &PendingJob_Delay_Call{Call: _e.mock.On("Delay", _a0)}
}

func (_c *PendingJob_Delay_Call) Run(run func(_a0 time.Time)) *PendingJob_Delay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *PendingJob_Delay_Call) Return(_a0 queue.PendingJob) *PendingJob_Delay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PendingJob_Delay_Call) RunAndReturn(run func(time.Time) queue.PendingJob) *PendingJob_Delay_Call {
	_c.Call.Return(run)
	return _c
}

// Dispatch provides a mock function with no fields
func (_m *PendingJob) Dispatch() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PendingJob_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type PendingJob_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
func (_e *PendingJob_Expecter) Dispatch() *PendingJob_Dispatch_Call {
	return &PendingJob_Dispatch_Call{Call: _e.mock.On("Dispatch")}
}

func (_c *PendingJob_Dispatch_Call) Run(run func()) *PendingJob_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PendingJob_Dispatch_Call) Return(_a0 error) *PendingJob_Dispatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PendingJob_Dispatch_Call) RunAndReturn(run func() error) *PendingJob_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

// DispatchSync provides a mock function with no fields
func (_m *PendingJob) DispatchSync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DispatchSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PendingJob_DispatchSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchSync'
type PendingJob_DispatchSync_Call struct {
	*mock.Call
}

// DispatchSync is a helper method to define mock.On call
func (_e *PendingJob_Expecter) DispatchSync() *PendingJob_DispatchSync_Call {
	return &PendingJob_DispatchSync_Call{Call: _e.mock.On("DispatchSync")}
}

func (_c *PendingJob_DispatchSync_Call) Run(run func()) *PendingJob_DispatchSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PendingJob_DispatchSync_Call) Return(_a0 error) *PendingJob_DispatchSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PendingJob_DispatchSync_Call) RunAndReturn(run func() error) *PendingJob_DispatchSync_Call {
	_c.Call.Return(run)
	return _c
}

// OnConnection provides a mock function with given fields: connection
func (_m *PendingJob) OnConnection(connection string) queue.PendingJob {
	ret := _m.Called(connection)

	if len(ret) == 0 {
		panic("no return value specified for OnConnection")
	}

	var r0 queue.PendingJob
	if rf, ok := ret.Get(0).(func(string) queue.PendingJob); ok {
		r0 = rf(connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.PendingJob)
		}
	}

	return r0
}

// PendingJob_OnConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnConnection'
type PendingJob_OnConnection_Call struct {
	*mock.Call
}

// OnConnection is a helper method to define mock.On call
//   - connection string
func (_e *PendingJob_Expecter) OnConnection(connection interface{}) *PendingJob_OnConnection_Call {
	return &PendingJob_OnConnection_Call{Call: _e.mock.On("OnConnection", connection)}
}

func (_c *PendingJob_OnConnection_Call) Run(run func(connection string)) *PendingJob_OnConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PendingJob_OnConnection_Call) Return(_a0 queue.PendingJob) *PendingJob_OnConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PendingJob_OnConnection_Call) RunAndReturn(run func(string) queue.PendingJob) *PendingJob_OnConnection_Call {
	_c.Call.Return(run)
	return _c
}

// OnQueue provides a mock function with given fields: _a0
func (_m *PendingJob) OnQueue(_a0 string) queue.PendingJob {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OnQueue")
	}

	var r0 queue.PendingJob
	if rf, ok := ret.Get(0).(func(string) queue.PendingJob); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.PendingJob)
		}
	}

	return r0
}

// PendingJob_OnQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQueue'
type PendingJob_OnQueue_Call struct {
	*mock.Call
}

// OnQueue is a helper method to define mock.On call
//   - _a0 string
func (_e *PendingJob_Expecter) OnQueue(_a0 interface{}) *PendingJob_OnQueue_Call {
	return &PendingJob_OnQueue_Call{Call: _e.mock.On("OnQueue", _a0)}
}

func (_c *PendingJob_OnQueue_Call) Run(run func(_a0 string)) *PendingJob_OnQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PendingJob_OnQueue_Call) Return(_a0 queue.PendingJob) *PendingJob_OnQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PendingJob_OnQueue_Call) RunAndReturn(run func(string) queue.PendingJob) *PendingJob_OnQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewPendingJob creates a new instance of PendingJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPendingJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *PendingJob {
	mock := &PendingJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
