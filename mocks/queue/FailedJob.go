// Code generated by mockery. DO NOT EDIT.

package queue

import (
	carbon "github.com/dromara/carbon/v2"
	mock "github.com/stretchr/testify/mock"

	supportcarbon "github.com/goravel/framework/support/carbon"
)

// FailedJob is an autogenerated mock type for the FailedJob type
type FailedJob struct {
	mock.Mock
}

type FailedJob_Expecter struct {
	mock *mock.Mock
}

func (_m *FailedJob) EXPECT() *FailedJob_Expecter {
	return &FailedJob_Expecter{mock: &_m.Mock}
}

// Connection provides a mock function with no fields
func (_m *FailedJob) Connection() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connection")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FailedJob_Connection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connection'
type FailedJob_Connection_Call struct {
	*mock.Call
}

// Connection is a helper method to define mock.On call
func (_e *FailedJob_Expecter) Connection() *FailedJob_Connection_Call {
	return &FailedJob_Connection_Call{Call: _e.mock.On("Connection")}
}

func (_c *FailedJob_Connection_Call) Run(run func()) *FailedJob_Connection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_Connection_Call) Return(_a0 string) *FailedJob_Connection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_Connection_Call) RunAndReturn(run func() string) *FailedJob_Connection_Call {
	_c.Call.Return(run)
	return _c
}

// FailedAt provides a mock function with no fields
func (_m *FailedJob) FailedAt() *carbon.LayoutType[supportcarbon.DateTimeType] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FailedAt")
	}

	var r0 *carbon.LayoutType[supportcarbon.DateTimeType]
	if rf, ok := ret.Get(0).(func() *carbon.LayoutType[supportcarbon.DateTimeType]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carbon.LayoutType[supportcarbon.DateTimeType])
		}
	}

	return r0
}

// FailedJob_FailedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailedAt'
type FailedJob_FailedAt_Call struct {
	*mock.Call
}

// FailedAt is a helper method to define mock.On call
func (_e *FailedJob_Expecter) FailedAt() *FailedJob_FailedAt_Call {
	return &FailedJob_FailedAt_Call{Call: _e.mock.On("FailedAt")}
}

func (_c *FailedJob_FailedAt_Call) Run(run func()) *FailedJob_FailedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_FailedAt_Call) Return(_a0 *carbon.LayoutType[supportcarbon.DateTimeType]) *FailedJob_FailedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_FailedAt_Call) RunAndReturn(run func() *carbon.LayoutType[supportcarbon.DateTimeType]) *FailedJob_FailedAt_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with no fields
func (_m *FailedJob) Queue() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FailedJob_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type FailedJob_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
func (_e *FailedJob_Expecter) Queue() *FailedJob_Queue_Call {
	return &FailedJob_Queue_Call{Call: _e.mock.On("Queue")}
}

func (_c *FailedJob_Queue_Call) Run(run func()) *FailedJob_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_Queue_Call) Return(_a0 string) *FailedJob_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_Queue_Call) RunAndReturn(run func() string) *FailedJob_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Retry provides a mock function with no fields
func (_m *FailedJob) Retry() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FailedJob_Retry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retry'
type FailedJob_Retry_Call struct {
	*mock.Call
}

// Retry is a helper method to define mock.On call
func (_e *FailedJob_Expecter) Retry() *FailedJob_Retry_Call {
	return &FailedJob_Retry_Call{Call: _e.mock.On("Retry")}
}

func (_c *FailedJob_Retry_Call) Run(run func()) *FailedJob_Retry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_Retry_Call) Return(_a0 error) *FailedJob_Retry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_Retry_Call) RunAndReturn(run func() error) *FailedJob_Retry_Call {
	_c.Call.Return(run)
	return _c
}

// Signature provides a mock function with no fields
func (_m *FailedJob) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FailedJob_Signature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signature'
type FailedJob_Signature_Call struct {
	*mock.Call
}

// Signature is a helper method to define mock.On call
func (_e *FailedJob_Expecter) Signature() *FailedJob_Signature_Call {
	return &FailedJob_Signature_Call{Call: _e.mock.On("Signature")}
}

func (_c *FailedJob_Signature_Call) Run(run func()) *FailedJob_Signature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_Signature_Call) Return(_a0 string) *FailedJob_Signature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_Signature_Call) RunAndReturn(run func() string) *FailedJob_Signature_Call {
	_c.Call.Return(run)
	return _c
}

// UUID provides a mock function with no fields
func (_m *FailedJob) UUID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UUID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FailedJob_UUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UUID'
type FailedJob_UUID_Call struct {
	*mock.Call
}

// UUID is a helper method to define mock.On call
func (_e *FailedJob_Expecter) UUID() *FailedJob_UUID_Call {
	return &FailedJob_UUID_Call{Call: _e.mock.On("UUID")}
}

func (_c *FailedJob_UUID_Call) Run(run func()) *FailedJob_UUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FailedJob_UUID_Call) Return(_a0 string) *FailedJob_UUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FailedJob_UUID_Call) RunAndReturn(run func() string) *FailedJob_UUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewFailedJob creates a new instance of FailedJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFailedJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *FailedJob {
	mock := &FailedJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
