// Code generated by mockery. DO NOT EDIT.

package queue

import (
	queue "github.com/goravel/framework/contracts/queue"
	mock "github.com/stretchr/testify/mock"
)

// ReservedJob is an autogenerated mock type for the ReservedJob type
type ReservedJob struct {
	mock.Mock
}

type ReservedJob_Expecter struct {
	mock *mock.Mock
}

func (_m *ReservedJob) EXPECT() *ReservedJob_Expecter {
	return &ReservedJob_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with no fields
func (_m *ReservedJob) Delete() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReservedJob_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReservedJob_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *ReservedJob_Expecter) Delete() *ReservedJob_Delete_Call {
	return &ReservedJob_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *ReservedJob_Delete_Call) Run(run func()) *ReservedJob_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservedJob_Delete_Call) Return(_a0 error) *ReservedJob_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservedJob_Delete_Call) RunAndReturn(run func() error) *ReservedJob_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Task provides a mock function with no fields
func (_m *ReservedJob) Task() queue.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Task")
	}

	var r0 queue.Task
	if rf, ok := ret.Get(0).(func() queue.Task); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(queue.Task)
	}

	return r0
}

// ReservedJob_Task_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Task'
type ReservedJob_Task_Call struct {
	*mock.Call
}

// Task is a helper method to define mock.On call
func (_e *ReservedJob_Expecter) Task() *ReservedJob_Task_Call {
	return &ReservedJob_Task_Call{Call: _e.mock.On("Task")}
}

func (_c *ReservedJob_Task_Call) Run(run func()) *ReservedJob_Task_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservedJob_Task_Call) Return(_a0 queue.Task) *ReservedJob_Task_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservedJob_Task_Call) RunAndReturn(run func() queue.Task) *ReservedJob_Task_Call {
	_c.Call.Return(run)
	return _c
}

// NewReservedJob creates a new instance of ReservedJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservedJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservedJob {
	mock := &ReservedJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
