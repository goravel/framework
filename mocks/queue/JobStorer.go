// Code generated by mockery. DO NOT EDIT.

package queue

import (
	queue "github.com/goravel/framework/contracts/queue"
	mock "github.com/stretchr/testify/mock"
)

// JobStorer is an autogenerated mock type for the JobStorer type
type JobStorer struct {
	mock.Mock
}

type JobStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *JobStorer) EXPECT() *JobStorer_Expecter {
	return &JobStorer_Expecter{mock: &_m.Mock}
}

// All provides a mock function with no fields
func (_m *JobStorer) All() []queue.Job {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []queue.Job
	if rf, ok := ret.Get(0).(func() []queue.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queue.Job)
		}
	}

	return r0
}

// JobStorer_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type JobStorer_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *JobStorer_Expecter) All() *JobStorer_All_Call {
	return &JobStorer_All_Call{Call: _e.mock.On("All")}
}

func (_c *JobStorer_All_Call) Run(run func()) *JobStorer_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JobStorer_All_Call) Return(_a0 []queue.Job) *JobStorer_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobStorer_All_Call) RunAndReturn(run func() []queue.Job) *JobStorer_All_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function with given fields: signature, args
func (_m *JobStorer) Call(signature string, args []interface{}) error {
	ret := _m.Called(signature, args)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []interface{}) error); ok {
		r0 = rf(signature, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobStorer_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type JobStorer_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - signature string
//   - args []interface{}
func (_e *JobStorer_Expecter) Call(signature interface{}, args interface{}) *JobStorer_Call_Call {
	return &JobStorer_Call_Call{Call: _e.mock.On("Call", signature, args)}
}

func (_c *JobStorer_Call_Call) Run(run func(signature string, args []interface{})) *JobStorer_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]interface{}))
	})
	return _c
}

func (_c *JobStorer_Call_Call) Return(_a0 error) *JobStorer_Call_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobStorer_Call_Call) RunAndReturn(run func(string, []interface{}) error) *JobStorer_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: signature
func (_m *JobStorer) Get(signature string) (queue.Job, error) {
	ret := _m.Called(signature)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 queue.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (queue.Job, error)); ok {
		return rf(signature)
	}
	if rf, ok := ret.Get(0).(func(string) queue.Job); ok {
		r0 = rf(signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobStorer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type JobStorer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - signature string
func (_e *JobStorer_Expecter) Get(signature interface{}) *JobStorer_Get_Call {
	return &JobStorer_Get_Call{Call: _e.mock.On("Get", signature)}
}

func (_c *JobStorer_Get_Call) Run(run func(signature string)) *JobStorer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JobStorer_Get_Call) Return(_a0 queue.Job, _a1 error) *JobStorer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JobStorer_Get_Call) RunAndReturn(run func(string) (queue.Job, error)) *JobStorer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: jobs
func (_m *JobStorer) Register(jobs []queue.Job) {
	_m.Called(jobs)
}

// JobStorer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type JobStorer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - jobs []queue.Job
func (_e *JobStorer_Expecter) Register(jobs interface{}) *JobStorer_Register_Call {
	return &JobStorer_Register_Call{Call: _e.mock.On("Register", jobs)}
}

func (_c *JobStorer_Register_Call) Run(run func(jobs []queue.Job)) *JobStorer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]queue.Job))
	})
	return _c
}

func (_c *JobStorer_Register_Call) Return() *JobStorer_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *JobStorer_Register_Call) RunAndReturn(run func([]queue.Job)) *JobStorer_Register_Call {
	_c.Run(run)
	return _c
}

// NewJobStorer creates a new instance of JobStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobStorer {
	mock := &JobStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
