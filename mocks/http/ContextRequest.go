// Code generated by mockery. DO NOT EDIT.

package http

import (
	filesystem "github.com/goravel/framework/contracts/filesystem"
	http "github.com/goravel/framework/contracts/http"

	mock "github.com/stretchr/testify/mock"

	nethttp "net/http"

	session "github.com/goravel/framework/contracts/session"

	validation "github.com/goravel/framework/contracts/validation"
)

// ContextRequest is an autogenerated mock type for the ContextRequest type
type ContextRequest struct {
	mock.Mock
}

type ContextRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextRequest) EXPECT() *ContextRequest_Expecter {
	return &ContextRequest_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: code
func (_m *ContextRequest) Abort(code ...int) {
	_va := make([]interface{}, len(code))
	for _i := range code {
		_va[_i] = code[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ContextRequest_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type ContextRequest_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - code ...int
func (_e *ContextRequest_Expecter) Abort(code ...interface{}) *ContextRequest_Abort_Call {
	return &ContextRequest_Abort_Call{Call: _e.mock.On("Abort",
		append([]interface{}{}, code...)...)}
}

func (_c *ContextRequest_Abort_Call) Run(run func(code ...int)) *ContextRequest_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Abort_Call) Return() *ContextRequest_Abort_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextRequest_Abort_Call) RunAndReturn(run func(...int)) *ContextRequest_Abort_Call {
	_c.Run(run)
	return _c
}

// AbortWithStatus provides a mock function with given fields: code
func (_m *ContextRequest) AbortWithStatus(code int) {
	_m.Called(code)
}

// ContextRequest_AbortWithStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortWithStatus'
type ContextRequest_AbortWithStatus_Call struct {
	*mock.Call
}

// AbortWithStatus is a helper method to define mock.On call
//   - code int
func (_e *ContextRequest_Expecter) AbortWithStatus(code interface{}) *ContextRequest_AbortWithStatus_Call {
	return &ContextRequest_AbortWithStatus_Call{Call: _e.mock.On("AbortWithStatus", code)}
}

func (_c *ContextRequest_AbortWithStatus_Call) Run(run func(code int)) *ContextRequest_AbortWithStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ContextRequest_AbortWithStatus_Call) Return() *ContextRequest_AbortWithStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextRequest_AbortWithStatus_Call) RunAndReturn(run func(int)) *ContextRequest_AbortWithStatus_Call {
	_c.Run(run)
	return _c
}

// AbortWithStatusJson provides a mock function with given fields: code, jsonObj
func (_m *ContextRequest) AbortWithStatusJson(code int, jsonObj interface{}) {
	_m.Called(code, jsonObj)
}

// ContextRequest_AbortWithStatusJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortWithStatusJson'
type ContextRequest_AbortWithStatusJson_Call struct {
	*mock.Call
}

// AbortWithStatusJson is a helper method to define mock.On call
//   - code int
//   - jsonObj interface{}
func (_e *ContextRequest_Expecter) AbortWithStatusJson(code interface{}, jsonObj interface{}) *ContextRequest_AbortWithStatusJson_Call {
	return &ContextRequest_AbortWithStatusJson_Call{Call: _e.mock.On("AbortWithStatusJson", code, jsonObj)}
}

func (_c *ContextRequest_AbortWithStatusJson_Call) Run(run func(code int, jsonObj interface{})) *ContextRequest_AbortWithStatusJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *ContextRequest_AbortWithStatusJson_Call) Return() *ContextRequest_AbortWithStatusJson_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextRequest_AbortWithStatusJson_Call) RunAndReturn(run func(int, interface{})) *ContextRequest_AbortWithStatusJson_Call {
	_c.Run(run)
	return _c
}

// All provides a mock function with no fields
func (_m *ContextRequest) All() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// ContextRequest_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type ContextRequest_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) All() *ContextRequest_All_Call {
	return &ContextRequest_All_Call{Call: _e.mock.On("All")}
}

func (_c *ContextRequest_All_Call) Run(run func()) *ContextRequest_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_All_Call) Return(_a0 map[string]interface{}) *ContextRequest_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_All_Call) RunAndReturn(run func() map[string]interface{}) *ContextRequest_All_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: obj
func (_m *ContextRequest) Bind(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContextRequest_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type ContextRequest_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - obj interface{}
func (_e *ContextRequest_Expecter) Bind(obj interface{}) *ContextRequest_Bind_Call {
	return &ContextRequest_Bind_Call{Call: _e.mock.On("Bind", obj)}
}

func (_c *ContextRequest_Bind_Call) Run(run func(obj interface{})) *ContextRequest_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ContextRequest_Bind_Call) Return(_a0 error) *ContextRequest_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Bind_Call) RunAndReturn(run func(interface{}) error) *ContextRequest_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// BindQuery provides a mock function with given fields: obj
func (_m *ContextRequest) BindQuery(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContextRequest_BindQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindQuery'
type ContextRequest_BindQuery_Call struct {
	*mock.Call
}

// BindQuery is a helper method to define mock.On call
//   - obj interface{}
func (_e *ContextRequest_Expecter) BindQuery(obj interface{}) *ContextRequest_BindQuery_Call {
	return &ContextRequest_BindQuery_Call{Call: _e.mock.On("BindQuery", obj)}
}

func (_c *ContextRequest_BindQuery_Call) Run(run func(obj interface{})) *ContextRequest_BindQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ContextRequest_BindQuery_Call) Return(_a0 error) *ContextRequest_BindQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_BindQuery_Call) RunAndReturn(run func(interface{}) error) *ContextRequest_BindQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) Cookie(key string, defaultValue ...string) string {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type ContextRequest_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - key string
//   - defaultValue ...string
func (_e *ContextRequest_Expecter) Cookie(key interface{}, defaultValue ...interface{}) *ContextRequest_Cookie_Call {
	return &ContextRequest_Cookie_Call{Call: _e.mock.On("Cookie",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_Cookie_Call) Run(run func(key string, defaultValue ...string)) *ContextRequest_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Cookie_Call) Return(_a0 string) *ContextRequest_Cookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Cookie_Call) RunAndReturn(run func(string, ...string) string) *ContextRequest_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// File provides a mock function with given fields: name
func (_m *ContextRequest) File(name string) (filesystem.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 filesystem.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (filesystem.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) filesystem.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContextRequest_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type ContextRequest_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - name string
func (_e *ContextRequest_Expecter) File(name interface{}) *ContextRequest_File_Call {
	return &ContextRequest_File_Call{Call: _e.mock.On("File", name)}
}

func (_c *ContextRequest_File_Call) Run(run func(name string)) *ContextRequest_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_File_Call) Return(_a0 filesystem.File, _a1 error) *ContextRequest_File_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContextRequest_File_Call) RunAndReturn(run func(string) (filesystem.File, error)) *ContextRequest_File_Call {
	_c.Call.Return(run)
	return _c
}

// Files provides a mock function with given fields: name
func (_m *ContextRequest) Files(name string) ([]filesystem.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Files")
	}

	var r0 []filesystem.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]filesystem.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []filesystem.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]filesystem.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContextRequest_Files_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Files'
type ContextRequest_Files_Call struct {
	*mock.Call
}

// Files is a helper method to define mock.On call
//   - name string
func (_e *ContextRequest_Expecter) Files(name interface{}) *ContextRequest_Files_Call {
	return &ContextRequest_Files_Call{Call: _e.mock.On("Files", name)}
}

func (_c *ContextRequest_Files_Call) Run(run func(name string)) *ContextRequest_Files_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_Files_Call) Return(_a0 []filesystem.File, _a1 error) *ContextRequest_Files_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContextRequest_Files_Call) RunAndReturn(run func(string) ([]filesystem.File, error)) *ContextRequest_Files_Call {
	_c.Call.Return(run)
	return _c
}

// FullUrl provides a mock function with no fields
func (_m *ContextRequest) FullUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FullUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_FullUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullUrl'
type ContextRequest_FullUrl_Call struct {
	*mock.Call
}

// FullUrl is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) FullUrl() *ContextRequest_FullUrl_Call {
	return &ContextRequest_FullUrl_Call{Call: _e.mock.On("FullUrl")}
}

func (_c *ContextRequest_FullUrl_Call) Run(run func()) *ContextRequest_FullUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_FullUrl_Call) Return(_a0 string) *ContextRequest_FullUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_FullUrl_Call) RunAndReturn(run func() string) *ContextRequest_FullUrl_Call {
	_c.Call.Return(run)
	return _c
}

// HasSession provides a mock function with no fields
func (_m *ContextRequest) HasSession() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasSession")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ContextRequest_HasSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSession'
type ContextRequest_HasSession_Call struct {
	*mock.Call
}

// HasSession is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) HasSession() *ContextRequest_HasSession_Call {
	return &ContextRequest_HasSession_Call{Call: _e.mock.On("HasSession")}
}

func (_c *ContextRequest_HasSession_Call) Run(run func()) *ContextRequest_HasSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_HasSession_Call) Return(_a0 bool) *ContextRequest_HasSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_HasSession_Call) RunAndReturn(run func() bool) *ContextRequest_HasSession_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) Header(key string, defaultValue ...string) string {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type ContextRequest_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - key string
//   - defaultValue ...string
func (_e *ContextRequest_Expecter) Header(key interface{}, defaultValue ...interface{}) *ContextRequest_Header_Call {
	return &ContextRequest_Header_Call{Call: _e.mock.On("Header",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_Header_Call) Run(run func(key string, defaultValue ...string)) *ContextRequest_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Header_Call) Return(_a0 string) *ContextRequest_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Header_Call) RunAndReturn(run func(string, ...string) string) *ContextRequest_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Headers provides a mock function with no fields
func (_m *ContextRequest) Headers() nethttp.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 nethttp.Header
	if rf, ok := ret.Get(0).(func() nethttp.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nethttp.Header)
		}
	}

	return r0
}

// ContextRequest_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type ContextRequest_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Headers() *ContextRequest_Headers_Call {
	return &ContextRequest_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *ContextRequest_Headers_Call) Run(run func()) *ContextRequest_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Headers_Call) Return(_a0 nethttp.Header) *ContextRequest_Headers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Headers_Call) RunAndReturn(run func() nethttp.Header) *ContextRequest_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *ContextRequest) Host() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type ContextRequest_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Host() *ContextRequest_Host_Call {
	return &ContextRequest_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *ContextRequest_Host_Call) Run(run func()) *ContextRequest_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Host_Call) Return(_a0 string) *ContextRequest_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Host_Call) RunAndReturn(run func() string) *ContextRequest_Host_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with no fields
func (_m *ContextRequest) Info() http.Info {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 http.Info
	if rf, ok := ret.Get(0).(func() http.Info); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(http.Info)
	}

	return r0
}

// ContextRequest_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ContextRequest_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Info() *ContextRequest_Info_Call {
	return &ContextRequest_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *ContextRequest_Info_Call) Run(run func()) *ContextRequest_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Info_Call) Return(_a0 http.Info) *ContextRequest_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Info_Call) RunAndReturn(run func() http.Info) *ContextRequest_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Input provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) Input(key string, defaultValue ...string) string {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Input")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Input_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Input'
type ContextRequest_Input_Call struct {
	*mock.Call
}

// Input is a helper method to define mock.On call
//   - key string
//   - defaultValue ...string
func (_e *ContextRequest_Expecter) Input(key interface{}, defaultValue ...interface{}) *ContextRequest_Input_Call {
	return &ContextRequest_Input_Call{Call: _e.mock.On("Input",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_Input_Call) Run(run func(key string, defaultValue ...string)) *ContextRequest_Input_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Input_Call) Return(_a0 string) *ContextRequest_Input_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Input_Call) RunAndReturn(run func(string, ...string) string) *ContextRequest_Input_Call {
	_c.Call.Return(run)
	return _c
}

// InputArray provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputArray(key string, defaultValue ...[]string) []string {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...[]string) []string); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ContextRequest_InputArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputArray'
type ContextRequest_InputArray_Call struct {
	*mock.Call
}

// InputArray is a helper method to define mock.On call
//   - key string
//   - defaultValue ...[]string
func (_e *ContextRequest_Expecter) InputArray(key interface{}, defaultValue ...interface{}) *ContextRequest_InputArray_Call {
	return &ContextRequest_InputArray_Call{Call: _e.mock.On("InputArray",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputArray_Call) Run(run func(key string, defaultValue ...[]string)) *ContextRequest_InputArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([][]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.([]string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputArray_Call) Return(_a0 []string) *ContextRequest_InputArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputArray_Call) RunAndReturn(run func(string, ...[]string) []string) *ContextRequest_InputArray_Call {
	_c.Call.Return(run)
	return _c
}

// InputBool provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputBool(key string, defaultValue ...bool) bool {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...bool) bool); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ContextRequest_InputBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputBool'
type ContextRequest_InputBool_Call struct {
	*mock.Call
}

// InputBool is a helper method to define mock.On call
//   - key string
//   - defaultValue ...bool
func (_e *ContextRequest_Expecter) InputBool(key interface{}, defaultValue ...interface{}) *ContextRequest_InputBool_Call {
	return &ContextRequest_InputBool_Call{Call: _e.mock.On("InputBool",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputBool_Call) Run(run func(key string, defaultValue ...bool)) *ContextRequest_InputBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputBool_Call) Return(_a0 bool) *ContextRequest_InputBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputBool_Call) RunAndReturn(run func(string, ...bool) bool) *ContextRequest_InputBool_Call {
	_c.Call.Return(run)
	return _c
}

// InputInt provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputInt(key string, defaultValue ...int) int {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...int) int); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ContextRequest_InputInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputInt'
type ContextRequest_InputInt_Call struct {
	*mock.Call
}

// InputInt is a helper method to define mock.On call
//   - key string
//   - defaultValue ...int
func (_e *ContextRequest_Expecter) InputInt(key interface{}, defaultValue ...interface{}) *ContextRequest_InputInt_Call {
	return &ContextRequest_InputInt_Call{Call: _e.mock.On("InputInt",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputInt_Call) Run(run func(key string, defaultValue ...int)) *ContextRequest_InputInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputInt_Call) Return(_a0 int) *ContextRequest_InputInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputInt_Call) RunAndReturn(run func(string, ...int) int) *ContextRequest_InputInt_Call {
	_c.Call.Return(run)
	return _c
}

// InputInt64 provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputInt64(key string, defaultValue ...int64) int64 {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...int64) int64); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ContextRequest_InputInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputInt64'
type ContextRequest_InputInt64_Call struct {
	*mock.Call
}

// InputInt64 is a helper method to define mock.On call
//   - key string
//   - defaultValue ...int64
func (_e *ContextRequest_Expecter) InputInt64(key interface{}, defaultValue ...interface{}) *ContextRequest_InputInt64_Call {
	return &ContextRequest_InputInt64_Call{Call: _e.mock.On("InputInt64",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputInt64_Call) Run(run func(key string, defaultValue ...int64)) *ContextRequest_InputInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputInt64_Call) Return(_a0 int64) *ContextRequest_InputInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputInt64_Call) RunAndReturn(run func(string, ...int64) int64) *ContextRequest_InputInt64_Call {
	_c.Call.Return(run)
	return _c
}

// InputMap provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputMap(key string, defaultValue ...map[string]interface{}) map[string]interface{} {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputMap")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, ...map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// ContextRequest_InputMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputMap'
type ContextRequest_InputMap_Call struct {
	*mock.Call
}

// InputMap is a helper method to define mock.On call
//   - key string
//   - defaultValue ...map[string]interface{}
func (_e *ContextRequest_Expecter) InputMap(key interface{}, defaultValue ...interface{}) *ContextRequest_InputMap_Call {
	return &ContextRequest_InputMap_Call{Call: _e.mock.On("InputMap",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputMap_Call) Run(run func(key string, defaultValue ...map[string]interface{})) *ContextRequest_InputMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]map[string]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(map[string]interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputMap_Call) Return(_a0 map[string]interface{}) *ContextRequest_InputMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputMap_Call) RunAndReturn(run func(string, ...map[string]interface{}) map[string]interface{}) *ContextRequest_InputMap_Call {
	_c.Call.Return(run)
	return _c
}

// InputMapArray provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) InputMapArray(key string, defaultValue ...[]map[string]interface{}) []map[string]interface{} {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InputMapArray")
	}

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, ...[]map[string]interface{}) []map[string]interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// ContextRequest_InputMapArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputMapArray'
type ContextRequest_InputMapArray_Call struct {
	*mock.Call
}

// InputMapArray is a helper method to define mock.On call
//   - key string
//   - defaultValue ...[]map[string]interface{}
func (_e *ContextRequest_Expecter) InputMapArray(key interface{}, defaultValue ...interface{}) *ContextRequest_InputMapArray_Call {
	return &ContextRequest_InputMapArray_Call{Call: _e.mock.On("InputMapArray",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_InputMapArray_Call) Run(run func(key string, defaultValue ...[]map[string]interface{})) *ContextRequest_InputMapArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([][]map[string]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.([]map[string]interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_InputMapArray_Call) Return(_a0 []map[string]interface{}) *ContextRequest_InputMapArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_InputMapArray_Call) RunAndReturn(run func(string, ...[]map[string]interface{}) []map[string]interface{}) *ContextRequest_InputMapArray_Call {
	_c.Call.Return(run)
	return _c
}

// Ip provides a mock function with no fields
func (_m *ContextRequest) Ip() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ip")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Ip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ip'
type ContextRequest_Ip_Call struct {
	*mock.Call
}

// Ip is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Ip() *ContextRequest_Ip_Call {
	return &ContextRequest_Ip_Call{Call: _e.mock.On("Ip")}
}

func (_c *ContextRequest_Ip_Call) Run(run func()) *ContextRequest_Ip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Ip_Call) Return(_a0 string) *ContextRequest_Ip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Ip_Call) RunAndReturn(run func() string) *ContextRequest_Ip_Call {
	_c.Call.Return(run)
	return _c
}

// Method provides a mock function with no fields
func (_m *ContextRequest) Method() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type ContextRequest_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Method() *ContextRequest_Method_Call {
	return &ContextRequest_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *ContextRequest_Method_Call) Run(run func()) *ContextRequest_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Method_Call) Return(_a0 string) *ContextRequest_Method_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Method_Call) RunAndReturn(run func() string) *ContextRequest_Method_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *ContextRequest) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ContextRequest_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Name() *ContextRequest_Name_Call {
	return &ContextRequest_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ContextRequest_Name_Call) Run(run func()) *ContextRequest_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Name_Call) Return(_a0 string) *ContextRequest_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Name_Call) RunAndReturn(run func() string) *ContextRequest_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *ContextRequest) Next() {
	_m.Called()
}

// ContextRequest_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type ContextRequest_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Next() *ContextRequest_Next_Call {
	return &ContextRequest_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *ContextRequest_Next_Call) Run(run func()) *ContextRequest_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Next_Call) Return() *ContextRequest_Next_Call {
	_c.Call.Return()
	return _c
}

func (_c *ContextRequest_Next_Call) RunAndReturn(run func()) *ContextRequest_Next_Call {
	_c.Run(run)
	return _c
}

// Origin provides a mock function with no fields
func (_m *ContextRequest) Origin() *nethttp.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Origin")
	}

	var r0 *nethttp.Request
	if rf, ok := ret.Get(0).(func() *nethttp.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Request)
		}
	}

	return r0
}

// ContextRequest_Origin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Origin'
type ContextRequest_Origin_Call struct {
	*mock.Call
}

// Origin is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Origin() *ContextRequest_Origin_Call {
	return &ContextRequest_Origin_Call{Call: _e.mock.On("Origin")}
}

func (_c *ContextRequest_Origin_Call) Run(run func()) *ContextRequest_Origin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Origin_Call) Return(_a0 *nethttp.Request) *ContextRequest_Origin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Origin_Call) RunAndReturn(run func() *nethttp.Request) *ContextRequest_Origin_Call {
	_c.Call.Return(run)
	return _c
}

// OriginPath provides a mock function with no fields
func (_m *ContextRequest) OriginPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_OriginPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginPath'
type ContextRequest_OriginPath_Call struct {
	*mock.Call
}

// OriginPath is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) OriginPath() *ContextRequest_OriginPath_Call {
	return &ContextRequest_OriginPath_Call{Call: _e.mock.On("OriginPath")}
}

func (_c *ContextRequest_OriginPath_Call) Run(run func()) *ContextRequest_OriginPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_OriginPath_Call) Return(_a0 string) *ContextRequest_OriginPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_OriginPath_Call) RunAndReturn(run func() string) *ContextRequest_OriginPath_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *ContextRequest) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type ContextRequest_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Path() *ContextRequest_Path_Call {
	return &ContextRequest_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *ContextRequest_Path_Call) Run(run func()) *ContextRequest_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Path_Call) Return(_a0 string) *ContextRequest_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Path_Call) RunAndReturn(run func() string) *ContextRequest_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Queries provides a mock function with no fields
func (_m *ContextRequest) Queries() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Queries")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ContextRequest_Queries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queries'
type ContextRequest_Queries_Call struct {
	*mock.Call
}

// Queries is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Queries() *ContextRequest_Queries_Call {
	return &ContextRequest_Queries_Call{Call: _e.mock.On("Queries")}
}

func (_c *ContextRequest_Queries_Call) Run(run func()) *ContextRequest_Queries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Queries_Call) Return(_a0 map[string]string) *ContextRequest_Queries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Queries_Call) RunAndReturn(run func() map[string]string) *ContextRequest_Queries_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) Query(key string, defaultValue ...string) string {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type ContextRequest_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - key string
//   - defaultValue ...string
func (_e *ContextRequest_Expecter) Query(key interface{}, defaultValue ...interface{}) *ContextRequest_Query_Call {
	return &ContextRequest_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_Query_Call) Run(run func(key string, defaultValue ...string)) *ContextRequest_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Query_Call) Return(_a0 string) *ContextRequest_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Query_Call) RunAndReturn(run func(string, ...string) string) *ContextRequest_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryArray provides a mock function with given fields: key
func (_m *ContextRequest) QueryArray(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for QueryArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ContextRequest_QueryArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryArray'
type ContextRequest_QueryArray_Call struct {
	*mock.Call
}

// QueryArray is a helper method to define mock.On call
//   - key string
func (_e *ContextRequest_Expecter) QueryArray(key interface{}) *ContextRequest_QueryArray_Call {
	return &ContextRequest_QueryArray_Call{Call: _e.mock.On("QueryArray", key)}
}

func (_c *ContextRequest_QueryArray_Call) Run(run func(key string)) *ContextRequest_QueryArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_QueryArray_Call) Return(_a0 []string) *ContextRequest_QueryArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_QueryArray_Call) RunAndReturn(run func(string) []string) *ContextRequest_QueryArray_Call {
	_c.Call.Return(run)
	return _c
}

// QueryBool provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) QueryBool(key string, defaultValue ...bool) bool {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...bool) bool); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ContextRequest_QueryBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryBool'
type ContextRequest_QueryBool_Call struct {
	*mock.Call
}

// QueryBool is a helper method to define mock.On call
//   - key string
//   - defaultValue ...bool
func (_e *ContextRequest_Expecter) QueryBool(key interface{}, defaultValue ...interface{}) *ContextRequest_QueryBool_Call {
	return &ContextRequest_QueryBool_Call{Call: _e.mock.On("QueryBool",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_QueryBool_Call) Run(run func(key string, defaultValue ...bool)) *ContextRequest_QueryBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_QueryBool_Call) Return(_a0 bool) *ContextRequest_QueryBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_QueryBool_Call) RunAndReturn(run func(string, ...bool) bool) *ContextRequest_QueryBool_Call {
	_c.Call.Return(run)
	return _c
}

// QueryInt provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) QueryInt(key string, defaultValue ...int) int {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...int) int); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ContextRequest_QueryInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryInt'
type ContextRequest_QueryInt_Call struct {
	*mock.Call
}

// QueryInt is a helper method to define mock.On call
//   - key string
//   - defaultValue ...int
func (_e *ContextRequest_Expecter) QueryInt(key interface{}, defaultValue ...interface{}) *ContextRequest_QueryInt_Call {
	return &ContextRequest_QueryInt_Call{Call: _e.mock.On("QueryInt",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_QueryInt_Call) Run(run func(key string, defaultValue ...int)) *ContextRequest_QueryInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_QueryInt_Call) Return(_a0 int) *ContextRequest_QueryInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_QueryInt_Call) RunAndReturn(run func(string, ...int) int) *ContextRequest_QueryInt_Call {
	_c.Call.Return(run)
	return _c
}

// QueryInt64 provides a mock function with given fields: key, defaultValue
func (_m *ContextRequest) QueryInt64(key string, defaultValue ...int64) int64 {
	_va := make([]interface{}, len(defaultValue))
	for _i := range defaultValue {
		_va[_i] = defaultValue[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...int64) int64); ok {
		r0 = rf(key, defaultValue...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ContextRequest_QueryInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryInt64'
type ContextRequest_QueryInt64_Call struct {
	*mock.Call
}

// QueryInt64 is a helper method to define mock.On call
//   - key string
//   - defaultValue ...int64
func (_e *ContextRequest_Expecter) QueryInt64(key interface{}, defaultValue ...interface{}) *ContextRequest_QueryInt64_Call {
	return &ContextRequest_QueryInt64_Call{Call: _e.mock.On("QueryInt64",
		append([]interface{}{key}, defaultValue...)...)}
}

func (_c *ContextRequest_QueryInt64_Call) Run(run func(key string, defaultValue ...int64)) *ContextRequest_QueryInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_QueryInt64_Call) Return(_a0 int64) *ContextRequest_QueryInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_QueryInt64_Call) RunAndReturn(run func(string, ...int64) int64) *ContextRequest_QueryInt64_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMap provides a mock function with given fields: key
func (_m *ContextRequest) QueryMap(key string) map[string]string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for QueryMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ContextRequest_QueryMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMap'
type ContextRequest_QueryMap_Call struct {
	*mock.Call
}

// QueryMap is a helper method to define mock.On call
//   - key string
func (_e *ContextRequest_Expecter) QueryMap(key interface{}) *ContextRequest_QueryMap_Call {
	return &ContextRequest_QueryMap_Call{Call: _e.mock.On("QueryMap", key)}
}

func (_c *ContextRequest_QueryMap_Call) Run(run func(key string)) *ContextRequest_QueryMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_QueryMap_Call) Return(_a0 map[string]string) *ContextRequest_QueryMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_QueryMap_Call) RunAndReturn(run func(string) map[string]string) *ContextRequest_QueryMap_Call {
	_c.Call.Return(run)
	return _c
}

// Route provides a mock function with given fields: key
func (_m *ContextRequest) Route(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type ContextRequest_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
//   - key string
func (_e *ContextRequest_Expecter) Route(key interface{}) *ContextRequest_Route_Call {
	return &ContextRequest_Route_Call{Call: _e.mock.On("Route", key)}
}

func (_c *ContextRequest_Route_Call) Run(run func(key string)) *ContextRequest_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_Route_Call) Return(_a0 string) *ContextRequest_Route_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Route_Call) RunAndReturn(run func(string) string) *ContextRequest_Route_Call {
	_c.Call.Return(run)
	return _c
}

// RouteInt provides a mock function with given fields: key
func (_m *ContextRequest) RouteInt(key string) int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RouteInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ContextRequest_RouteInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteInt'
type ContextRequest_RouteInt_Call struct {
	*mock.Call
}

// RouteInt is a helper method to define mock.On call
//   - key string
func (_e *ContextRequest_Expecter) RouteInt(key interface{}) *ContextRequest_RouteInt_Call {
	return &ContextRequest_RouteInt_Call{Call: _e.mock.On("RouteInt", key)}
}

func (_c *ContextRequest_RouteInt_Call) Run(run func(key string)) *ContextRequest_RouteInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_RouteInt_Call) Return(_a0 int) *ContextRequest_RouteInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_RouteInt_Call) RunAndReturn(run func(string) int) *ContextRequest_RouteInt_Call {
	_c.Call.Return(run)
	return _c
}

// RouteInt64 provides a mock function with given fields: key
func (_m *ContextRequest) RouteInt64(key string) int64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RouteInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ContextRequest_RouteInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteInt64'
type ContextRequest_RouteInt64_Call struct {
	*mock.Call
}

// RouteInt64 is a helper method to define mock.On call
//   - key string
func (_e *ContextRequest_Expecter) RouteInt64(key interface{}) *ContextRequest_RouteInt64_Call {
	return &ContextRequest_RouteInt64_Call{Call: _e.mock.On("RouteInt64", key)}
}

func (_c *ContextRequest_RouteInt64_Call) Run(run func(key string)) *ContextRequest_RouteInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextRequest_RouteInt64_Call) Return(_a0 int64) *ContextRequest_RouteInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_RouteInt64_Call) RunAndReturn(run func(string) int64) *ContextRequest_RouteInt64_Call {
	_c.Call.Return(run)
	return _c
}

// Session provides a mock function with no fields
func (_m *ContextRequest) Session() session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func() session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// ContextRequest_Session_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Session'
type ContextRequest_Session_Call struct {
	*mock.Call
}

// Session is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Session() *ContextRequest_Session_Call {
	return &ContextRequest_Session_Call{Call: _e.mock.On("Session")}
}

func (_c *ContextRequest_Session_Call) Run(run func()) *ContextRequest_Session_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Session_Call) Return(_a0 session.Session) *ContextRequest_Session_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Session_Call) RunAndReturn(run func() session.Session) *ContextRequest_Session_Call {
	_c.Call.Return(run)
	return _c
}

// SetSession provides a mock function with given fields: _a0
func (_m *ContextRequest) SetSession(_a0 session.Session) http.ContextRequest {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetSession")
	}

	var r0 http.ContextRequest
	if rf, ok := ret.Get(0).(func(session.Session) http.ContextRequest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.ContextRequest)
		}
	}

	return r0
}

// ContextRequest_SetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSession'
type ContextRequest_SetSession_Call struct {
	*mock.Call
}

// SetSession is a helper method to define mock.On call
//   - _a0 session.Session
func (_e *ContextRequest_Expecter) SetSession(_a0 interface{}) *ContextRequest_SetSession_Call {
	return &ContextRequest_SetSession_Call{Call: _e.mock.On("SetSession", _a0)}
}

func (_c *ContextRequest_SetSession_Call) Run(run func(_a0 session.Session)) *ContextRequest_SetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Session))
	})
	return _c
}

func (_c *ContextRequest_SetSession_Call) Return(_a0 http.ContextRequest) *ContextRequest_SetSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_SetSession_Call) RunAndReturn(run func(session.Session) http.ContextRequest) *ContextRequest_SetSession_Call {
	_c.Call.Return(run)
	return _c
}

// Url provides a mock function with no fields
func (_m *ContextRequest) Url() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Url")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ContextRequest_Url_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Url'
type ContextRequest_Url_Call struct {
	*mock.Call
}

// Url is a helper method to define mock.On call
func (_e *ContextRequest_Expecter) Url() *ContextRequest_Url_Call {
	return &ContextRequest_Url_Call{Call: _e.mock.On("Url")}
}

func (_c *ContextRequest_Url_Call) Run(run func()) *ContextRequest_Url_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextRequest_Url_Call) Return(_a0 string) *ContextRequest_Url_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextRequest_Url_Call) RunAndReturn(run func() string) *ContextRequest_Url_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: rules, options
func (_m *ContextRequest) Validate(rules map[string]string, options ...validation.Option) (validation.Validator, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rules)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 validation.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string, ...validation.Option) (validation.Validator, error)); ok {
		return rf(rules, options...)
	}
	if rf, ok := ret.Get(0).(func(map[string]string, ...validation.Option) validation.Validator); ok {
		r0 = rf(rules, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string, ...validation.Option) error); ok {
		r1 = rf(rules, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContextRequest_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ContextRequest_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - rules map[string]string
//   - options ...validation.Option
func (_e *ContextRequest_Expecter) Validate(rules interface{}, options ...interface{}) *ContextRequest_Validate_Call {
	return &ContextRequest_Validate_Call{Call: _e.mock.On("Validate",
		append([]interface{}{rules}, options...)...)}
}

func (_c *ContextRequest_Validate_Call) Run(run func(rules map[string]string, options ...validation.Option)) *ContextRequest_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]validation.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(validation.Option)
			}
		}
		run(args[0].(map[string]string), variadicArgs...)
	})
	return _c
}

func (_c *ContextRequest_Validate_Call) Return(_a0 validation.Validator, _a1 error) *ContextRequest_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContextRequest_Validate_Call) RunAndReturn(run func(map[string]string, ...validation.Option) (validation.Validator, error)) *ContextRequest_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRequest provides a mock function with given fields: request
func (_m *ContextRequest) ValidateRequest(request http.FormRequest) (validation.Errors, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRequest")
	}

	var r0 validation.Errors
	var r1 error
	if rf, ok := ret.Get(0).(func(http.FormRequest) (validation.Errors, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(http.FormRequest) validation.Errors); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.Errors)
		}
	}

	if rf, ok := ret.Get(1).(func(http.FormRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContextRequest_ValidateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRequest'
type ContextRequest_ValidateRequest_Call struct {
	*mock.Call
}

// ValidateRequest is a helper method to define mock.On call
//   - request http.FormRequest
func (_e *ContextRequest_Expecter) ValidateRequest(request interface{}) *ContextRequest_ValidateRequest_Call {
	return &ContextRequest_ValidateRequest_Call{Call: _e.mock.On("ValidateRequest", request)}
}

func (_c *ContextRequest_ValidateRequest_Call) Run(run func(request http.FormRequest)) *ContextRequest_ValidateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.FormRequest))
	})
	return _c
}

func (_c *ContextRequest_ValidateRequest_Call) Return(_a0 validation.Errors, _a1 error) *ContextRequest_ValidateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContextRequest_ValidateRequest_Call) RunAndReturn(run func(http.FormRequest) (validation.Errors, error)) *ContextRequest_ValidateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewContextRequest creates a new instance of ContextRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextRequest {
	mock := &ContextRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
