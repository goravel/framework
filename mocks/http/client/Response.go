// Code generated by mockery. DO NOT EDIT.

package client

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Response is an autogenerated mock type for the Response type
type Response struct {
	mock.Mock
}

type Response_Expecter struct {
	mock *mock.Mock
}

func (_m *Response) EXPECT() *Response_Expecter {
	return &Response_Expecter{mock: &_m.Mock}
}

// Accepted provides a mock function with no fields
func (_m *Response) Accepted() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Accepted")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Accepted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accepted'
type Response_Accepted_Call struct {
	*mock.Call
}

// Accepted is a helper method to define mock.On call
func (_e *Response_Expecter) Accepted() *Response_Accepted_Call {
	return &Response_Accepted_Call{Call: _e.mock.On("Accepted")}
}

func (_c *Response_Accepted_Call) Run(run func()) *Response_Accepted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Accepted_Call) Return(_a0 bool) *Response_Accepted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Accepted_Call) RunAndReturn(run func() bool) *Response_Accepted_Call {
	_c.Call.Return(run)
	return _c
}

// BadRequest provides a mock function with no fields
func (_m *Response) BadRequest() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BadRequest")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_BadRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BadRequest'
type Response_BadRequest_Call struct {
	*mock.Call
}

// BadRequest is a helper method to define mock.On call
func (_e *Response_Expecter) BadRequest() *Response_BadRequest_Call {
	return &Response_BadRequest_Call{Call: _e.mock.On("BadRequest")}
}

func (_c *Response_BadRequest_Call) Run(run func()) *Response_BadRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_BadRequest_Call) Return(_a0 bool) *Response_BadRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_BadRequest_Call) RunAndReturn(run func() bool) *Response_BadRequest_Call {
	_c.Call.Return(run)
	return _c
}

// Body provides a mock function with no fields
func (_m *Response) Body() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Response_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type Response_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
func (_e *Response_Expecter) Body() *Response_Body_Call {
	return &Response_Body_Call{Call: _e.mock.On("Body")}
}

func (_c *Response_Body_Call) Run(run func()) *Response_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Body_Call) Return(_a0 string, _a1 error) *Response_Body_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Response_Body_Call) RunAndReturn(run func() (string, error)) *Response_Body_Call {
	_c.Call.Return(run)
	return _c
}

// ClientError provides a mock function with no fields
func (_m *Response) ClientError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_ClientError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientError'
type Response_ClientError_Call struct {
	*mock.Call
}

// ClientError is a helper method to define mock.On call
func (_e *Response_Expecter) ClientError() *Response_ClientError_Call {
	return &Response_ClientError_Call{Call: _e.mock.On("ClientError")}
}

func (_c *Response_ClientError_Call) Run(run func()) *Response_ClientError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_ClientError_Call) Return(_a0 bool) *Response_ClientError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_ClientError_Call) RunAndReturn(run func() bool) *Response_ClientError_Call {
	_c.Call.Return(run)
	return _c
}

// Conflict provides a mock function with no fields
func (_m *Response) Conflict() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conflict")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Conflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conflict'
type Response_Conflict_Call struct {
	*mock.Call
}

// Conflict is a helper method to define mock.On call
func (_e *Response_Expecter) Conflict() *Response_Conflict_Call {
	return &Response_Conflict_Call{Call: _e.mock.On("Conflict")}
}

func (_c *Response_Conflict_Call) Run(run func()) *Response_Conflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Conflict_Call) Return(_a0 bool) *Response_Conflict_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Conflict_Call) RunAndReturn(run func() bool) *Response_Conflict_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *Response) Cookie(name string) *http.Cookie {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	return r0
}

// Response_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type Response_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *Response_Expecter) Cookie(name interface{}) *Response_Cookie_Call {
	return &Response_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *Response_Cookie_Call) Run(run func(name string)) *Response_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Response_Cookie_Call) Return(_a0 *http.Cookie) *Response_Cookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Cookie_Call) RunAndReturn(run func(string) *http.Cookie) *Response_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with no fields
func (_m *Response) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// Response_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type Response_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *Response_Expecter) Cookies() *Response_Cookies_Call {
	return &Response_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *Response_Cookies_Call) Run(run func()) *Response_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Cookies_Call) Return(_a0 []*http.Cookie) *Response_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *Response_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Created provides a mock function with no fields
func (_m *Response) Created() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Created")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Created_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Created'
type Response_Created_Call struct {
	*mock.Call
}

// Created is a helper method to define mock.On call
func (_e *Response_Expecter) Created() *Response_Created_Call {
	return &Response_Created_Call{Call: _e.mock.On("Created")}
}

func (_c *Response_Created_Call) Run(run func()) *Response_Created_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Created_Call) Return(_a0 bool) *Response_Created_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Created_Call) RunAndReturn(run func() bool) *Response_Created_Call {
	_c.Call.Return(run)
	return _c
}

// Failed provides a mock function with no fields
func (_m *Response) Failed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Failed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Failed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failed'
type Response_Failed_Call struct {
	*mock.Call
}

// Failed is a helper method to define mock.On call
func (_e *Response_Expecter) Failed() *Response_Failed_Call {
	return &Response_Failed_Call{Call: _e.mock.On("Failed")}
}

func (_c *Response_Failed_Call) Run(run func()) *Response_Failed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Failed_Call) Return(_a0 bool) *Response_Failed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Failed_Call) RunAndReturn(run func() bool) *Response_Failed_Call {
	_c.Call.Return(run)
	return _c
}

// Forbidden provides a mock function with no fields
func (_m *Response) Forbidden() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Forbidden")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Forbidden_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forbidden'
type Response_Forbidden_Call struct {
	*mock.Call
}

// Forbidden is a helper method to define mock.On call
func (_e *Response_Expecter) Forbidden() *Response_Forbidden_Call {
	return &Response_Forbidden_Call{Call: _e.mock.On("Forbidden")}
}

func (_c *Response_Forbidden_Call) Run(run func()) *Response_Forbidden_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Forbidden_Call) Return(_a0 bool) *Response_Forbidden_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Forbidden_Call) RunAndReturn(run func() bool) *Response_Forbidden_Call {
	_c.Call.Return(run)
	return _c
}

// Found provides a mock function with no fields
func (_m *Response) Found() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Found")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Found_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Found'
type Response_Found_Call struct {
	*mock.Call
}

// Found is a helper method to define mock.On call
func (_e *Response_Expecter) Found() *Response_Found_Call {
	return &Response_Found_Call{Call: _e.mock.On("Found")}
}

func (_c *Response_Found_Call) Run(run func()) *Response_Found_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Found_Call) Return(_a0 bool) *Response_Found_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Found_Call) RunAndReturn(run func() bool) *Response_Found_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: name
func (_m *Response) Header(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Response_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Response_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - name string
func (_e *Response_Expecter) Header(name interface{}) *Response_Header_Call {
	return &Response_Header_Call{Call: _e.mock.On("Header", name)}
}

func (_c *Response_Header_Call) Run(run func(name string)) *Response_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Response_Header_Call) Return(_a0 string) *Response_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Header_Call) RunAndReturn(run func(string) string) *Response_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Headers provides a mock function with no fields
func (_m *Response) Headers() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// Response_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type Response_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *Response_Expecter) Headers() *Response_Headers_Call {
	return &Response_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *Response_Headers_Call) Run(run func()) *Response_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Headers_Call) Return(_a0 http.Header) *Response_Headers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Headers_Call) RunAndReturn(run func() http.Header) *Response_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// Json provides a mock function with no fields
func (_m *Response) Json() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Json")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Response_Json_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Json'
type Response_Json_Call struct {
	*mock.Call
}

// Json is a helper method to define mock.On call
func (_e *Response_Expecter) Json() *Response_Json_Call {
	return &Response_Json_Call{Call: _e.mock.On("Json")}
}

func (_c *Response_Json_Call) Run(run func()) *Response_Json_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Json_Call) Return(_a0 map[string]interface{}, _a1 error) *Response_Json_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Response_Json_Call) RunAndReturn(run func() (map[string]interface{}, error)) *Response_Json_Call {
	_c.Call.Return(run)
	return _c
}

// MovedPermanently provides a mock function with no fields
func (_m *Response) MovedPermanently() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MovedPermanently")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_MovedPermanently_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MovedPermanently'
type Response_MovedPermanently_Call struct {
	*mock.Call
}

// MovedPermanently is a helper method to define mock.On call
func (_e *Response_Expecter) MovedPermanently() *Response_MovedPermanently_Call {
	return &Response_MovedPermanently_Call{Call: _e.mock.On("MovedPermanently")}
}

func (_c *Response_MovedPermanently_Call) Run(run func()) *Response_MovedPermanently_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_MovedPermanently_Call) Return(_a0 bool) *Response_MovedPermanently_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_MovedPermanently_Call) RunAndReturn(run func() bool) *Response_MovedPermanently_Call {
	_c.Call.Return(run)
	return _c
}

// NoContent provides a mock function with no fields
func (_m *Response) NoContent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoContent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_NoContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoContent'
type Response_NoContent_Call struct {
	*mock.Call
}

// NoContent is a helper method to define mock.On call
func (_e *Response_Expecter) NoContent() *Response_NoContent_Call {
	return &Response_NoContent_Call{Call: _e.mock.On("NoContent")}
}

func (_c *Response_NoContent_Call) Run(run func()) *Response_NoContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_NoContent_Call) Return(_a0 bool) *Response_NoContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_NoContent_Call) RunAndReturn(run func() bool) *Response_NoContent_Call {
	_c.Call.Return(run)
	return _c
}

// NotFound provides a mock function with no fields
func (_m *Response) NotFound() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotFound")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_NotFound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotFound'
type Response_NotFound_Call struct {
	*mock.Call
}

// NotFound is a helper method to define mock.On call
func (_e *Response_Expecter) NotFound() *Response_NotFound_Call {
	return &Response_NotFound_Call{Call: _e.mock.On("NotFound")}
}

func (_c *Response_NotFound_Call) Run(run func()) *Response_NotFound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_NotFound_Call) Return(_a0 bool) *Response_NotFound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_NotFound_Call) RunAndReturn(run func() bool) *Response_NotFound_Call {
	_c.Call.Return(run)
	return _c
}

// OK provides a mock function with no fields
func (_m *Response) OK() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OK")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_OK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OK'
type Response_OK_Call struct {
	*mock.Call
}

// OK is a helper method to define mock.On call
func (_e *Response_Expecter) OK() *Response_OK_Call {
	return &Response_OK_Call{Call: _e.mock.On("OK")}
}

func (_c *Response_OK_Call) Run(run func()) *Response_OK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_OK_Call) Return(_a0 bool) *Response_OK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_OK_Call) RunAndReturn(run func() bool) *Response_OK_Call {
	_c.Call.Return(run)
	return _c
}

// PaymentRequired provides a mock function with no fields
func (_m *Response) PaymentRequired() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PaymentRequired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_PaymentRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PaymentRequired'
type Response_PaymentRequired_Call struct {
	*mock.Call
}

// PaymentRequired is a helper method to define mock.On call
func (_e *Response_Expecter) PaymentRequired() *Response_PaymentRequired_Call {
	return &Response_PaymentRequired_Call{Call: _e.mock.On("PaymentRequired")}
}

func (_c *Response_PaymentRequired_Call) Run(run func()) *Response_PaymentRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_PaymentRequired_Call) Return(_a0 bool) *Response_PaymentRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_PaymentRequired_Call) RunAndReturn(run func() bool) *Response_PaymentRequired_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function with no fields
func (_m *Response) Redirect() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Redirect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type Response_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
func (_e *Response_Expecter) Redirect() *Response_Redirect_Call {
	return &Response_Redirect_Call{Call: _e.mock.On("Redirect")}
}

func (_c *Response_Redirect_Call) Run(run func()) *Response_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Redirect_Call) Return(_a0 bool) *Response_Redirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Redirect_Call) RunAndReturn(run func() bool) *Response_Redirect_Call {
	_c.Call.Return(run)
	return _c
}

// RequestTimeout provides a mock function with no fields
func (_m *Response) RequestTimeout() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestTimeout")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_RequestTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestTimeout'
type Response_RequestTimeout_Call struct {
	*mock.Call
}

// RequestTimeout is a helper method to define mock.On call
func (_e *Response_Expecter) RequestTimeout() *Response_RequestTimeout_Call {
	return &Response_RequestTimeout_Call{Call: _e.mock.On("RequestTimeout")}
}

func (_c *Response_RequestTimeout_Call) Run(run func()) *Response_RequestTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_RequestTimeout_Call) Return(_a0 bool) *Response_RequestTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_RequestTimeout_Call) RunAndReturn(run func() bool) *Response_RequestTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// ServerError provides a mock function with no fields
func (_m *Response) ServerError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_ServerError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerError'
type Response_ServerError_Call struct {
	*mock.Call
}

// ServerError is a helper method to define mock.On call
func (_e *Response_Expecter) ServerError() *Response_ServerError_Call {
	return &Response_ServerError_Call{Call: _e.mock.On("ServerError")}
}

func (_c *Response_ServerError_Call) Run(run func()) *Response_ServerError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_ServerError_Call) Return(_a0 bool) *Response_ServerError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_ServerError_Call) RunAndReturn(run func() bool) *Response_ServerError_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *Response) Status() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Response_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Response_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Response_Expecter) Status() *Response_Status_Call {
	return &Response_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Response_Status_Call) Run(run func()) *Response_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Status_Call) Return(_a0 int) *Response_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Status_Call) RunAndReturn(run func() int) *Response_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Successful provides a mock function with no fields
func (_m *Response) Successful() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Successful")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Successful_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Successful'
type Response_Successful_Call struct {
	*mock.Call
}

// Successful is a helper method to define mock.On call
func (_e *Response_Expecter) Successful() *Response_Successful_Call {
	return &Response_Successful_Call{Call: _e.mock.On("Successful")}
}

func (_c *Response_Successful_Call) Run(run func()) *Response_Successful_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Successful_Call) Return(_a0 bool) *Response_Successful_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Successful_Call) RunAndReturn(run func() bool) *Response_Successful_Call {
	_c.Call.Return(run)
	return _c
}

// TooManyRequests provides a mock function with no fields
func (_m *Response) TooManyRequests() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TooManyRequests")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_TooManyRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TooManyRequests'
type Response_TooManyRequests_Call struct {
	*mock.Call
}

// TooManyRequests is a helper method to define mock.On call
func (_e *Response_Expecter) TooManyRequests() *Response_TooManyRequests_Call {
	return &Response_TooManyRequests_Call{Call: _e.mock.On("TooManyRequests")}
}

func (_c *Response_TooManyRequests_Call) Run(run func()) *Response_TooManyRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_TooManyRequests_Call) Return(_a0 bool) *Response_TooManyRequests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_TooManyRequests_Call) RunAndReturn(run func() bool) *Response_TooManyRequests_Call {
	_c.Call.Return(run)
	return _c
}

// Unauthorized provides a mock function with no fields
func (_m *Response) Unauthorized() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unauthorized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Unauthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unauthorized'
type Response_Unauthorized_Call struct {
	*mock.Call
}

// Unauthorized is a helper method to define mock.On call
func (_e *Response_Expecter) Unauthorized() *Response_Unauthorized_Call {
	return &Response_Unauthorized_Call{Call: _e.mock.On("Unauthorized")}
}

func (_c *Response_Unauthorized_Call) Run(run func()) *Response_Unauthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Unauthorized_Call) Return(_a0 bool) *Response_Unauthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Unauthorized_Call) RunAndReturn(run func() bool) *Response_Unauthorized_Call {
	_c.Call.Return(run)
	return _c
}

// UnprocessableEntity provides a mock function with no fields
func (_m *Response) UnprocessableEntity() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnprocessableEntity")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_UnprocessableEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnprocessableEntity'
type Response_UnprocessableEntity_Call struct {
	*mock.Call
}

// UnprocessableEntity is a helper method to define mock.On call
func (_e *Response_Expecter) UnprocessableEntity() *Response_UnprocessableEntity_Call {
	return &Response_UnprocessableEntity_Call{Call: _e.mock.On("UnprocessableEntity")}
}

func (_c *Response_UnprocessableEntity_Call) Run(run func()) *Response_UnprocessableEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_UnprocessableEntity_Call) Return(_a0 bool) *Response_UnprocessableEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_UnprocessableEntity_Call) RunAndReturn(run func() bool) *Response_UnprocessableEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponse creates a new instance of Response. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Response {
	mock := &Response{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
