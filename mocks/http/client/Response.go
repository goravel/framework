// Code generated by mockery. DO NOT EDIT.

package client

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Response is an autogenerated mock type for the Response type
type Response struct {
	mock.Mock
}

type Response_Expecter struct {
	mock *mock.Mock
}

func (_m *Response) EXPECT() *Response_Expecter {
	return &Response_Expecter{mock: &_m.Mock}
}

// Body provides a mock function with no fields
func (_m *Response) Body() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Response_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type Response_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
func (_e *Response_Expecter) Body() *Response_Body_Call {
	return &Response_Body_Call{Call: _e.mock.On("Body")}
}

func (_c *Response_Body_Call) Run(run func()) *Response_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Body_Call) Return(_a0 string, _a1 error) *Response_Body_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Response_Body_Call) RunAndReturn(run func() (string, error)) *Response_Body_Call {
	_c.Call.Return(run)
	return _c
}

// ClientError provides a mock function with no fields
func (_m *Response) ClientError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_ClientError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientError'
type Response_ClientError_Call struct {
	*mock.Call
}

// ClientError is a helper method to define mock.On call
func (_e *Response_Expecter) ClientError() *Response_ClientError_Call {
	return &Response_ClientError_Call{Call: _e.mock.On("ClientError")}
}

func (_c *Response_ClientError_Call) Run(run func()) *Response_ClientError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_ClientError_Call) Return(_a0 bool) *Response_ClientError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_ClientError_Call) RunAndReturn(run func() bool) *Response_ClientError_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *Response) Cookie(name string) *http.Cookie {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	return r0
}

// Response_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type Response_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *Response_Expecter) Cookie(name interface{}) *Response_Cookie_Call {
	return &Response_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *Response_Cookie_Call) Run(run func(name string)) *Response_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Response_Cookie_Call) Return(_a0 *http.Cookie) *Response_Cookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Cookie_Call) RunAndReturn(run func(string) *http.Cookie) *Response_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with no fields
func (_m *Response) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// Response_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type Response_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *Response_Expecter) Cookies() *Response_Cookies_Call {
	return &Response_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *Response_Cookies_Call) Run(run func()) *Response_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Cookies_Call) Return(_a0 []*http.Cookie) *Response_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *Response_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Failed provides a mock function with no fields
func (_m *Response) Failed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Failed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Failed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failed'
type Response_Failed_Call struct {
	*mock.Call
}

// Failed is a helper method to define mock.On call
func (_e *Response_Expecter) Failed() *Response_Failed_Call {
	return &Response_Failed_Call{Call: _e.mock.On("Failed")}
}

func (_c *Response_Failed_Call) Run(run func()) *Response_Failed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Failed_Call) Return(_a0 bool) *Response_Failed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Failed_Call) RunAndReturn(run func() bool) *Response_Failed_Call {
	_c.Call.Return(run)
	return _c
}

// Headers provides a mock function with no fields
func (_m *Response) Headers() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// Response_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type Response_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *Response_Expecter) Headers() *Response_Headers_Call {
	return &Response_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *Response_Headers_Call) Run(run func()) *Response_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Headers_Call) Return(_a0 http.Header) *Response_Headers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Headers_Call) RunAndReturn(run func() http.Header) *Response_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// Json provides a mock function with no fields
func (_m *Response) Json() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Json")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Response_Json_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Json'
type Response_Json_Call struct {
	*mock.Call
}

// Json is a helper method to define mock.On call
func (_e *Response_Expecter) Json() *Response_Json_Call {
	return &Response_Json_Call{Call: _e.mock.On("Json")}
}

func (_c *Response_Json_Call) Run(run func()) *Response_Json_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Json_Call) Return(_a0 map[string]interface{}, _a1 error) *Response_Json_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Response_Json_Call) RunAndReturn(run func() (map[string]interface{}, error)) *Response_Json_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function with no fields
func (_m *Response) Redirect() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Redirect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type Response_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
func (_e *Response_Expecter) Redirect() *Response_Redirect_Call {
	return &Response_Redirect_Call{Call: _e.mock.On("Redirect")}
}

func (_c *Response_Redirect_Call) Run(run func()) *Response_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Redirect_Call) Return(_a0 bool) *Response_Redirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Redirect_Call) RunAndReturn(run func() bool) *Response_Redirect_Call {
	_c.Call.Return(run)
	return _c
}

// ServerError provides a mock function with no fields
func (_m *Response) ServerError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_ServerError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerError'
type Response_ServerError_Call struct {
	*mock.Call
}

// ServerError is a helper method to define mock.On call
func (_e *Response_Expecter) ServerError() *Response_ServerError_Call {
	return &Response_ServerError_Call{Call: _e.mock.On("ServerError")}
}

func (_c *Response_ServerError_Call) Run(run func()) *Response_ServerError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_ServerError_Call) Return(_a0 bool) *Response_ServerError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_ServerError_Call) RunAndReturn(run func() bool) *Response_ServerError_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *Response) Status() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Response_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Response_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Response_Expecter) Status() *Response_Status_Call {
	return &Response_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Response_Status_Call) Run(run func()) *Response_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Status_Call) Return(_a0 int) *Response_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Status_Call) RunAndReturn(run func() int) *Response_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Successful provides a mock function with no fields
func (_m *Response) Successful() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Successful")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Response_Successful_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Successful'
type Response_Successful_Call struct {
	*mock.Call
}

// Successful is a helper method to define mock.On call
func (_e *Response_Expecter) Successful() *Response_Successful_Call {
	return &Response_Successful_Call{Call: _e.mock.On("Successful")}
}

func (_c *Response_Successful_Call) Run(run func()) *Response_Successful_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Successful_Call) Return(_a0 bool) *Response_Successful_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Response_Successful_Call) RunAndReturn(run func() bool) *Response_Successful_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponse creates a new instance of Response. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Response {
	mock := &Response{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
