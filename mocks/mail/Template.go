// Code generated by mockery. DO NOT EDIT.

package mail

import mock "github.com/stretchr/testify/mock"

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

type Template_Expecter struct {
	mock *mock.Mock
}

func (_m *Template) EXPECT() *Template_Expecter {
	return &Template_Expecter{mock: &_m.Mock}
}

// Render provides a mock function with given fields: path, data
func (_m *Template) Render(path string, data interface{}) (string, error) {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (string, error)); ok {
		return rf(path, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(path, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Template_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - path string
//   - data interface{}
func (_e *Template_Expecter) Render(path interface{}, data interface{}) *Template_Render_Call {
	return &Template_Render_Call{Call: _e.mock.On("Render", path, data)}
}

func (_c *Template_Render_Call) Run(run func(path string, data interface{})) *Template_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Template_Render_Call) Return(_a0 string, _a1 error) *Template_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Template_Render_Call) RunAndReturn(run func(string, interface{}) (string, error)) *Template_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
