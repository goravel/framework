// Code generated by mockery. DO NOT EDIT.

package foundation

import (
	auth "github.com/goravel/framework/contracts/auth"
	access "github.com/goravel/framework/contracts/auth/access"

	cache "github.com/goravel/framework/contracts/cache"

	client "github.com/goravel/framework/contracts/http/client"

	config "github.com/goravel/framework/contracts/config"

	console "github.com/goravel/framework/contracts/console"

	context "context"

	crypt "github.com/goravel/framework/contracts/crypt"

	db "github.com/goravel/framework/contracts/database/db"

	event "github.com/goravel/framework/contracts/event"

	filesystem "github.com/goravel/framework/contracts/filesystem"

	foundation "github.com/goravel/framework/contracts/foundation"

	grpc "github.com/goravel/framework/contracts/grpc"

	hash "github.com/goravel/framework/contracts/hash"

	http "github.com/goravel/framework/contracts/http"

	log "github.com/goravel/framework/contracts/log"

	mail "github.com/goravel/framework/contracts/mail"

	mock "github.com/stretchr/testify/mock"

	orm "github.com/goravel/framework/contracts/database/orm"

	process "github.com/goravel/framework/contracts/process"

	queue "github.com/goravel/framework/contracts/queue"

	route "github.com/goravel/framework/contracts/route"

	schedule "github.com/goravel/framework/contracts/schedule"

	schema "github.com/goravel/framework/contracts/database/schema"

	seeder "github.com/goravel/framework/contracts/database/seeder"

	session "github.com/goravel/framework/contracts/session"

	testing "github.com/goravel/framework/contracts/testing"

	translation "github.com/goravel/framework/contracts/translation"

	validation "github.com/goravel/framework/contracts/validation"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// About provides a mock function with given fields: section, items
func (_m *Application) About(section string, items []foundation.AboutItem) {
	_m.Called(section, items)
}

// Application_About_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'About'
type Application_About_Call struct {
	*mock.Call
}

// About is a helper method to define mock.On call
//   - section string
//   - items []foundation.AboutItem
func (_e *Application_Expecter) About(section interface{}, items interface{}) *Application_About_Call {
	return &Application_About_Call{Call: _e.mock.On("About", section, items)}
}

func (_c *Application_About_Call) Run(run func(section string, items []foundation.AboutItem)) *Application_About_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]foundation.AboutItem))
	})
	return _c
}

func (_c *Application_About_Call) Return() *Application_About_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_About_Call) RunAndReturn(run func(string, []foundation.AboutItem)) *Application_About_Call {
	_c.Run(run)
	return _c
}

// BasePath provides a mock function with given fields: path
func (_m *Application) BasePath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BasePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_BasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasePath'
type Application_BasePath_Call struct {
	*mock.Call
}

// BasePath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) BasePath(path ...interface{}) *Application_BasePath_Call {
	return &Application_BasePath_Call{Call: _e.mock.On("BasePath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_BasePath_Call) Run(run func(path ...string)) *Application_BasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_BasePath_Call) Return(_a0 string) *Application_BasePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_BasePath_Call) RunAndReturn(run func(...string) string) *Application_BasePath_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: key, callback
func (_m *Application) Bind(key interface{}, callback func(foundation.Application) (interface{}, error)) {
	_m.Called(key, callback)
}

// Application_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type Application_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - key interface{}
//   - callback func(foundation.Application)(interface{} , error)
func (_e *Application_Expecter) Bind(key interface{}, callback interface{}) *Application_Bind_Call {
	return &Application_Bind_Call{Call: _e.mock.On("Bind", key, callback)}
}

func (_c *Application_Bind_Call) Run(run func(key interface{}, callback func(foundation.Application) (interface{}, error))) *Application_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(func(foundation.Application) (interface{}, error)))
	})
	return _c
}

func (_c *Application_Bind_Call) Return() *Application_Bind_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Bind_Call) RunAndReturn(run func(interface{}, func(foundation.Application) (interface{}, error))) *Application_Bind_Call {
	_c.Run(run)
	return _c
}

// BindWith provides a mock function with given fields: key, callback
func (_m *Application) BindWith(key interface{}, callback func(foundation.Application, map[string]interface{}) (interface{}, error)) {
	_m.Called(key, callback)
}

// Application_BindWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindWith'
type Application_BindWith_Call struct {
	*mock.Call
}

// BindWith is a helper method to define mock.On call
//   - key interface{}
//   - callback func(foundation.Application , map[string]interface{})(interface{} , error)
func (_e *Application_Expecter) BindWith(key interface{}, callback interface{}) *Application_BindWith_Call {
	return &Application_BindWith_Call{Call: _e.mock.On("BindWith", key, callback)}
}

func (_c *Application_BindWith_Call) Run(run func(key interface{}, callback func(foundation.Application, map[string]interface{}) (interface{}, error))) *Application_BindWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(func(foundation.Application, map[string]interface{}) (interface{}, error)))
	})
	return _c
}

func (_c *Application_BindWith_Call) Return() *Application_BindWith_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_BindWith_Call) RunAndReturn(run func(interface{}, func(foundation.Application, map[string]interface{}) (interface{}, error))) *Application_BindWith_Call {
	_c.Run(run)
	return _c
}

// Bindings provides a mock function with no fields
func (_m *Application) Bindings() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bindings")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Application_Bindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bindings'
type Application_Bindings_Call struct {
	*mock.Call
}

// Bindings is a helper method to define mock.On call
func (_e *Application_Expecter) Bindings() *Application_Bindings_Call {
	return &Application_Bindings_Call{Call: _e.mock.On("Bindings")}
}

func (_c *Application_Bindings_Call) Run(run func()) *Application_Bindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Bindings_Call) Return(_a0 []interface{}) *Application_Bindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Bindings_Call) RunAndReturn(run func() []interface{}) *Application_Bindings_Call {
	_c.Call.Return(run)
	return _c
}

// Boot provides a mock function with no fields
func (_m *Application) Boot() {
	_m.Called()
}

// Application_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type Application_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
func (_e *Application_Expecter) Boot() *Application_Boot_Call {
	return &Application_Boot_Call{Call: _e.mock.On("Boot")}
}

func (_c *Application_Boot_Call) Run(run func()) *Application_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Boot_Call) Return() *Application_Boot_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Boot_Call) RunAndReturn(run func()) *Application_Boot_Call {
	_c.Run(run)
	return _c
}

// Commands provides a mock function with given fields: _a0
func (_m *Application) Commands(_a0 []console.Command) {
	_m.Called(_a0)
}

// Application_Commands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commands'
type Application_Commands_Call struct {
	*mock.Call
}

// Commands is a helper method to define mock.On call
//   - _a0 []console.Command
func (_e *Application_Expecter) Commands(_a0 interface{}) *Application_Commands_Call {
	return &Application_Commands_Call{Call: _e.mock.On("Commands", _a0)}
}

func (_c *Application_Commands_Call) Run(run func(_a0 []console.Command)) *Application_Commands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]console.Command))
	})
	return _c
}

func (_c *Application_Commands_Call) Return() *Application_Commands_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Commands_Call) RunAndReturn(run func([]console.Command)) *Application_Commands_Call {
	_c.Run(run)
	return _c
}

// ConfigPath provides a mock function with given fields: path
func (_m *Application) ConfigPath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_ConfigPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigPath'
type Application_ConfigPath_Call struct {
	*mock.Call
}

// ConfigPath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) ConfigPath(path ...interface{}) *Application_ConfigPath_Call {
	return &Application_ConfigPath_Call{Call: _e.mock.On("ConfigPath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_ConfigPath_Call) Run(run func(path ...string)) *Application_ConfigPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_ConfigPath_Call) Return(_a0 string) *Application_ConfigPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ConfigPath_Call) RunAndReturn(run func(...string) string) *Application_ConfigPath_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *Application) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Application_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Application_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Application_Expecter) Context() *Application_Context_Call {
	return &Application_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Application_Context_Call) Run(run func()) *Application_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Context_Call) Return(_a0 context.Context) *Application_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Context_Call) RunAndReturn(run func() context.Context) *Application_Context_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentLocale provides a mock function with given fields: ctx
func (_m *Application) CurrentLocale(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CurrentLocale")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_CurrentLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentLocale'
type Application_CurrentLocale_Call struct {
	*mock.Call
}

// CurrentLocale is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Application_Expecter) CurrentLocale(ctx interface{}) *Application_CurrentLocale_Call {
	return &Application_CurrentLocale_Call{Call: _e.mock.On("CurrentLocale", ctx)}
}

func (_c *Application_CurrentLocale_Call) Run(run func(ctx context.Context)) *Application_CurrentLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_CurrentLocale_Call) Return(_a0 string) *Application_CurrentLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_CurrentLocale_Call) RunAndReturn(run func(context.Context) string) *Application_CurrentLocale_Call {
	_c.Call.Return(run)
	return _c
}

// DatabasePath provides a mock function with given fields: path
func (_m *Application) DatabasePath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DatabasePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_DatabasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabasePath'
type Application_DatabasePath_Call struct {
	*mock.Call
}

// DatabasePath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) DatabasePath(path ...interface{}) *Application_DatabasePath_Call {
	return &Application_DatabasePath_Call{Call: _e.mock.On("DatabasePath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_DatabasePath_Call) Run(run func(path ...string)) *Application_DatabasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_DatabasePath_Call) Return(_a0 string) *Application_DatabasePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_DatabasePath_Call) RunAndReturn(run func(...string) string) *Application_DatabasePath_Call {
	_c.Call.Return(run)
	return _c
}

// ExecutablePath provides a mock function with given fields: path
func (_m *Application) ExecutablePath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecutablePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_ExecutablePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutablePath'
type Application_ExecutablePath_Call struct {
	*mock.Call
}

// ExecutablePath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) ExecutablePath(path ...interface{}) *Application_ExecutablePath_Call {
	return &Application_ExecutablePath_Call{Call: _e.mock.On("ExecutablePath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_ExecutablePath_Call) Run(run func(path ...string)) *Application_ExecutablePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_ExecutablePath_Call) Return(_a0 string) *Application_ExecutablePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ExecutablePath_Call) RunAndReturn(run func(...string) string) *Application_ExecutablePath_Call {
	_c.Call.Return(run)
	return _c
}

// FacadesPath provides a mock function with given fields: path
func (_m *Application) FacadesPath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FacadesPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_FacadesPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FacadesPath'
type Application_FacadesPath_Call struct {
	*mock.Call
}

// FacadesPath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) FacadesPath(path ...interface{}) *Application_FacadesPath_Call {
	return &Application_FacadesPath_Call{Call: _e.mock.On("FacadesPath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_FacadesPath_Call) Run(run func(path ...string)) *Application_FacadesPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_FacadesPath_Call) Return(_a0 string) *Application_FacadesPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_FacadesPath_Call) RunAndReturn(run func(...string) string) *Application_FacadesPath_Call {
	_c.Call.Return(run)
	return _c
}

// Fresh provides a mock function with given fields: bindings
func (_m *Application) Fresh(bindings ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, bindings...)
	_m.Called(_ca...)
}

// Application_Fresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fresh'
type Application_Fresh_Call struct {
	*mock.Call
}

// Fresh is a helper method to define mock.On call
//   - bindings ...interface{}
func (_e *Application_Expecter) Fresh(bindings ...interface{}) *Application_Fresh_Call {
	return &Application_Fresh_Call{Call: _e.mock.On("Fresh",
		append([]interface{}{}, bindings...)...)}
}

func (_c *Application_Fresh_Call) Run(run func(bindings ...interface{})) *Application_Fresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_Fresh_Call) Return() *Application_Fresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Fresh_Call) RunAndReturn(run func(...interface{})) *Application_Fresh_Call {
	_c.Run(run)
	return _c
}

// GetJson provides a mock function with no fields
func (_m *Application) GetJson() foundation.Json {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJson")
	}

	var r0 foundation.Json
	if rf, ok := ret.Get(0).(func() foundation.Json); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.Json)
		}
	}

	return r0
}

// Application_GetJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJson'
type Application_GetJson_Call struct {
	*mock.Call
}

// GetJson is a helper method to define mock.On call
func (_e *Application_Expecter) GetJson() *Application_GetJson_Call {
	return &Application_GetJson_Call{Call: _e.mock.On("GetJson")}
}

func (_c *Application_GetJson_Call) Run(run func()) *Application_GetJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_GetJson_Call) Return(_a0 foundation.Json) *Application_GetJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_GetJson_Call) RunAndReturn(run func() foundation.Json) *Application_GetJson_Call {
	_c.Call.Return(run)
	return _c
}

// Instance provides a mock function with given fields: key, instance
func (_m *Application) Instance(key interface{}, instance interface{}) {
	_m.Called(key, instance)
}

// Application_Instance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instance'
type Application_Instance_Call struct {
	*mock.Call
}

// Instance is a helper method to define mock.On call
//   - key interface{}
//   - instance interface{}
func (_e *Application_Expecter) Instance(key interface{}, instance interface{}) *Application_Instance_Call {
	return &Application_Instance_Call{Call: _e.mock.On("Instance", key, instance)}
}

func (_c *Application_Instance_Call) Run(run func(key interface{}, instance interface{})) *Application_Instance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *Application_Instance_Call) Return() *Application_Instance_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Instance_Call) RunAndReturn(run func(interface{}, interface{})) *Application_Instance_Call {
	_c.Run(run)
	return _c
}

// IsLocale provides a mock function with given fields: ctx, locale
func (_m *Application) IsLocale(ctx context.Context, locale string) bool {
	ret := _m.Called(ctx, locale)

	if len(ret) == 0 {
		panic("no return value specified for IsLocale")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, locale)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Application_IsLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLocale'
type Application_IsLocale_Call struct {
	*mock.Call
}

// IsLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - locale string
func (_e *Application_Expecter) IsLocale(ctx interface{}, locale interface{}) *Application_IsLocale_Call {
	return &Application_IsLocale_Call{Call: _e.mock.On("IsLocale", ctx, locale)}
}

func (_c *Application_IsLocale_Call) Run(run func(ctx context.Context, locale string)) *Application_IsLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Application_IsLocale_Call) Return(_a0 bool) *Application_IsLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_IsLocale_Call) RunAndReturn(run func(context.Context, string) bool) *Application_IsLocale_Call {
	_c.Call.Return(run)
	return _c
}

// LangPath provides a mock function with given fields: path
func (_m *Application) LangPath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LangPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_LangPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LangPath'
type Application_LangPath_Call struct {
	*mock.Call
}

// LangPath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) LangPath(path ...interface{}) *Application_LangPath_Call {
	return &Application_LangPath_Call{Call: _e.mock.On("LangPath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_LangPath_Call) Run(run func(path ...string)) *Application_LangPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_LangPath_Call) Return(_a0 string) *Application_LangPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_LangPath_Call) RunAndReturn(run func(...string) string) *Application_LangPath_Call {
	_c.Call.Return(run)
	return _c
}

// Make provides a mock function with given fields: key
func (_m *Application) Make(key interface{}) (interface{}, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (interface{}, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type Application_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - key interface{}
func (_e *Application_Expecter) Make(key interface{}) *Application_Make_Call {
	return &Application_Make_Call{Call: _e.mock.On("Make", key)}
}

func (_c *Application_Make_Call) Run(run func(key interface{})) *Application_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Application_Make_Call) Return(_a0 interface{}, _a1 error) *Application_Make_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_Make_Call) RunAndReturn(run func(interface{}) (interface{}, error)) *Application_Make_Call {
	_c.Call.Return(run)
	return _c
}

// MakeArtisan provides a mock function with no fields
func (_m *Application) MakeArtisan() console.Artisan {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeArtisan")
	}

	var r0 console.Artisan
	if rf, ok := ret.Get(0).(func() console.Artisan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(console.Artisan)
		}
	}

	return r0
}

// Application_MakeArtisan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeArtisan'
type Application_MakeArtisan_Call struct {
	*mock.Call
}

// MakeArtisan is a helper method to define mock.On call
func (_e *Application_Expecter) MakeArtisan() *Application_MakeArtisan_Call {
	return &Application_MakeArtisan_Call{Call: _e.mock.On("MakeArtisan")}
}

func (_c *Application_MakeArtisan_Call) Run(run func()) *Application_MakeArtisan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeArtisan_Call) Return(_a0 console.Artisan) *Application_MakeArtisan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeArtisan_Call) RunAndReturn(run func() console.Artisan) *Application_MakeArtisan_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAuth provides a mock function with given fields: ctx
func (_m *Application) MakeAuth(ctx ...http.Context) auth.Auth {
	_va := make([]interface{}, len(ctx))
	for _i := range ctx {
		_va[_i] = ctx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MakeAuth")
	}

	var r0 auth.Auth
	if rf, ok := ret.Get(0).(func(...http.Context) auth.Auth); ok {
		r0 = rf(ctx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Auth)
		}
	}

	return r0
}

// Application_MakeAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAuth'
type Application_MakeAuth_Call struct {
	*mock.Call
}

// MakeAuth is a helper method to define mock.On call
//   - ctx ...http.Context
func (_e *Application_Expecter) MakeAuth(ctx ...interface{}) *Application_MakeAuth_Call {
	return &Application_MakeAuth_Call{Call: _e.mock.On("MakeAuth",
		append([]interface{}{}, ctx...)...)}
}

func (_c *Application_MakeAuth_Call) Run(run func(ctx ...http.Context)) *Application_MakeAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]http.Context, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(http.Context)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_MakeAuth_Call) Return(_a0 auth.Auth) *Application_MakeAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeAuth_Call) RunAndReturn(run func(...http.Context) auth.Auth) *Application_MakeAuth_Call {
	_c.Call.Return(run)
	return _c
}

// MakeCache provides a mock function with no fields
func (_m *Application) MakeCache() cache.Cache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeCache")
	}

	var r0 cache.Cache
	if rf, ok := ret.Get(0).(func() cache.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Cache)
		}
	}

	return r0
}

// Application_MakeCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeCache'
type Application_MakeCache_Call struct {
	*mock.Call
}

// MakeCache is a helper method to define mock.On call
func (_e *Application_Expecter) MakeCache() *Application_MakeCache_Call {
	return &Application_MakeCache_Call{Call: _e.mock.On("MakeCache")}
}

func (_c *Application_MakeCache_Call) Run(run func()) *Application_MakeCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeCache_Call) Return(_a0 cache.Cache) *Application_MakeCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeCache_Call) RunAndReturn(run func() cache.Cache) *Application_MakeCache_Call {
	_c.Call.Return(run)
	return _c
}

// MakeConfig provides a mock function with no fields
func (_m *Application) MakeConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// Application_MakeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeConfig'
type Application_MakeConfig_Call struct {
	*mock.Call
}

// MakeConfig is a helper method to define mock.On call
func (_e *Application_Expecter) MakeConfig() *Application_MakeConfig_Call {
	return &Application_MakeConfig_Call{Call: _e.mock.On("MakeConfig")}
}

func (_c *Application_MakeConfig_Call) Run(run func()) *Application_MakeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeConfig_Call) Return(_a0 config.Config) *Application_MakeConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeConfig_Call) RunAndReturn(run func() config.Config) *Application_MakeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// MakeCrypt provides a mock function with no fields
func (_m *Application) MakeCrypt() crypt.Crypt {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeCrypt")
	}

	var r0 crypt.Crypt
	if rf, ok := ret.Get(0).(func() crypt.Crypt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypt.Crypt)
		}
	}

	return r0
}

// Application_MakeCrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeCrypt'
type Application_MakeCrypt_Call struct {
	*mock.Call
}

// MakeCrypt is a helper method to define mock.On call
func (_e *Application_Expecter) MakeCrypt() *Application_MakeCrypt_Call {
	return &Application_MakeCrypt_Call{Call: _e.mock.On("MakeCrypt")}
}

func (_c *Application_MakeCrypt_Call) Run(run func()) *Application_MakeCrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeCrypt_Call) Return(_a0 crypt.Crypt) *Application_MakeCrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeCrypt_Call) RunAndReturn(run func() crypt.Crypt) *Application_MakeCrypt_Call {
	_c.Call.Return(run)
	return _c
}

// MakeDB provides a mock function with no fields
func (_m *Application) MakeDB() db.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeDB")
	}

	var r0 db.DB
	if rf, ok := ret.Get(0).(func() db.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DB)
		}
	}

	return r0
}

// Application_MakeDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeDB'
type Application_MakeDB_Call struct {
	*mock.Call
}

// MakeDB is a helper method to define mock.On call
func (_e *Application_Expecter) MakeDB() *Application_MakeDB_Call {
	return &Application_MakeDB_Call{Call: _e.mock.On("MakeDB")}
}

func (_c *Application_MakeDB_Call) Run(run func()) *Application_MakeDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeDB_Call) Return(_a0 db.DB) *Application_MakeDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeDB_Call) RunAndReturn(run func() db.DB) *Application_MakeDB_Call {
	_c.Call.Return(run)
	return _c
}

// MakeEvent provides a mock function with no fields
func (_m *Application) MakeEvent() event.Instance {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeEvent")
	}

	var r0 event.Instance
	if rf, ok := ret.Get(0).(func() event.Instance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Instance)
		}
	}

	return r0
}

// Application_MakeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeEvent'
type Application_MakeEvent_Call struct {
	*mock.Call
}

// MakeEvent is a helper method to define mock.On call
func (_e *Application_Expecter) MakeEvent() *Application_MakeEvent_Call {
	return &Application_MakeEvent_Call{Call: _e.mock.On("MakeEvent")}
}

func (_c *Application_MakeEvent_Call) Run(run func()) *Application_MakeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeEvent_Call) Return(_a0 event.Instance) *Application_MakeEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeEvent_Call) RunAndReturn(run func() event.Instance) *Application_MakeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// MakeGate provides a mock function with no fields
func (_m *Application) MakeGate() access.Gate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeGate")
	}

	var r0 access.Gate
	if rf, ok := ret.Get(0).(func() access.Gate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.Gate)
		}
	}

	return r0
}

// Application_MakeGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeGate'
type Application_MakeGate_Call struct {
	*mock.Call
}

// MakeGate is a helper method to define mock.On call
func (_e *Application_Expecter) MakeGate() *Application_MakeGate_Call {
	return &Application_MakeGate_Call{Call: _e.mock.On("MakeGate")}
}

func (_c *Application_MakeGate_Call) Run(run func()) *Application_MakeGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeGate_Call) Return(_a0 access.Gate) *Application_MakeGate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeGate_Call) RunAndReturn(run func() access.Gate) *Application_MakeGate_Call {
	_c.Call.Return(run)
	return _c
}

// MakeGrpc provides a mock function with no fields
func (_m *Application) MakeGrpc() grpc.Grpc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeGrpc")
	}

	var r0 grpc.Grpc
	if rf, ok := ret.Get(0).(func() grpc.Grpc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.Grpc)
		}
	}

	return r0
}

// Application_MakeGrpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeGrpc'
type Application_MakeGrpc_Call struct {
	*mock.Call
}

// MakeGrpc is a helper method to define mock.On call
func (_e *Application_Expecter) MakeGrpc() *Application_MakeGrpc_Call {
	return &Application_MakeGrpc_Call{Call: _e.mock.On("MakeGrpc")}
}

func (_c *Application_MakeGrpc_Call) Run(run func()) *Application_MakeGrpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeGrpc_Call) Return(_a0 grpc.Grpc) *Application_MakeGrpc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeGrpc_Call) RunAndReturn(run func() grpc.Grpc) *Application_MakeGrpc_Call {
	_c.Call.Return(run)
	return _c
}

// MakeHash provides a mock function with no fields
func (_m *Application) MakeHash() hash.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeHash")
	}

	var r0 hash.Hash
	if rf, ok := ret.Get(0).(func() hash.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hash.Hash)
		}
	}

	return r0
}

// Application_MakeHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeHash'
type Application_MakeHash_Call struct {
	*mock.Call
}

// MakeHash is a helper method to define mock.On call
func (_e *Application_Expecter) MakeHash() *Application_MakeHash_Call {
	return &Application_MakeHash_Call{Call: _e.mock.On("MakeHash")}
}

func (_c *Application_MakeHash_Call) Run(run func()) *Application_MakeHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeHash_Call) Return(_a0 hash.Hash) *Application_MakeHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeHash_Call) RunAndReturn(run func() hash.Hash) *Application_MakeHash_Call {
	_c.Call.Return(run)
	return _c
}

// MakeHttp provides a mock function with no fields
func (_m *Application) MakeHttp() client.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeHttp")
	}

	var r0 client.Request
	if rf, ok := ret.Get(0).(func() client.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Request)
		}
	}

	return r0
}

// Application_MakeHttp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeHttp'
type Application_MakeHttp_Call struct {
	*mock.Call
}

// MakeHttp is a helper method to define mock.On call
func (_e *Application_Expecter) MakeHttp() *Application_MakeHttp_Call {
	return &Application_MakeHttp_Call{Call: _e.mock.On("MakeHttp")}
}

func (_c *Application_MakeHttp_Call) Run(run func()) *Application_MakeHttp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeHttp_Call) Return(_a0 client.Request) *Application_MakeHttp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeHttp_Call) RunAndReturn(run func() client.Request) *Application_MakeHttp_Call {
	_c.Call.Return(run)
	return _c
}

// MakeLang provides a mock function with given fields: ctx
func (_m *Application) MakeLang(ctx context.Context) translation.Translator {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MakeLang")
	}

	var r0 translation.Translator
	if rf, ok := ret.Get(0).(func(context.Context) translation.Translator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(translation.Translator)
		}
	}

	return r0
}

// Application_MakeLang_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeLang'
type Application_MakeLang_Call struct {
	*mock.Call
}

// MakeLang is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Application_Expecter) MakeLang(ctx interface{}) *Application_MakeLang_Call {
	return &Application_MakeLang_Call{Call: _e.mock.On("MakeLang", ctx)}
}

func (_c *Application_MakeLang_Call) Run(run func(ctx context.Context)) *Application_MakeLang_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_MakeLang_Call) Return(_a0 translation.Translator) *Application_MakeLang_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeLang_Call) RunAndReturn(run func(context.Context) translation.Translator) *Application_MakeLang_Call {
	_c.Call.Return(run)
	return _c
}

// MakeLog provides a mock function with no fields
func (_m *Application) MakeLog() log.Log {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeLog")
	}

	var r0 log.Log
	if rf, ok := ret.Get(0).(func() log.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Log)
		}
	}

	return r0
}

// Application_MakeLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeLog'
type Application_MakeLog_Call struct {
	*mock.Call
}

// MakeLog is a helper method to define mock.On call
func (_e *Application_Expecter) MakeLog() *Application_MakeLog_Call {
	return &Application_MakeLog_Call{Call: _e.mock.On("MakeLog")}
}

func (_c *Application_MakeLog_Call) Run(run func()) *Application_MakeLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeLog_Call) Return(_a0 log.Log) *Application_MakeLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeLog_Call) RunAndReturn(run func() log.Log) *Application_MakeLog_Call {
	_c.Call.Return(run)
	return _c
}

// MakeMail provides a mock function with no fields
func (_m *Application) MakeMail() mail.Mail {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeMail")
	}

	var r0 mail.Mail
	if rf, ok := ret.Get(0).(func() mail.Mail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mail.Mail)
		}
	}

	return r0
}

// Application_MakeMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeMail'
type Application_MakeMail_Call struct {
	*mock.Call
}

// MakeMail is a helper method to define mock.On call
func (_e *Application_Expecter) MakeMail() *Application_MakeMail_Call {
	return &Application_MakeMail_Call{Call: _e.mock.On("MakeMail")}
}

func (_c *Application_MakeMail_Call) Run(run func()) *Application_MakeMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeMail_Call) Return(_a0 mail.Mail) *Application_MakeMail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeMail_Call) RunAndReturn(run func() mail.Mail) *Application_MakeMail_Call {
	_c.Call.Return(run)
	return _c
}

// MakeOrm provides a mock function with no fields
func (_m *Application) MakeOrm() orm.Orm {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeOrm")
	}

	var r0 orm.Orm
	if rf, ok := ret.Get(0).(func() orm.Orm); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Orm)
		}
	}

	return r0
}

// Application_MakeOrm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeOrm'
type Application_MakeOrm_Call struct {
	*mock.Call
}

// MakeOrm is a helper method to define mock.On call
func (_e *Application_Expecter) MakeOrm() *Application_MakeOrm_Call {
	return &Application_MakeOrm_Call{Call: _e.mock.On("MakeOrm")}
}

func (_c *Application_MakeOrm_Call) Run(run func()) *Application_MakeOrm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeOrm_Call) Return(_a0 orm.Orm) *Application_MakeOrm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeOrm_Call) RunAndReturn(run func() orm.Orm) *Application_MakeOrm_Call {
	_c.Call.Return(run)
	return _c
}

// MakeProcess provides a mock function with no fields
func (_m *Application) MakeProcess() process.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeProcess")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func() process.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Application_MakeProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeProcess'
type Application_MakeProcess_Call struct {
	*mock.Call
}

// MakeProcess is a helper method to define mock.On call
func (_e *Application_Expecter) MakeProcess() *Application_MakeProcess_Call {
	return &Application_MakeProcess_Call{Call: _e.mock.On("MakeProcess")}
}

func (_c *Application_MakeProcess_Call) Run(run func()) *Application_MakeProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeProcess_Call) Return(_a0 process.Process) *Application_MakeProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeProcess_Call) RunAndReturn(run func() process.Process) *Application_MakeProcess_Call {
	_c.Call.Return(run)
	return _c
}

// MakeQueue provides a mock function with no fields
func (_m *Application) MakeQueue() queue.Queue {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeQueue")
	}

	var r0 queue.Queue
	if rf, ok := ret.Get(0).(func() queue.Queue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queue.Queue)
		}
	}

	return r0
}

// Application_MakeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeQueue'
type Application_MakeQueue_Call struct {
	*mock.Call
}

// MakeQueue is a helper method to define mock.On call
func (_e *Application_Expecter) MakeQueue() *Application_MakeQueue_Call {
	return &Application_MakeQueue_Call{Call: _e.mock.On("MakeQueue")}
}

func (_c *Application_MakeQueue_Call) Run(run func()) *Application_MakeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeQueue_Call) Return(_a0 queue.Queue) *Application_MakeQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeQueue_Call) RunAndReturn(run func() queue.Queue) *Application_MakeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// MakeRateLimiter provides a mock function with no fields
func (_m *Application) MakeRateLimiter() http.RateLimiter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRateLimiter")
	}

	var r0 http.RateLimiter
	if rf, ok := ret.Get(0).(func() http.RateLimiter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.RateLimiter)
		}
	}

	return r0
}

// Application_MakeRateLimiter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRateLimiter'
type Application_MakeRateLimiter_Call struct {
	*mock.Call
}

// MakeRateLimiter is a helper method to define mock.On call
func (_e *Application_Expecter) MakeRateLimiter() *Application_MakeRateLimiter_Call {
	return &Application_MakeRateLimiter_Call{Call: _e.mock.On("MakeRateLimiter")}
}

func (_c *Application_MakeRateLimiter_Call) Run(run func()) *Application_MakeRateLimiter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeRateLimiter_Call) Return(_a0 http.RateLimiter) *Application_MakeRateLimiter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeRateLimiter_Call) RunAndReturn(run func() http.RateLimiter) *Application_MakeRateLimiter_Call {
	_c.Call.Return(run)
	return _c
}

// MakeRoute provides a mock function with no fields
func (_m *Application) MakeRoute() route.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRoute")
	}

	var r0 route.Route
	if rf, ok := ret.Get(0).(func() route.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Route)
		}
	}

	return r0
}

// Application_MakeRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRoute'
type Application_MakeRoute_Call struct {
	*mock.Call
}

// MakeRoute is a helper method to define mock.On call
func (_e *Application_Expecter) MakeRoute() *Application_MakeRoute_Call {
	return &Application_MakeRoute_Call{Call: _e.mock.On("MakeRoute")}
}

func (_c *Application_MakeRoute_Call) Run(run func()) *Application_MakeRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeRoute_Call) Return(_a0 route.Route) *Application_MakeRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeRoute_Call) RunAndReturn(run func() route.Route) *Application_MakeRoute_Call {
	_c.Call.Return(run)
	return _c
}

// MakeSchedule provides a mock function with no fields
func (_m *Application) MakeSchedule() schedule.Schedule {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeSchedule")
	}

	var r0 schedule.Schedule
	if rf, ok := ret.Get(0).(func() schedule.Schedule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Schedule)
		}
	}

	return r0
}

// Application_MakeSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeSchedule'
type Application_MakeSchedule_Call struct {
	*mock.Call
}

// MakeSchedule is a helper method to define mock.On call
func (_e *Application_Expecter) MakeSchedule() *Application_MakeSchedule_Call {
	return &Application_MakeSchedule_Call{Call: _e.mock.On("MakeSchedule")}
}

func (_c *Application_MakeSchedule_Call) Run(run func()) *Application_MakeSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeSchedule_Call) Return(_a0 schedule.Schedule) *Application_MakeSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeSchedule_Call) RunAndReturn(run func() schedule.Schedule) *Application_MakeSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// MakeSchema provides a mock function with no fields
func (_m *Application) MakeSchema() schema.Schema {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeSchema")
	}

	var r0 schema.Schema
	if rf, ok := ret.Get(0).(func() schema.Schema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.Schema)
		}
	}

	return r0
}

// Application_MakeSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeSchema'
type Application_MakeSchema_Call struct {
	*mock.Call
}

// MakeSchema is a helper method to define mock.On call
func (_e *Application_Expecter) MakeSchema() *Application_MakeSchema_Call {
	return &Application_MakeSchema_Call{Call: _e.mock.On("MakeSchema")}
}

func (_c *Application_MakeSchema_Call) Run(run func()) *Application_MakeSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeSchema_Call) Return(_a0 schema.Schema) *Application_MakeSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeSchema_Call) RunAndReturn(run func() schema.Schema) *Application_MakeSchema_Call {
	_c.Call.Return(run)
	return _c
}

// MakeSeeder provides a mock function with no fields
func (_m *Application) MakeSeeder() seeder.Facade {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeSeeder")
	}

	var r0 seeder.Facade
	if rf, ok := ret.Get(0).(func() seeder.Facade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(seeder.Facade)
		}
	}

	return r0
}

// Application_MakeSeeder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeSeeder'
type Application_MakeSeeder_Call struct {
	*mock.Call
}

// MakeSeeder is a helper method to define mock.On call
func (_e *Application_Expecter) MakeSeeder() *Application_MakeSeeder_Call {
	return &Application_MakeSeeder_Call{Call: _e.mock.On("MakeSeeder")}
}

func (_c *Application_MakeSeeder_Call) Run(run func()) *Application_MakeSeeder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeSeeder_Call) Return(_a0 seeder.Facade) *Application_MakeSeeder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeSeeder_Call) RunAndReturn(run func() seeder.Facade) *Application_MakeSeeder_Call {
	_c.Call.Return(run)
	return _c
}

// MakeSession provides a mock function with no fields
func (_m *Application) MakeSession() session.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeSession")
	}

	var r0 session.Manager
	if rf, ok := ret.Get(0).(func() session.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Manager)
		}
	}

	return r0
}

// Application_MakeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeSession'
type Application_MakeSession_Call struct {
	*mock.Call
}

// MakeSession is a helper method to define mock.On call
func (_e *Application_Expecter) MakeSession() *Application_MakeSession_Call {
	return &Application_MakeSession_Call{Call: _e.mock.On("MakeSession")}
}

func (_c *Application_MakeSession_Call) Run(run func()) *Application_MakeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeSession_Call) Return(_a0 session.Manager) *Application_MakeSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeSession_Call) RunAndReturn(run func() session.Manager) *Application_MakeSession_Call {
	_c.Call.Return(run)
	return _c
}

// MakeStorage provides a mock function with no fields
func (_m *Application) MakeStorage() filesystem.Storage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeStorage")
	}

	var r0 filesystem.Storage
	if rf, ok := ret.Get(0).(func() filesystem.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.Storage)
		}
	}

	return r0
}

// Application_MakeStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeStorage'
type Application_MakeStorage_Call struct {
	*mock.Call
}

// MakeStorage is a helper method to define mock.On call
func (_e *Application_Expecter) MakeStorage() *Application_MakeStorage_Call {
	return &Application_MakeStorage_Call{Call: _e.mock.On("MakeStorage")}
}

func (_c *Application_MakeStorage_Call) Run(run func()) *Application_MakeStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeStorage_Call) Return(_a0 filesystem.Storage) *Application_MakeStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeStorage_Call) RunAndReturn(run func() filesystem.Storage) *Application_MakeStorage_Call {
	_c.Call.Return(run)
	return _c
}

// MakeTesting provides a mock function with no fields
func (_m *Application) MakeTesting() testing.Testing {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeTesting")
	}

	var r0 testing.Testing
	if rf, ok := ret.Get(0).(func() testing.Testing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(testing.Testing)
		}
	}

	return r0
}

// Application_MakeTesting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeTesting'
type Application_MakeTesting_Call struct {
	*mock.Call
}

// MakeTesting is a helper method to define mock.On call
func (_e *Application_Expecter) MakeTesting() *Application_MakeTesting_Call {
	return &Application_MakeTesting_Call{Call: _e.mock.On("MakeTesting")}
}

func (_c *Application_MakeTesting_Call) Run(run func()) *Application_MakeTesting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeTesting_Call) Return(_a0 testing.Testing) *Application_MakeTesting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeTesting_Call) RunAndReturn(run func() testing.Testing) *Application_MakeTesting_Call {
	_c.Call.Return(run)
	return _c
}

// MakeValidation provides a mock function with no fields
func (_m *Application) MakeValidation() validation.Validation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeValidation")
	}

	var r0 validation.Validation
	if rf, ok := ret.Get(0).(func() validation.Validation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.Validation)
		}
	}

	return r0
}

// Application_MakeValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeValidation'
type Application_MakeValidation_Call struct {
	*mock.Call
}

// MakeValidation is a helper method to define mock.On call
func (_e *Application_Expecter) MakeValidation() *Application_MakeValidation_Call {
	return &Application_MakeValidation_Call{Call: _e.mock.On("MakeValidation")}
}

func (_c *Application_MakeValidation_Call) Run(run func()) *Application_MakeValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeValidation_Call) Return(_a0 validation.Validation) *Application_MakeValidation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeValidation_Call) RunAndReturn(run func() validation.Validation) *Application_MakeValidation_Call {
	_c.Call.Return(run)
	return _c
}

// MakeView provides a mock function with no fields
func (_m *Application) MakeView() http.View {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeView")
	}

	var r0 http.View
	if rf, ok := ret.Get(0).(func() http.View); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.View)
		}
	}

	return r0
}

// Application_MakeView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeView'
type Application_MakeView_Call struct {
	*mock.Call
}

// MakeView is a helper method to define mock.On call
func (_e *Application_Expecter) MakeView() *Application_MakeView_Call {
	return &Application_MakeView_Call{Call: _e.mock.On("MakeView")}
}

func (_c *Application_MakeView_Call) Run(run func()) *Application_MakeView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_MakeView_Call) Return(_a0 http.View) *Application_MakeView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_MakeView_Call) RunAndReturn(run func() http.View) *Application_MakeView_Call {
	_c.Call.Return(run)
	return _c
}

// MakeWith provides a mock function with given fields: key, parameters
func (_m *Application) MakeWith(key interface{}, parameters map[string]interface{}) (interface{}, error) {
	ret := _m.Called(key, parameters)

	if len(ret) == 0 {
		panic("no return value specified for MakeWith")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) (interface{}, error)); ok {
		return rf(key, parameters)
	}
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) interface{}); ok {
		r0 = rf(key, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, map[string]interface{}) error); ok {
		r1 = rf(key, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Application_MakeWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeWith'
type Application_MakeWith_Call struct {
	*mock.Call
}

// MakeWith is a helper method to define mock.On call
//   - key interface{}
//   - parameters map[string]interface{}
func (_e *Application_Expecter) MakeWith(key interface{}, parameters interface{}) *Application_MakeWith_Call {
	return &Application_MakeWith_Call{Call: _e.mock.On("MakeWith", key, parameters)}
}

func (_c *Application_MakeWith_Call) Run(run func(key interface{}, parameters map[string]interface{})) *Application_MakeWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Application_MakeWith_Call) Return(_a0 interface{}, _a1 error) *Application_MakeWith_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Application_MakeWith_Call) RunAndReturn(run func(interface{}, map[string]interface{}) (interface{}, error)) *Application_MakeWith_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields: path
func (_m *Application) Path(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type Application_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) Path(path ...interface{}) *Application_Path_Call {
	return &Application_Path_Call{Call: _e.mock.On("Path",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_Path_Call) Run(run func(path ...string)) *Application_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_Path_Call) Return(_a0 string) *Application_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Path_Call) RunAndReturn(run func(...string) string) *Application_Path_Call {
	_c.Call.Return(run)
	return _c
}

// PublicPath provides a mock function with given fields: path
func (_m *Application) PublicPath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublicPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_PublicPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicPath'
type Application_PublicPath_Call struct {
	*mock.Call
}

// PublicPath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) PublicPath(path ...interface{}) *Application_PublicPath_Call {
	return &Application_PublicPath_Call{Call: _e.mock.On("PublicPath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_PublicPath_Call) Run(run func(path ...string)) *Application_PublicPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_PublicPath_Call) Return(_a0 string) *Application_PublicPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_PublicPath_Call) RunAndReturn(run func(...string) string) *Application_PublicPath_Call {
	_c.Call.Return(run)
	return _c
}

// Publishes provides a mock function with given fields: packageName, paths, groups
func (_m *Application) Publishes(packageName string, paths map[string]string, groups ...string) {
	_va := make([]interface{}, len(groups))
	for _i := range groups {
		_va[_i] = groups[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, packageName, paths)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Application_Publishes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publishes'
type Application_Publishes_Call struct {
	*mock.Call
}

// Publishes is a helper method to define mock.On call
//   - packageName string
//   - paths map[string]string
//   - groups ...string
func (_e *Application_Expecter) Publishes(packageName interface{}, paths interface{}, groups ...interface{}) *Application_Publishes_Call {
	return &Application_Publishes_Call{Call: _e.mock.On("Publishes",
		append([]interface{}{packageName, paths}, groups...)...)}
}

func (_c *Application_Publishes_Call) Run(run func(packageName string, paths map[string]string, groups ...string)) *Application_Publishes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(map[string]string), variadicArgs...)
	})
	return _c
}

func (_c *Application_Publishes_Call) Return() *Application_Publishes_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Publishes_Call) RunAndReturn(run func(string, map[string]string, ...string)) *Application_Publishes_Call {
	_c.Run(run)
	return _c
}

// Refresh provides a mock function with no fields
func (_m *Application) Refresh() {
	_m.Called()
}

// Application_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Application_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
func (_e *Application_Expecter) Refresh() *Application_Refresh_Call {
	return &Application_Refresh_Call{Call: _e.mock.On("Refresh")}
}

func (_c *Application_Refresh_Call) Run(run func()) *Application_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Refresh_Call) Return() *Application_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Refresh_Call) RunAndReturn(run func()) *Application_Refresh_Call {
	_c.Run(run)
	return _c
}

// ResourcePath provides a mock function with given fields: path
func (_m *Application) ResourcePath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResourcePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_ResourcePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourcePath'
type Application_ResourcePath_Call struct {
	*mock.Call
}

// ResourcePath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) ResourcePath(path ...interface{}) *Application_ResourcePath_Call {
	return &Application_ResourcePath_Call{Call: _e.mock.On("ResourcePath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_ResourcePath_Call) Run(run func(path ...string)) *Application_ResourcePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_ResourcePath_Call) Return(_a0 string) *Application_ResourcePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ResourcePath_Call) RunAndReturn(run func(...string) string) *Application_ResourcePath_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: runners
func (_m *Application) Run(runners ...foundation.Runner) {
	_va := make([]interface{}, len(runners))
	for _i := range runners {
		_va[_i] = runners[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Application_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Application_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - runners ...foundation.Runner
func (_e *Application_Expecter) Run(runners ...interface{}) *Application_Run_Call {
	return &Application_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{}, runners...)...)}
}

func (_c *Application_Run_Call) Run(run func(runners ...foundation.Runner)) *Application_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]foundation.Runner, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(foundation.Runner)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_Run_Call) Return() *Application_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Run_Call) RunAndReturn(run func(...foundation.Runner)) *Application_Run_Call {
	_c.Run(run)
	return _c
}

// SetJson provides a mock function with given fields: json
func (_m *Application) SetJson(json foundation.Json) {
	_m.Called(json)
}

// Application_SetJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJson'
type Application_SetJson_Call struct {
	*mock.Call
}

// SetJson is a helper method to define mock.On call
//   - json foundation.Json
func (_e *Application_Expecter) SetJson(json interface{}) *Application_SetJson_Call {
	return &Application_SetJson_Call{Call: _e.mock.On("SetJson", json)}
}

func (_c *Application_SetJson_Call) Run(run func(json foundation.Json)) *Application_SetJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Json))
	})
	return _c
}

func (_c *Application_SetJson_Call) Return() *Application_SetJson_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_SetJson_Call) RunAndReturn(run func(foundation.Json)) *Application_SetJson_Call {
	_c.Run(run)
	return _c
}

// SetLocale provides a mock function with given fields: ctx, locale
func (_m *Application) SetLocale(ctx context.Context, locale string) context.Context {
	ret := _m.Called(ctx, locale)

	if len(ret) == 0 {
		panic("no return value specified for SetLocale")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Application_SetLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLocale'
type Application_SetLocale_Call struct {
	*mock.Call
}

// SetLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - locale string
func (_e *Application_Expecter) SetLocale(ctx interface{}, locale interface{}) *Application_SetLocale_Call {
	return &Application_SetLocale_Call{Call: _e.mock.On("SetLocale", ctx, locale)}
}

func (_c *Application_SetLocale_Call) Run(run func(ctx context.Context, locale string)) *Application_SetLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Application_SetLocale_Call) Return(_a0 context.Context) *Application_SetLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_SetLocale_Call) RunAndReturn(run func(context.Context, string) context.Context) *Application_SetLocale_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *Application) Shutdown() {
	_m.Called()
}

// Application_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Application_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *Application_Expecter) Shutdown() *Application_Shutdown_Call {
	return &Application_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *Application_Shutdown_Call) Run(run func()) *Application_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Shutdown_Call) Return() *Application_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Shutdown_Call) RunAndReturn(run func()) *Application_Shutdown_Call {
	_c.Run(run)
	return _c
}

// Singleton provides a mock function with given fields: key, callback
func (_m *Application) Singleton(key interface{}, callback func(foundation.Application) (interface{}, error)) {
	_m.Called(key, callback)
}

// Application_Singleton_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Singleton'
type Application_Singleton_Call struct {
	*mock.Call
}

// Singleton is a helper method to define mock.On call
//   - key interface{}
//   - callback func(foundation.Application)(interface{} , error)
func (_e *Application_Expecter) Singleton(key interface{}, callback interface{}) *Application_Singleton_Call {
	return &Application_Singleton_Call{Call: _e.mock.On("Singleton", key, callback)}
}

func (_c *Application_Singleton_Call) Run(run func(key interface{}, callback func(foundation.Application) (interface{}, error))) *Application_Singleton_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(func(foundation.Application) (interface{}, error)))
	})
	return _c
}

func (_c *Application_Singleton_Call) Return() *Application_Singleton_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Singleton_Call) RunAndReturn(run func(interface{}, func(foundation.Application) (interface{}, error))) *Application_Singleton_Call {
	_c.Run(run)
	return _c
}

// StoragePath provides a mock function with given fields: path
func (_m *Application) StoragePath(path ...string) string {
	_va := make([]interface{}, len(path))
	for _i := range path {
		_va[_i] = path[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StoragePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(path...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_StoragePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoragePath'
type Application_StoragePath_Call struct {
	*mock.Call
}

// StoragePath is a helper method to define mock.On call
//   - path ...string
func (_e *Application_Expecter) StoragePath(path ...interface{}) *Application_StoragePath_Call {
	return &Application_StoragePath_Call{Call: _e.mock.On("StoragePath",
		append([]interface{}{}, path...)...)}
}

func (_c *Application_StoragePath_Call) Run(run func(path ...string)) *Application_StoragePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Application_StoragePath_Call) Return(_a0 string) *Application_StoragePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_StoragePath_Call) RunAndReturn(run func(...string) string) *Application_StoragePath_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with no fields
func (_m *Application) Version() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Application_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type Application_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *Application_Expecter) Version() *Application_Version_Call {
	return &Application_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *Application_Version_Call) Run(run func()) *Application_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Version_Call) Return(_a0 string) *Application_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Version_Call) RunAndReturn(run func() string) *Application_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
