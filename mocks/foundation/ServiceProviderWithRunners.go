// Code generated by mockery. DO NOT EDIT.

package foundation

import (
	foundation "github.com/goravel/framework/contracts/foundation"
	mock "github.com/stretchr/testify/mock"
)

// ServiceProviderWithRunners is an autogenerated mock type for the ServiceProviderWithRunners type
type ServiceProviderWithRunners struct {
	mock.Mock
}

type ServiceProviderWithRunners_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceProviderWithRunners) EXPECT() *ServiceProviderWithRunners_Expecter {
	return &ServiceProviderWithRunners_Expecter{mock: &_m.Mock}
}

// Boot provides a mock function with given fields: app
func (_m *ServiceProviderWithRunners) Boot(app foundation.Application) {
	_m.Called(app)
}

// ServiceProviderWithRunners_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type ServiceProviderWithRunners_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ServiceProviderWithRunners_Expecter) Boot(app interface{}) *ServiceProviderWithRunners_Boot_Call {
	return &ServiceProviderWithRunners_Boot_Call{Call: _e.mock.On("Boot", app)}
}

func (_c *ServiceProviderWithRunners_Boot_Call) Run(run func(app foundation.Application)) *ServiceProviderWithRunners_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ServiceProviderWithRunners_Boot_Call) Return() *ServiceProviderWithRunners_Boot_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceProviderWithRunners_Boot_Call) RunAndReturn(run func(foundation.Application)) *ServiceProviderWithRunners_Boot_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: app
func (_m *ServiceProviderWithRunners) Register(app foundation.Application) {
	_m.Called(app)
}

// ServiceProviderWithRunners_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ServiceProviderWithRunners_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ServiceProviderWithRunners_Expecter) Register(app interface{}) *ServiceProviderWithRunners_Register_Call {
	return &ServiceProviderWithRunners_Register_Call{Call: _e.mock.On("Register", app)}
}

func (_c *ServiceProviderWithRunners_Register_Call) Run(run func(app foundation.Application)) *ServiceProviderWithRunners_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ServiceProviderWithRunners_Register_Call) Return() *ServiceProviderWithRunners_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceProviderWithRunners_Register_Call) RunAndReturn(run func(foundation.Application)) *ServiceProviderWithRunners_Register_Call {
	_c.Run(run)
	return _c
}

// Runners provides a mock function with given fields: app
func (_m *ServiceProviderWithRunners) Runners(app foundation.Application) []foundation.Runner {
	ret := _m.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for Runners")
	}

	var r0 []foundation.Runner
	if rf, ok := ret.Get(0).(func(foundation.Application) []foundation.Runner); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]foundation.Runner)
		}
	}

	return r0
}

// ServiceProviderWithRunners_Runners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Runners'
type ServiceProviderWithRunners_Runners_Call struct {
	*mock.Call
}

// Runners is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ServiceProviderWithRunners_Expecter) Runners(app interface{}) *ServiceProviderWithRunners_Runners_Call {
	return &ServiceProviderWithRunners_Runners_Call{Call: _e.mock.On("Runners", app)}
}

func (_c *ServiceProviderWithRunners_Runners_Call) Run(run func(app foundation.Application)) *ServiceProviderWithRunners_Runners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ServiceProviderWithRunners_Runners_Call) Return(_a0 []foundation.Runner) *ServiceProviderWithRunners_Runners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceProviderWithRunners_Runners_Call) RunAndReturn(run func(foundation.Application) []foundation.Runner) *ServiceProviderWithRunners_Runners_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceProviderWithRunners creates a new instance of ServiceProviderWithRunners. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceProviderWithRunners(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceProviderWithRunners {
	mock := &ServiceProviderWithRunners{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
