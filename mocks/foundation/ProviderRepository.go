// Code generated by mockery. DO NOT EDIT.

package foundation

import (
	foundation "github.com/goravel/framework/contracts/foundation"
	mock "github.com/stretchr/testify/mock"
)

// ProviderRepository is an autogenerated mock type for the ProviderRepository type
type ProviderRepository struct {
	mock.Mock
}

type ProviderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderRepository) EXPECT() *ProviderRepository_Expecter {
	return &ProviderRepository_Expecter{mock: &_m.Mock}
}

// AddProviders provides a mock function with given fields: providers
func (_m *ProviderRepository) AddProviders(providers []foundation.ServiceProvider) {
	_m.Called(providers)
}

// ProviderRepository_AddProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProviders'
type ProviderRepository_AddProviders_Call struct {
	*mock.Call
}

// AddProviders is a helper method to define mock.On call
//   - providers []foundation.ServiceProvider
func (_e *ProviderRepository_Expecter) AddProviders(providers interface{}) *ProviderRepository_AddProviders_Call {
	return &ProviderRepository_AddProviders_Call{Call: _e.mock.On("AddProviders", providers)}
}

func (_c *ProviderRepository_AddProviders_Call) Run(run func(providers []foundation.ServiceProvider)) *ProviderRepository_AddProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]foundation.ServiceProvider))
	})
	return _c
}

func (_c *ProviderRepository_AddProviders_Call) Return() *ProviderRepository_AddProviders_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProviderRepository_AddProviders_Call) RunAndReturn(run func([]foundation.ServiceProvider)) *ProviderRepository_AddProviders_Call {
	_c.Run(run)
	return _c
}

// Boot provides a mock function with given fields: app
func (_m *ProviderRepository) Boot(app foundation.Application) {
	_m.Called(app)
}

// ProviderRepository_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type ProviderRepository_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ProviderRepository_Expecter) Boot(app interface{}) *ProviderRepository_Boot_Call {
	return &ProviderRepository_Boot_Call{Call: _e.mock.On("Boot", app)}
}

func (_c *ProviderRepository_Boot_Call) Run(run func(app foundation.Application)) *ProviderRepository_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ProviderRepository_Boot_Call) Return() *ProviderRepository_Boot_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProviderRepository_Boot_Call) RunAndReturn(run func(foundation.Application)) *ProviderRepository_Boot_Call {
	_c.Run(run)
	return _c
}

// GetBooted provides a mock function with no fields
func (_m *ProviderRepository) GetBooted() []foundation.ServiceProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBooted")
	}

	var r0 []foundation.ServiceProvider
	if rf, ok := ret.Get(0).(func() []foundation.ServiceProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]foundation.ServiceProvider)
		}
	}

	return r0
}

// ProviderRepository_GetBooted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooted'
type ProviderRepository_GetBooted_Call struct {
	*mock.Call
}

// GetBooted is a helper method to define mock.On call
func (_e *ProviderRepository_Expecter) GetBooted() *ProviderRepository_GetBooted_Call {
	return &ProviderRepository_GetBooted_Call{Call: _e.mock.On("GetBooted")}
}

func (_c *ProviderRepository_GetBooted_Call) Run(run func()) *ProviderRepository_GetBooted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProviderRepository_GetBooted_Call) Return(_a0 []foundation.ServiceProvider) *ProviderRepository_GetBooted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderRepository_GetBooted_Call) RunAndReturn(run func() []foundation.ServiceProvider) *ProviderRepository_GetBooted_Call {
	_c.Call.Return(run)
	return _c
}

// LoadFromConfig provides a mock function with given fields: app
func (_m *ProviderRepository) LoadFromConfig(app foundation.Application) []foundation.ServiceProvider {
	ret := _m.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for LoadFromConfig")
	}

	var r0 []foundation.ServiceProvider
	if rf, ok := ret.Get(0).(func(foundation.Application) []foundation.ServiceProvider); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]foundation.ServiceProvider)
		}
	}

	return r0
}

// ProviderRepository_LoadFromConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadFromConfig'
type ProviderRepository_LoadFromConfig_Call struct {
	*mock.Call
}

// LoadFromConfig is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ProviderRepository_Expecter) LoadFromConfig(app interface{}) *ProviderRepository_LoadFromConfig_Call {
	return &ProviderRepository_LoadFromConfig_Call{Call: _e.mock.On("LoadFromConfig", app)}
}

func (_c *ProviderRepository_LoadFromConfig_Call) Run(run func(app foundation.Application)) *ProviderRepository_LoadFromConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ProviderRepository_LoadFromConfig_Call) Return(_a0 []foundation.ServiceProvider) *ProviderRepository_LoadFromConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderRepository_LoadFromConfig_Call) RunAndReturn(run func(foundation.Application) []foundation.ServiceProvider) *ProviderRepository_LoadFromConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: app
func (_m *ProviderRepository) Register(app foundation.Application) []foundation.ServiceProvider {
	ret := _m.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 []foundation.ServiceProvider
	if rf, ok := ret.Get(0).(func(foundation.Application) []foundation.ServiceProvider); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]foundation.ServiceProvider)
		}
	}

	return r0
}

// ProviderRepository_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ProviderRepository_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ProviderRepository_Expecter) Register(app interface{}) *ProviderRepository_Register_Call {
	return &ProviderRepository_Register_Call{Call: _e.mock.On("Register", app)}
}

func (_c *ProviderRepository_Register_Call) Run(run func(app foundation.Application)) *ProviderRepository_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ProviderRepository_Register_Call) Return(_a0 []foundation.ServiceProvider) *ProviderRepository_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderRepository_Register_Call) RunAndReturn(run func(foundation.Application) []foundation.ServiceProvider) *ProviderRepository_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *ProviderRepository) Reset() {
	_m.Called()
}

// ProviderRepository_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type ProviderRepository_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *ProviderRepository_Expecter) Reset() *ProviderRepository_Reset_Call {
	return &ProviderRepository_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *ProviderRepository_Reset_Call) Run(run func()) *ProviderRepository_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProviderRepository_Reset_Call) Return() *ProviderRepository_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProviderRepository_Reset_Call) RunAndReturn(run func()) *ProviderRepository_Reset_Call {
	_c.Run(run)
	return _c
}

// NewProviderRepository creates a new instance of ProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderRepository {
	mock := &ProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
