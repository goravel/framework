// Code generated by mockery. DO NOT EDIT.

package foundation

import (
	binding "github.com/goravel/framework/contracts/binding"
	foundation "github.com/goravel/framework/contracts/foundation"

	mock "github.com/stretchr/testify/mock"
)

// ServiceProviderWithRelations is an autogenerated mock type for the ServiceProviderWithRelations type
type ServiceProviderWithRelations struct {
	mock.Mock
}

type ServiceProviderWithRelations_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceProviderWithRelations) EXPECT() *ServiceProviderWithRelations_Expecter {
	return &ServiceProviderWithRelations_Expecter{mock: &_m.Mock}
}

// Boot provides a mock function with given fields: app
func (_m *ServiceProviderWithRelations) Boot(app foundation.Application) {
	_m.Called(app)
}

// ServiceProviderWithRelations_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type ServiceProviderWithRelations_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ServiceProviderWithRelations_Expecter) Boot(app interface{}) *ServiceProviderWithRelations_Boot_Call {
	return &ServiceProviderWithRelations_Boot_Call{Call: _e.mock.On("Boot", app)}
}

func (_c *ServiceProviderWithRelations_Boot_Call) Run(run func(app foundation.Application)) *ServiceProviderWithRelations_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ServiceProviderWithRelations_Boot_Call) Return() *ServiceProviderWithRelations_Boot_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceProviderWithRelations_Boot_Call) RunAndReturn(run func(foundation.Application)) *ServiceProviderWithRelations_Boot_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: app
func (_m *ServiceProviderWithRelations) Register(app foundation.Application) {
	_m.Called(app)
}

// ServiceProviderWithRelations_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ServiceProviderWithRelations_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - app foundation.Application
func (_e *ServiceProviderWithRelations_Expecter) Register(app interface{}) *ServiceProviderWithRelations_Register_Call {
	return &ServiceProviderWithRelations_Register_Call{Call: _e.mock.On("Register", app)}
}

func (_c *ServiceProviderWithRelations_Register_Call) Run(run func(app foundation.Application)) *ServiceProviderWithRelations_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(foundation.Application))
	})
	return _c
}

func (_c *ServiceProviderWithRelations_Register_Call) Return() *ServiceProviderWithRelations_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceProviderWithRelations_Register_Call) RunAndReturn(run func(foundation.Application)) *ServiceProviderWithRelations_Register_Call {
	_c.Run(run)
	return _c
}

// Relationship provides a mock function with no fields
func (_m *ServiceProviderWithRelations) Relationship() binding.Relationship {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Relationship")
	}

	var r0 binding.Relationship
	if rf, ok := ret.Get(0).(func() binding.Relationship); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(binding.Relationship)
	}

	return r0
}

// ServiceProviderWithRelations_Relationship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relationship'
type ServiceProviderWithRelations_Relationship_Call struct {
	*mock.Call
}

// Relationship is a helper method to define mock.On call
func (_e *ServiceProviderWithRelations_Expecter) Relationship() *ServiceProviderWithRelations_Relationship_Call {
	return &ServiceProviderWithRelations_Relationship_Call{Call: _e.mock.On("Relationship")}
}

func (_c *ServiceProviderWithRelations_Relationship_Call) Run(run func()) *ServiceProviderWithRelations_Relationship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceProviderWithRelations_Relationship_Call) Return(_a0 binding.Relationship) *ServiceProviderWithRelations_Relationship_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceProviderWithRelations_Relationship_Call) RunAndReturn(run func() binding.Relationship) *ServiceProviderWithRelations_Relationship_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceProviderWithRelations creates a new instance of ServiceProviderWithRelations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceProviderWithRelations(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceProviderWithRelations {
	mock := &ServiceProviderWithRelations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
