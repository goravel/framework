// Code generated by mockery. DO NOT EDIT.

package foundation

import mock "github.com/stretchr/testify/mock"

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

type Runner_Expecter struct {
	mock *mock.Mock
}

func (_m *Runner) EXPECT() *Runner_Expecter {
	return &Runner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with no fields
func (_m *Runner) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Runner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Runner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *Runner_Expecter) Run() *Runner_Run_Call {
	return &Runner_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *Runner_Run_Call) Run(run func()) *Runner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runner_Run_Call) Return(_a0 error) *Runner_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_Run_Call) RunAndReturn(run func() error) *Runner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldRun provides a mock function with no fields
func (_m *Runner) ShouldRun() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldRun")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Runner_ShouldRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRun'
type Runner_ShouldRun_Call struct {
	*mock.Call
}

// ShouldRun is a helper method to define mock.On call
func (_e *Runner_Expecter) ShouldRun() *Runner_ShouldRun_Call {
	return &Runner_ShouldRun_Call{Call: _e.mock.On("ShouldRun")}
}

func (_c *Runner_ShouldRun_Call) Run(run func()) *Runner_ShouldRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runner_ShouldRun_Call) Return(_a0 bool) *Runner_ShouldRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_ShouldRun_Call) RunAndReturn(run func() bool) *Runner_ShouldRun_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *Runner) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Runner_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Runner_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *Runner_Expecter) Shutdown() *Runner_Shutdown_Call {
	return &Runner_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *Runner_Shutdown_Call) Run(run func()) *Runner_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runner_Shutdown_Call) Return(_a0 error) *Runner_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_Shutdown_Call) RunAndReturn(run func() error) *Runner_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
