// Code generated by mockery. DO NOT EDIT.

package configuration

import (
	configuration "github.com/goravel/framework/contracts/foundation/configuration"
	http "github.com/goravel/framework/contracts/http"

	mock "github.com/stretchr/testify/mock"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

type Middleware_Expecter struct {
	mock *mock.Mock
}

func (_m *Middleware) EXPECT() *Middleware_Expecter {
	return &Middleware_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: middleware
func (_m *Middleware) Append(middleware ...http.Middleware) configuration.Middleware {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 configuration.Middleware
	if rf, ok := ret.Get(0).(func(...http.Middleware) configuration.Middleware); ok {
		r0 = rf(middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(configuration.Middleware)
		}
	}

	return r0
}

// Middleware_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type Middleware_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - middleware ...http.Middleware
func (_e *Middleware_Expecter) Append(middleware ...interface{}) *Middleware_Append_Call {
	return &Middleware_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{}, middleware...)...)}
}

func (_c *Middleware_Append_Call) Run(run func(middleware ...http.Middleware)) *Middleware_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]http.Middleware, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(http.Middleware)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Middleware_Append_Call) Return(_a0 configuration.Middleware) *Middleware_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_Append_Call) RunAndReturn(run func(...http.Middleware) configuration.Middleware) *Middleware_Append_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalMiddleware provides a mock function with no fields
func (_m *Middleware) GetGlobalMiddleware() []http.Middleware {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalMiddleware")
	}

	var r0 []http.Middleware
	if rf, ok := ret.Get(0).(func() []http.Middleware); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]http.Middleware)
		}
	}

	return r0
}

// Middleware_GetGlobalMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalMiddleware'
type Middleware_GetGlobalMiddleware_Call struct {
	*mock.Call
}

// GetGlobalMiddleware is a helper method to define mock.On call
func (_e *Middleware_Expecter) GetGlobalMiddleware() *Middleware_GetGlobalMiddleware_Call {
	return &Middleware_GetGlobalMiddleware_Call{Call: _e.mock.On("GetGlobalMiddleware")}
}

func (_c *Middleware_GetGlobalMiddleware_Call) Run(run func()) *Middleware_GetGlobalMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Middleware_GetGlobalMiddleware_Call) Return(_a0 []http.Middleware) *Middleware_GetGlobalMiddleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_GetGlobalMiddleware_Call) RunAndReturn(run func() []http.Middleware) *Middleware_GetGlobalMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// Prepend provides a mock function with given fields: middleware
func (_m *Middleware) Prepend(middleware ...http.Middleware) configuration.Middleware {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Prepend")
	}

	var r0 configuration.Middleware
	if rf, ok := ret.Get(0).(func(...http.Middleware) configuration.Middleware); ok {
		r0 = rf(middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(configuration.Middleware)
		}
	}

	return r0
}

// Middleware_Prepend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepend'
type Middleware_Prepend_Call struct {
	*mock.Call
}

// Prepend is a helper method to define mock.On call
//   - middleware ...http.Middleware
func (_e *Middleware_Expecter) Prepend(middleware ...interface{}) *Middleware_Prepend_Call {
	return &Middleware_Prepend_Call{Call: _e.mock.On("Prepend",
		append([]interface{}{}, middleware...)...)}
}

func (_c *Middleware_Prepend_Call) Run(run func(middleware ...http.Middleware)) *Middleware_Prepend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]http.Middleware, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(http.Middleware)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Middleware_Prepend_Call) Return(_a0 configuration.Middleware) *Middleware_Prepend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_Prepend_Call) RunAndReturn(run func(...http.Middleware) configuration.Middleware) *Middleware_Prepend_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: middleware
func (_m *Middleware) Use(middleware ...http.Middleware) configuration.Middleware {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Use")
	}

	var r0 configuration.Middleware
	if rf, ok := ret.Get(0).(func(...http.Middleware) configuration.Middleware); ok {
		r0 = rf(middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(configuration.Middleware)
		}
	}

	return r0
}

// Middleware_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type Middleware_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middleware ...http.Middleware
func (_e *Middleware_Expecter) Use(middleware ...interface{}) *Middleware_Use_Call {
	return &Middleware_Use_Call{Call: _e.mock.On("Use",
		append([]interface{}{}, middleware...)...)}
}

func (_c *Middleware_Use_Call) Run(run func(middleware ...http.Middleware)) *Middleware_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]http.Middleware, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(http.Middleware)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Middleware_Use_Call) Return(_a0 configuration.Middleware) *Middleware_Use_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_Use_Call) RunAndReturn(run func(...http.Middleware) configuration.Middleware) *Middleware_Use_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
