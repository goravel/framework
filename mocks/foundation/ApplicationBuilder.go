// Code generated by mockery. DO NOT EDIT.

package foundation

import (
	event "github.com/goravel/framework/contracts/event"
	foundation "github.com/goravel/framework/contracts/foundation"

	mock "github.com/stretchr/testify/mock"
)

// ApplicationBuilder is an autogenerated mock type for the ApplicationBuilder type
type ApplicationBuilder struct {
	mock.Mock
}

type ApplicationBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationBuilder) EXPECT() *ApplicationBuilder_Expecter {
	return &ApplicationBuilder_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with no fields
func (_m *ApplicationBuilder) Create() foundation.Application {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 foundation.Application
	if rf, ok := ret.Get(0).(func() foundation.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.Application)
		}
	}

	return r0
}

// ApplicationBuilder_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ApplicationBuilder_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *ApplicationBuilder_Expecter) Create() *ApplicationBuilder_Create_Call {
	return &ApplicationBuilder_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *ApplicationBuilder_Create_Call) Run(run func()) *ApplicationBuilder_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationBuilder_Create_Call) Return(_a0 foundation.Application) *ApplicationBuilder_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationBuilder_Create_Call) RunAndReturn(run func() foundation.Application) *ApplicationBuilder_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *ApplicationBuilder) Run() {
	_m.Called()
}

// ApplicationBuilder_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ApplicationBuilder_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *ApplicationBuilder_Expecter) Run() *ApplicationBuilder_Run_Call {
	return &ApplicationBuilder_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *ApplicationBuilder_Run_Call) Run(run func()) *ApplicationBuilder_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationBuilder_Run_Call) Return() *ApplicationBuilder_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *ApplicationBuilder_Run_Call) RunAndReturn(run func()) *ApplicationBuilder_Run_Call {
	_c.Run(run)
	return _c
}

// WithConfig provides a mock function with given fields: config
func (_m *ApplicationBuilder) WithConfig(config func()) foundation.ApplicationBuilder {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for WithConfig")
	}

	var r0 foundation.ApplicationBuilder
	if rf, ok := ret.Get(0).(func(func()) foundation.ApplicationBuilder); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.ApplicationBuilder)
		}
	}

	return r0
}

// ApplicationBuilder_WithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithConfig'
type ApplicationBuilder_WithConfig_Call struct {
	*mock.Call
}

// WithConfig is a helper method to define mock.On call
//   - config func()
func (_e *ApplicationBuilder_Expecter) WithConfig(config interface{}) *ApplicationBuilder_WithConfig_Call {
	return &ApplicationBuilder_WithConfig_Call{Call: _e.mock.On("WithConfig", config)}
}

func (_c *ApplicationBuilder_WithConfig_Call) Run(run func(config func())) *ApplicationBuilder_WithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *ApplicationBuilder_WithConfig_Call) Return(_a0 foundation.ApplicationBuilder) *ApplicationBuilder_WithConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationBuilder_WithConfig_Call) RunAndReturn(run func(func()) foundation.ApplicationBuilder) *ApplicationBuilder_WithConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WithEvents provides a mock function with given fields: eventToListeners
func (_m *ApplicationBuilder) WithEvents(eventToListeners map[event.Event][]event.Listener) foundation.ApplicationBuilder {
	ret := _m.Called(eventToListeners)

	if len(ret) == 0 {
		panic("no return value specified for WithEvents")
	}

	var r0 foundation.ApplicationBuilder
	if rf, ok := ret.Get(0).(func(map[event.Event][]event.Listener) foundation.ApplicationBuilder); ok {
		r0 = rf(eventToListeners)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.ApplicationBuilder)
		}
	}

	return r0
}

// ApplicationBuilder_WithEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithEvents'
type ApplicationBuilder_WithEvents_Call struct {
	*mock.Call
}

// WithEvents is a helper method to define mock.On call
//   - eventToListeners map[event.Event][]event.Listener
func (_e *ApplicationBuilder_Expecter) WithEvents(eventToListeners interface{}) *ApplicationBuilder_WithEvents_Call {
	return &ApplicationBuilder_WithEvents_Call{Call: _e.mock.On("WithEvents", eventToListeners)}
}

func (_c *ApplicationBuilder_WithEvents_Call) Run(run func(eventToListeners map[event.Event][]event.Listener)) *ApplicationBuilder_WithEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[event.Event][]event.Listener))
	})
	return _c
}

func (_c *ApplicationBuilder_WithEvents_Call) Return(_a0 foundation.ApplicationBuilder) *ApplicationBuilder_WithEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationBuilder_WithEvents_Call) RunAndReturn(run func(map[event.Event][]event.Listener) foundation.ApplicationBuilder) *ApplicationBuilder_WithEvents_Call {
	_c.Call.Return(run)
	return _c
}

// WithProviders provides a mock function with given fields: providers
func (_m *ApplicationBuilder) WithProviders(providers []foundation.ServiceProvider) foundation.ApplicationBuilder {
	ret := _m.Called(providers)

	if len(ret) == 0 {
		panic("no return value specified for WithProviders")
	}

	var r0 foundation.ApplicationBuilder
	if rf, ok := ret.Get(0).(func([]foundation.ServiceProvider) foundation.ApplicationBuilder); ok {
		r0 = rf(providers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.ApplicationBuilder)
		}
	}

	return r0
}

// ApplicationBuilder_WithProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithProviders'
type ApplicationBuilder_WithProviders_Call struct {
	*mock.Call
}

// WithProviders is a helper method to define mock.On call
//   - providers []foundation.ServiceProvider
func (_e *ApplicationBuilder_Expecter) WithProviders(providers interface{}) *ApplicationBuilder_WithProviders_Call {
	return &ApplicationBuilder_WithProviders_Call{Call: _e.mock.On("WithProviders", providers)}
}

func (_c *ApplicationBuilder_WithProviders_Call) Run(run func(providers []foundation.ServiceProvider)) *ApplicationBuilder_WithProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]foundation.ServiceProvider))
	})
	return _c
}

func (_c *ApplicationBuilder_WithProviders_Call) Return(_a0 foundation.ApplicationBuilder) *ApplicationBuilder_WithProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationBuilder_WithProviders_Call) RunAndReturn(run func([]foundation.ServiceProvider) foundation.ApplicationBuilder) *ApplicationBuilder_WithProviders_Call {
	_c.Call.Return(run)
	return _c
}

// WithRouting provides a mock function with given fields: routes
func (_m *ApplicationBuilder) WithRouting(routes ...func()) foundation.ApplicationBuilder {
	_va := make([]interface{}, len(routes))
	for _i := range routes {
		_va[_i] = routes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithRouting")
	}

	var r0 foundation.ApplicationBuilder
	if rf, ok := ret.Get(0).(func(...func()) foundation.ApplicationBuilder); ok {
		r0 = rf(routes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(foundation.ApplicationBuilder)
		}
	}

	return r0
}

// ApplicationBuilder_WithRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRouting'
type ApplicationBuilder_WithRouting_Call struct {
	*mock.Call
}

// WithRouting is a helper method to define mock.On call
//   - routes ...func()
func (_e *ApplicationBuilder_Expecter) WithRouting(routes ...interface{}) *ApplicationBuilder_WithRouting_Call {
	return &ApplicationBuilder_WithRouting_Call{Call: _e.mock.On("WithRouting",
		append([]interface{}{}, routes...)...)}
}

func (_c *ApplicationBuilder_WithRouting_Call) Run(run func(routes ...func())) *ApplicationBuilder_WithRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(), len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(func())
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ApplicationBuilder_WithRouting_Call) Return(_a0 foundation.ApplicationBuilder) *ApplicationBuilder_WithRouting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationBuilder_WithRouting_Call) RunAndReturn(run func(...func()) foundation.ApplicationBuilder) *ApplicationBuilder_WithRouting_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplicationBuilder creates a new instance of ApplicationBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationBuilder {
	mock := &ApplicationBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
