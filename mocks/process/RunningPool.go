// Code generated by mockery. DO NOT EDIT.

package process

import (
	os "os"

	mock "github.com/stretchr/testify/mock"

	process "github.com/goravel/framework/contracts/process"

	time "time"
)

// RunningPool is an autogenerated mock type for the RunningPool type
type RunningPool struct {
	mock.Mock
}

type RunningPool_Expecter struct {
	mock *mock.Mock
}

func (_m *RunningPool) EXPECT() *RunningPool_Expecter {
	return &RunningPool_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *RunningPool) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RunningPool_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type RunningPool_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *RunningPool_Expecter) Done() *RunningPool_Done_Call {
	return &RunningPool_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *RunningPool_Done_Call) Run(run func()) *RunningPool_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RunningPool_Done_Call) Return(_a0 <-chan struct{}) *RunningPool_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_Done_Call) RunAndReturn(run func() <-chan struct{}) *RunningPool_Done_Call {
	_c.Call.Return(run)
	return _c
}

// PIDs provides a mock function with no fields
func (_m *RunningPool) PIDs() map[string]int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PIDs")
	}

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	return r0
}

// RunningPool_PIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PIDs'
type RunningPool_PIDs_Call struct {
	*mock.Call
}

// PIDs is a helper method to define mock.On call
func (_e *RunningPool_Expecter) PIDs() *RunningPool_PIDs_Call {
	return &RunningPool_PIDs_Call{Call: _e.mock.On("PIDs")}
}

func (_c *RunningPool_PIDs_Call) Run(run func()) *RunningPool_PIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RunningPool_PIDs_Call) Return(_a0 map[string]int) *RunningPool_PIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_PIDs_Call) RunAndReturn(run func() map[string]int) *RunningPool_PIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Running provides a mock function with no fields
func (_m *RunningPool) Running() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Running")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RunningPool_Running_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Running'
type RunningPool_Running_Call struct {
	*mock.Call
}

// Running is a helper method to define mock.On call
func (_e *RunningPool_Expecter) Running() *RunningPool_Running_Call {
	return &RunningPool_Running_Call{Call: _e.mock.On("Running")}
}

func (_c *RunningPool_Running_Call) Run(run func()) *RunningPool_Running_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RunningPool_Running_Call) Return(_a0 bool) *RunningPool_Running_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_Running_Call) RunAndReturn(run func() bool) *RunningPool_Running_Call {
	_c.Call.Return(run)
	return _c
}

// Signal provides a mock function with given fields: sig
func (_m *RunningPool) Signal(sig os.Signal) error {
	ret := _m.Called(sig)

	if len(ret) == 0 {
		panic("no return value specified for Signal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(os.Signal) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunningPool_Signal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signal'
type RunningPool_Signal_Call struct {
	*mock.Call
}

// Signal is a helper method to define mock.On call
//   - sig os.Signal
func (_e *RunningPool_Expecter) Signal(sig interface{}) *RunningPool_Signal_Call {
	return &RunningPool_Signal_Call{Call: _e.mock.On("Signal", sig)}
}

func (_c *RunningPool_Signal_Call) Run(run func(sig os.Signal)) *RunningPool_Signal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(os.Signal))
	})
	return _c
}

func (_c *RunningPool_Signal_Call) Return(_a0 error) *RunningPool_Signal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_Signal_Call) RunAndReturn(run func(os.Signal) error) *RunningPool_Signal_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: timeout, sig
func (_m *RunningPool) Stop(timeout time.Duration, sig ...os.Signal) error {
	_va := make([]interface{}, len(sig))
	for _i := range sig {
		_va[_i] = sig[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration, ...os.Signal) error); ok {
		r0 = rf(timeout, sig...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunningPool_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type RunningPool_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - timeout time.Duration
//   - sig ...os.Signal
func (_e *RunningPool_Expecter) Stop(timeout interface{}, sig ...interface{}) *RunningPool_Stop_Call {
	return &RunningPool_Stop_Call{Call: _e.mock.On("Stop",
		append([]interface{}{timeout}, sig...)...)}
}

func (_c *RunningPool_Stop_Call) Run(run func(timeout time.Duration, sig ...os.Signal)) *RunningPool_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]os.Signal, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(os.Signal)
			}
		}
		run(args[0].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *RunningPool_Stop_Call) Return(_a0 error) *RunningPool_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_Stop_Call) RunAndReturn(run func(time.Duration, ...os.Signal) error) *RunningPool_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with no fields
func (_m *RunningPool) Wait() map[string]process.Result {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 map[string]process.Result
	if rf, ok := ret.Get(0).(func() map[string]process.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]process.Result)
		}
	}

	return r0
}

// RunningPool_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type RunningPool_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *RunningPool_Expecter) Wait() *RunningPool_Wait_Call {
	return &RunningPool_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *RunningPool_Wait_Call) Run(run func()) *RunningPool_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RunningPool_Wait_Call) Return(_a0 map[string]process.Result) *RunningPool_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunningPool_Wait_Call) RunAndReturn(run func() map[string]process.Result) *RunningPool_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunningPool creates a new instance of RunningPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunningPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *RunningPool {
	mock := &RunningPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
