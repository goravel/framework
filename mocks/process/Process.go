// Code generated by mockery. DO NOT EDIT.

package process

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	process "github.com/goravel/framework/contracts/process"

	time "time"
)

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

type Process_Expecter struct {
	mock *mock.Mock
}

func (_m *Process) EXPECT() *Process_Expecter {
	return &Process_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: name, arg
func (_m *Process) Run(name string, arg ...string) (process.Result, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 process.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (process.Result, error)); ok {
		return rf(name, arg...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) process.Result); ok {
		r0 = rf(name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Process_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Process_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - name string
//   - arg ...string
func (_e *Process_Expecter) Run(name interface{}, arg ...interface{}) *Process_Run_Call {
	return &Process_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{name}, arg...)...)}
}

func (_c *Process_Run_Call) Run(run func(name string, arg ...string)) *Process_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Process_Run_Call) Return(_a0 process.Result, _a1 error) *Process_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Process_Run_Call) RunAndReturn(run func(string, ...string) (process.Result, error)) *Process_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: name, arg
func (_m *Process) Start(name string, arg ...string) (process.Running, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 process.Running
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (process.Running, error)); ok {
		return rf(name, arg...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) process.Running); ok {
		r0 = rf(name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Running)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Process_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Process_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - name string
//   - arg ...string
func (_e *Process_Expecter) Start(name interface{}, arg ...interface{}) *Process_Start_Call {
	return &Process_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{name}, arg...)...)}
}

func (_c *Process_Start_Call) Run(run func(name string, arg ...string)) *Process_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Process_Start_Call) Return(_a0 process.Running, _a1 error) *Process_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Process_Start_Call) RunAndReturn(run func(string, ...string) (process.Running, error)) *Process_Start_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Process) WithContext(ctx context.Context) process.Process {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(context.Context) process.Process); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Process_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Process_Expecter) WithContext(ctx interface{}) *Process_WithContext_Call {
	return &Process_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Process_WithContext_Call) Run(run func(ctx context.Context)) *Process_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Process_WithContext_Call) Return(_a0 process.Process) *Process_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithContext_Call) RunAndReturn(run func(context.Context) process.Process) *Process_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WithDisabledBuffering provides a mock function with no fields
func (_m *Process) WithDisabledBuffering() process.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithDisabledBuffering")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func() process.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithDisabledBuffering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDisabledBuffering'
type Process_WithDisabledBuffering_Call struct {
	*mock.Call
}

// WithDisabledBuffering is a helper method to define mock.On call
func (_e *Process_Expecter) WithDisabledBuffering() *Process_WithDisabledBuffering_Call {
	return &Process_WithDisabledBuffering_Call{Call: _e.mock.On("WithDisabledBuffering")}
}

func (_c *Process_WithDisabledBuffering_Call) Run(run func()) *Process_WithDisabledBuffering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_WithDisabledBuffering_Call) Return(_a0 process.Process) *Process_WithDisabledBuffering_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithDisabledBuffering_Call) RunAndReturn(run func() process.Process) *Process_WithDisabledBuffering_Call {
	_c.Call.Return(run)
	return _c
}

// WithEnv provides a mock function with given fields: vars
func (_m *Process) WithEnv(vars map[string]string) process.Process {
	ret := _m.Called(vars)

	if len(ret) == 0 {
		panic("no return value specified for WithEnv")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(map[string]string) process.Process); ok {
		r0 = rf(vars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithEnv'
type Process_WithEnv_Call struct {
	*mock.Call
}

// WithEnv is a helper method to define mock.On call
//   - vars map[string]string
func (_e *Process_Expecter) WithEnv(vars interface{}) *Process_WithEnv_Call {
	return &Process_WithEnv_Call{Call: _e.mock.On("WithEnv", vars)}
}

func (_c *Process_WithEnv_Call) Run(run func(vars map[string]string)) *Process_WithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *Process_WithEnv_Call) Return(_a0 process.Process) *Process_WithEnv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithEnv_Call) RunAndReturn(run func(map[string]string) process.Process) *Process_WithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// WithInput provides a mock function with given fields: in
func (_m *Process) WithInput(in io.Reader) process.Process {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for WithInput")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(io.Reader) process.Process); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithInput'
type Process_WithInput_Call struct {
	*mock.Call
}

// WithInput is a helper method to define mock.On call
//   - in io.Reader
func (_e *Process_Expecter) WithInput(in interface{}) *Process_WithInput_Call {
	return &Process_WithInput_Call{Call: _e.mock.On("WithInput", in)}
}

func (_c *Process_WithInput_Call) Run(run func(in io.Reader)) *Process_WithInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *Process_WithInput_Call) Return(_a0 process.Process) *Process_WithInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithInput_Call) RunAndReturn(run func(io.Reader) process.Process) *Process_WithInput_Call {
	_c.Call.Return(run)
	return _c
}

// WithOutputHandler provides a mock function with given fields: handler
func (_m *Process) WithOutputHandler(handler process.OnOutputFunc) process.Process {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for WithOutputHandler")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(process.OnOutputFunc) process.Process); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithOutputHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithOutputHandler'
type Process_WithOutputHandler_Call struct {
	*mock.Call
}

// WithOutputHandler is a helper method to define mock.On call
//   - handler process.OnOutputFunc
func (_e *Process_Expecter) WithOutputHandler(handler interface{}) *Process_WithOutputHandler_Call {
	return &Process_WithOutputHandler_Call{Call: _e.mock.On("WithOutputHandler", handler)}
}

func (_c *Process_WithOutputHandler_Call) Run(run func(handler process.OnOutputFunc)) *Process_WithOutputHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(process.OnOutputFunc))
	})
	return _c
}

func (_c *Process_WithOutputHandler_Call) Return(_a0 process.Process) *Process_WithOutputHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithOutputHandler_Call) RunAndReturn(run func(process.OnOutputFunc) process.Process) *Process_WithOutputHandler_Call {
	_c.Call.Return(run)
	return _c
}

// WithPath provides a mock function with given fields: path
func (_m *Process) WithPath(path string) process.Process {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for WithPath")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(string) process.Process); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPath'
type Process_WithPath_Call struct {
	*mock.Call
}

// WithPath is a helper method to define mock.On call
//   - path string
func (_e *Process_Expecter) WithPath(path interface{}) *Process_WithPath_Call {
	return &Process_WithPath_Call{Call: _e.mock.On("WithPath", path)}
}

func (_c *Process_WithPath_Call) Run(run func(path string)) *Process_WithPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Process_WithPath_Call) Return(_a0 process.Process) *Process_WithPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithPath_Call) RunAndReturn(run func(string) process.Process) *Process_WithPath_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuiet provides a mock function with no fields
func (_m *Process) WithQuiet() process.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithQuiet")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func() process.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithQuiet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuiet'
type Process_WithQuiet_Call struct {
	*mock.Call
}

// WithQuiet is a helper method to define mock.On call
func (_e *Process_Expecter) WithQuiet() *Process_WithQuiet_Call {
	return &Process_WithQuiet_Call{Call: _e.mock.On("WithQuiet")}
}

func (_c *Process_WithQuiet_Call) Run(run func()) *Process_WithQuiet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_WithQuiet_Call) Return(_a0 process.Process) *Process_WithQuiet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithQuiet_Call) RunAndReturn(run func() process.Process) *Process_WithQuiet_Call {
	_c.Call.Return(run)
	return _c
}

// WithTTY provides a mock function with no fields
func (_m *Process) WithTTY() process.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithTTY")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func() process.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithTTY_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTTY'
type Process_WithTTY_Call struct {
	*mock.Call
}

// WithTTY is a helper method to define mock.On call
func (_e *Process_Expecter) WithTTY() *Process_WithTTY_Call {
	return &Process_WithTTY_Call{Call: _e.mock.On("WithTTY")}
}

func (_c *Process_WithTTY_Call) Run(run func()) *Process_WithTTY_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_WithTTY_Call) Return(_a0 process.Process) *Process_WithTTY_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithTTY_Call) RunAndReturn(run func() process.Process) *Process_WithTTY_Call {
	_c.Call.Return(run)
	return _c
}

// WithTimeout provides a mock function with given fields: timeout
func (_m *Process) WithTimeout(timeout time.Duration) process.Process {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for WithTimeout")
	}

	var r0 process.Process
	if rf, ok := ret.Get(0).(func(time.Duration) process.Process); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.Process)
		}
	}

	return r0
}

// Process_WithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTimeout'
type Process_WithTimeout_Call struct {
	*mock.Call
}

// WithTimeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *Process_Expecter) WithTimeout(timeout interface{}) *Process_WithTimeout_Call {
	return &Process_WithTimeout_Call{Call: _e.mock.On("WithTimeout", timeout)}
}

func (_c *Process_WithTimeout_Call) Run(run func(timeout time.Duration)) *Process_WithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *Process_WithTimeout_Call) Return(_a0 process.Process) *Process_WithTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_WithTimeout_Call) RunAndReturn(run func(time.Duration) process.Process) *Process_WithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcess creates a new instance of Process. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Process {
	mock := &Process{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
