// Code generated by mockery. DO NOT EDIT.

package process

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	process "github.com/goravel/framework/contracts/process"

	time "time"
)

// PoolCommand is an autogenerated mock type for the PoolCommand type
type PoolCommand struct {
	mock.Mock
}

type PoolCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolCommand) EXPECT() *PoolCommand_Expecter {
	return &PoolCommand_Expecter{mock: &_m.Mock}
}

// As provides a mock function with given fields: key
func (_m *PoolCommand) As(key string) process.PoolCommand {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for As")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(string) process.PoolCommand); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_As_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'As'
type PoolCommand_As_Call struct {
	*mock.Call
}

// As is a helper method to define mock.On call
//   - key string
func (_e *PoolCommand_Expecter) As(key interface{}) *PoolCommand_As_Call {
	return &PoolCommand_As_Call{Call: _e.mock.On("As", key)}
}

func (_c *PoolCommand_As_Call) Run(run func(key string)) *PoolCommand_As_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PoolCommand_As_Call) Return(_a0 process.PoolCommand) *PoolCommand_As_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_As_Call) RunAndReturn(run func(string) process.PoolCommand) *PoolCommand_As_Call {
	_c.Call.Return(run)
	return _c
}

// DisableBuffering provides a mock function with no fields
func (_m *PoolCommand) DisableBuffering() process.PoolCommand {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisableBuffering")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func() process.PoolCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_DisableBuffering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableBuffering'
type PoolCommand_DisableBuffering_Call struct {
	*mock.Call
}

// DisableBuffering is a helper method to define mock.On call
func (_e *PoolCommand_Expecter) DisableBuffering() *PoolCommand_DisableBuffering_Call {
	return &PoolCommand_DisableBuffering_Call{Call: _e.mock.On("DisableBuffering")}
}

func (_c *PoolCommand_DisableBuffering_Call) Run(run func()) *PoolCommand_DisableBuffering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolCommand_DisableBuffering_Call) Return(_a0 process.PoolCommand) *PoolCommand_DisableBuffering_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_DisableBuffering_Call) RunAndReturn(run func() process.PoolCommand) *PoolCommand_DisableBuffering_Call {
	_c.Call.Return(run)
	return _c
}

// Env provides a mock function with given fields: vars
func (_m *PoolCommand) Env(vars map[string]string) process.PoolCommand {
	ret := _m.Called(vars)

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(map[string]string) process.PoolCommand); ok {
		r0 = rf(vars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type PoolCommand_Env_Call struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
//   - vars map[string]string
func (_e *PoolCommand_Expecter) Env(vars interface{}) *PoolCommand_Env_Call {
	return &PoolCommand_Env_Call{Call: _e.mock.On("Env", vars)}
}

func (_c *PoolCommand_Env_Call) Run(run func(vars map[string]string)) *PoolCommand_Env_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *PoolCommand_Env_Call) Return(_a0 process.PoolCommand) *PoolCommand_Env_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_Env_Call) RunAndReturn(run func(map[string]string) process.PoolCommand) *PoolCommand_Env_Call {
	_c.Call.Return(run)
	return _c
}

// Input provides a mock function with given fields: in
func (_m *PoolCommand) Input(in io.Reader) process.PoolCommand {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Input")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(io.Reader) process.PoolCommand); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_Input_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Input'
type PoolCommand_Input_Call struct {
	*mock.Call
}

// Input is a helper method to define mock.On call
//   - in io.Reader
func (_e *PoolCommand_Expecter) Input(in interface{}) *PoolCommand_Input_Call {
	return &PoolCommand_Input_Call{Call: _e.mock.On("Input", in)}
}

func (_c *PoolCommand_Input_Call) Run(run func(in io.Reader)) *PoolCommand_Input_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *PoolCommand_Input_Call) Return(_a0 process.PoolCommand) *PoolCommand_Input_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_Input_Call) RunAndReturn(run func(io.Reader) process.PoolCommand) *PoolCommand_Input_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields: path
func (_m *PoolCommand) Path(path string) process.PoolCommand {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(string) process.PoolCommand); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type PoolCommand_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
//   - path string
func (_e *PoolCommand_Expecter) Path(path interface{}) *PoolCommand_Path_Call {
	return &PoolCommand_Path_Call{Call: _e.mock.On("Path", path)}
}

func (_c *PoolCommand_Path_Call) Run(run func(path string)) *PoolCommand_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PoolCommand_Path_Call) Return(_a0 process.PoolCommand) *PoolCommand_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_Path_Call) RunAndReturn(run func(string) process.PoolCommand) *PoolCommand_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Quietly provides a mock function with no fields
func (_m *PoolCommand) Quietly() process.PoolCommand {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Quietly")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func() process.PoolCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_Quietly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quietly'
type PoolCommand_Quietly_Call struct {
	*mock.Call
}

// Quietly is a helper method to define mock.On call
func (_e *PoolCommand_Expecter) Quietly() *PoolCommand_Quietly_Call {
	return &PoolCommand_Quietly_Call{Call: _e.mock.On("Quietly")}
}

func (_c *PoolCommand_Quietly_Call) Run(run func()) *PoolCommand_Quietly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolCommand_Quietly_Call) Return(_a0 process.PoolCommand) *PoolCommand_Quietly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_Quietly_Call) RunAndReturn(run func() process.PoolCommand) *PoolCommand_Quietly_Call {
	_c.Call.Return(run)
	return _c
}

// Timeout provides a mock function with given fields: timeout
func (_m *PoolCommand) Timeout(timeout time.Duration) process.PoolCommand {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(time.Duration) process.PoolCommand); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type PoolCommand_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *PoolCommand_Expecter) Timeout(timeout interface{}) *PoolCommand_Timeout_Call {
	return &PoolCommand_Timeout_Call{Call: _e.mock.On("Timeout", timeout)}
}

func (_c *PoolCommand_Timeout_Call) Run(run func(timeout time.Duration)) *PoolCommand_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *PoolCommand_Timeout_Call) Return(_a0 process.PoolCommand) *PoolCommand_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_Timeout_Call) RunAndReturn(run func(time.Duration) process.PoolCommand) *PoolCommand_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *PoolCommand) WithContext(ctx context.Context) process.PoolCommand {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(context.Context) process.PoolCommand); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// PoolCommand_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type PoolCommand_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PoolCommand_Expecter) WithContext(ctx interface{}) *PoolCommand_WithContext_Call {
	return &PoolCommand_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *PoolCommand_WithContext_Call) Run(run func(ctx context.Context)) *PoolCommand_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PoolCommand_WithContext_Call) Return(_a0 process.PoolCommand) *PoolCommand_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolCommand_WithContext_Call) RunAndReturn(run func(context.Context) process.PoolCommand) *PoolCommand_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoolCommand creates a new instance of PoolCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolCommand {
	mock := &PoolCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
