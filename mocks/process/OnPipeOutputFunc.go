// Code generated by mockery. DO NOT EDIT.

package process

import (
	process "github.com/goravel/framework/contracts/process"
	mock "github.com/stretchr/testify/mock"
)

// OnPipeOutputFunc is an autogenerated mock type for the OnPipeOutputFunc type
type OnPipeOutputFunc struct {
	mock.Mock
}

type OnPipeOutputFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *OnPipeOutputFunc) EXPECT() *OnPipeOutputFunc_Expecter {
	return &OnPipeOutputFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: key, typ, line
func (_m *OnPipeOutputFunc) Execute(key string, typ process.OutputType, line []byte) {
	_m.Called(key, typ, line)
}

// OnPipeOutputFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type OnPipeOutputFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - key string
//   - typ process.OutputType
//   - line []byte
func (_e *OnPipeOutputFunc_Expecter) Execute(key interface{}, typ interface{}, line interface{}) *OnPipeOutputFunc_Execute_Call {
	return &OnPipeOutputFunc_Execute_Call{Call: _e.mock.On("Execute", key, typ, line)}
}

func (_c *OnPipeOutputFunc_Execute_Call) Run(run func(key string, typ process.OutputType, line []byte)) *OnPipeOutputFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(process.OutputType), args[2].([]byte))
	})
	return _c
}

func (_c *OnPipeOutputFunc_Execute_Call) Return() *OnPipeOutputFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *OnPipeOutputFunc_Execute_Call) RunAndReturn(run func(string, process.OutputType, []byte)) *OnPipeOutputFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewOnPipeOutputFunc creates a new instance of OnPipeOutputFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOnPipeOutputFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *OnPipeOutputFunc {
	mock := &OnPipeOutputFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
