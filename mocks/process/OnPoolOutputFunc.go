// Code generated by mockery. DO NOT EDIT.

package process

import (
	process "github.com/goravel/framework/contracts/process"
	mock "github.com/stretchr/testify/mock"
)

// OnPoolOutputFunc is an autogenerated mock type for the OnPoolOutputFunc type
type OnPoolOutputFunc struct {
	mock.Mock
}

type OnPoolOutputFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *OnPoolOutputFunc) EXPECT() *OnPoolOutputFunc_Expecter {
	return &OnPoolOutputFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: typ, line, key
func (_m *OnPoolOutputFunc) Execute(typ process.OutputType, line []byte, key string) {
	_m.Called(typ, line, key)
}

// OnPoolOutputFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type OnPoolOutputFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - typ process.OutputType
//   - line []byte
//   - key string
func (_e *OnPoolOutputFunc_Expecter) Execute(typ interface{}, line interface{}, key interface{}) *OnPoolOutputFunc_Execute_Call {
	return &OnPoolOutputFunc_Execute_Call{Call: _e.mock.On("Execute", typ, line, key)}
}

func (_c *OnPoolOutputFunc_Execute_Call) Run(run func(typ process.OutputType, line []byte, key string)) *OnPoolOutputFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(process.OutputType), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *OnPoolOutputFunc_Execute_Call) Return() *OnPoolOutputFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *OnPoolOutputFunc_Execute_Call) RunAndReturn(run func(process.OutputType, []byte, string)) *OnPoolOutputFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewOnPoolOutputFunc creates a new instance of OnPoolOutputFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOnPoolOutputFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *OnPoolOutputFunc {
	mock := &OnPoolOutputFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
