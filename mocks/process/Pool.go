// Code generated by mockery. DO NOT EDIT.

package process

import (
	process "github.com/goravel/framework/contracts/process"
	mock "github.com/stretchr/testify/mock"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

type Pool_Expecter struct {
	mock *mock.Mock
}

func (_m *Pool) EXPECT() *Pool_Expecter {
	return &Pool_Expecter{mock: &_m.Mock}
}

// Command provides a mock function with given fields: name, arg
func (_m *Pool) Command(name string, arg ...string) process.PoolCommand {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 process.PoolCommand
	if rf, ok := ret.Get(0).(func(string, ...string) process.PoolCommand); ok {
		r0 = rf(name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolCommand)
		}
	}

	return r0
}

// Pool_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type Pool_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - name string
//   - arg ...string
func (_e *Pool_Expecter) Command(name interface{}, arg ...interface{}) *Pool_Command_Call {
	return &Pool_Command_Call{Call: _e.mock.On("Command",
		append([]interface{}{name}, arg...)...)}
}

func (_c *Pool_Command_Call) Run(run func(name string, arg ...string)) *Pool_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Pool_Command_Call) Return(_a0 process.PoolCommand) *Pool_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pool_Command_Call) RunAndReturn(run func(string, ...string) process.PoolCommand) *Pool_Command_Call {
	_c.Call.Return(run)
	return _c
}

// NewPool creates a new instance of Pool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pool {
	mock := &Pool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
