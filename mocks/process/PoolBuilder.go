// Code generated by mockery. DO NOT EDIT.

package process

import (
	context "context"

	process "github.com/goravel/framework/contracts/process"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PoolBuilder is an autogenerated mock type for the PoolBuilder type
type PoolBuilder struct {
	mock.Mock
}

type PoolBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolBuilder) EXPECT() *PoolBuilder_Expecter {
	return &PoolBuilder_Expecter{mock: &_m.Mock}
}

// Concurrency provides a mock function with given fields: n
func (_m *PoolBuilder) Concurrency(n int) process.PoolBuilder {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Concurrency")
	}

	var r0 process.PoolBuilder
	if rf, ok := ret.Get(0).(func(int) process.PoolBuilder); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolBuilder)
		}
	}

	return r0
}

// PoolBuilder_Concurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Concurrency'
type PoolBuilder_Concurrency_Call struct {
	*mock.Call
}

// Concurrency is a helper method to define mock.On call
//   - n int
func (_e *PoolBuilder_Expecter) Concurrency(n interface{}) *PoolBuilder_Concurrency_Call {
	return &PoolBuilder_Concurrency_Call{Call: _e.mock.On("Concurrency", n)}
}

func (_c *PoolBuilder_Concurrency_Call) Run(run func(n int)) *PoolBuilder_Concurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *PoolBuilder_Concurrency_Call) Return(_a0 process.PoolBuilder) *PoolBuilder_Concurrency_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolBuilder_Concurrency_Call) RunAndReturn(run func(int) process.PoolBuilder) *PoolBuilder_Concurrency_Call {
	_c.Call.Return(run)
	return _c
}

// OnOutput provides a mock function with given fields: handler
func (_m *PoolBuilder) OnOutput(handler process.OnPoolOutputFunc) process.PoolBuilder {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for OnOutput")
	}

	var r0 process.PoolBuilder
	if rf, ok := ret.Get(0).(func(process.OnPoolOutputFunc) process.PoolBuilder); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolBuilder)
		}
	}

	return r0
}

// PoolBuilder_OnOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOutput'
type PoolBuilder_OnOutput_Call struct {
	*mock.Call
}

// OnOutput is a helper method to define mock.On call
//   - handler process.OnPoolOutputFunc
func (_e *PoolBuilder_Expecter) OnOutput(handler interface{}) *PoolBuilder_OnOutput_Call {
	return &PoolBuilder_OnOutput_Call{Call: _e.mock.On("OnOutput", handler)}
}

func (_c *PoolBuilder_OnOutput_Call) Run(run func(handler process.OnPoolOutputFunc)) *PoolBuilder_OnOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(process.OnPoolOutputFunc))
	})
	return _c
}

func (_c *PoolBuilder_OnOutput_Call) Return(_a0 process.PoolBuilder) *PoolBuilder_OnOutput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolBuilder_OnOutput_Call) RunAndReturn(run func(process.OnPoolOutputFunc) process.PoolBuilder) *PoolBuilder_OnOutput_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: builder
func (_m *PoolBuilder) Run(builder func(process.Pool)) (map[string]process.Result, error) {
	ret := _m.Called(builder)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 map[string]process.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(func(process.Pool)) (map[string]process.Result, error)); ok {
		return rf(builder)
	}
	if rf, ok := ret.Get(0).(func(func(process.Pool)) map[string]process.Result); ok {
		r0 = rf(builder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]process.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(func(process.Pool)) error); ok {
		r1 = rf(builder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PoolBuilder_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type PoolBuilder_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - builder func(process.Pool)
func (_e *PoolBuilder_Expecter) Run(builder interface{}) *PoolBuilder_Run_Call {
	return &PoolBuilder_Run_Call{Call: _e.mock.On("Run", builder)}
}

func (_c *PoolBuilder_Run_Call) Run(run func(builder func(process.Pool))) *PoolBuilder_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(process.Pool)))
	})
	return _c
}

func (_c *PoolBuilder_Run_Call) Return(_a0 map[string]process.Result, _a1 error) *PoolBuilder_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PoolBuilder_Run_Call) RunAndReturn(run func(func(process.Pool)) (map[string]process.Result, error)) *PoolBuilder_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: builder
func (_m *PoolBuilder) Start(builder func(process.Pool)) (process.RunningPool, error) {
	ret := _m.Called(builder)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 process.RunningPool
	var r1 error
	if rf, ok := ret.Get(0).(func(func(process.Pool)) (process.RunningPool, error)); ok {
		return rf(builder)
	}
	if rf, ok := ret.Get(0).(func(func(process.Pool)) process.RunningPool); ok {
		r0 = rf(builder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.RunningPool)
		}
	}

	if rf, ok := ret.Get(1).(func(func(process.Pool)) error); ok {
		r1 = rf(builder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PoolBuilder_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type PoolBuilder_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - builder func(process.Pool)
func (_e *PoolBuilder_Expecter) Start(builder interface{}) *PoolBuilder_Start_Call {
	return &PoolBuilder_Start_Call{Call: _e.mock.On("Start", builder)}
}

func (_c *PoolBuilder_Start_Call) Run(run func(builder func(process.Pool))) *PoolBuilder_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(process.Pool)))
	})
	return _c
}

func (_c *PoolBuilder_Start_Call) Return(_a0 process.RunningPool, _a1 error) *PoolBuilder_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PoolBuilder_Start_Call) RunAndReturn(run func(func(process.Pool)) (process.RunningPool, error)) *PoolBuilder_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Timeout provides a mock function with given fields: timeout
func (_m *PoolBuilder) Timeout(timeout time.Duration) process.PoolBuilder {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 process.PoolBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) process.PoolBuilder); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolBuilder)
		}
	}

	return r0
}

// PoolBuilder_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type PoolBuilder_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *PoolBuilder_Expecter) Timeout(timeout interface{}) *PoolBuilder_Timeout_Call {
	return &PoolBuilder_Timeout_Call{Call: _e.mock.On("Timeout", timeout)}
}

func (_c *PoolBuilder_Timeout_Call) Run(run func(timeout time.Duration)) *PoolBuilder_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *PoolBuilder_Timeout_Call) Return(_a0 process.PoolBuilder) *PoolBuilder_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolBuilder_Timeout_Call) RunAndReturn(run func(time.Duration) process.PoolBuilder) *PoolBuilder_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *PoolBuilder) WithContext(ctx context.Context) process.PoolBuilder {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 process.PoolBuilder
	if rf, ok := ret.Get(0).(func(context.Context) process.PoolBuilder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PoolBuilder)
		}
	}

	return r0
}

// PoolBuilder_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type PoolBuilder_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PoolBuilder_Expecter) WithContext(ctx interface{}) *PoolBuilder_WithContext_Call {
	return &PoolBuilder_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *PoolBuilder_WithContext_Call) Run(run func(ctx context.Context)) *PoolBuilder_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PoolBuilder_WithContext_Call) Return(_a0 process.PoolBuilder) *PoolBuilder_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolBuilder_WithContext_Call) RunAndReturn(run func(context.Context) process.PoolBuilder) *PoolBuilder_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoolBuilder creates a new instance of PoolBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolBuilder {
	mock := &PoolBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
