// Code generated by mockery. DO NOT EDIT.

package process

import (
	process "github.com/goravel/framework/contracts/process"
	mock "github.com/stretchr/testify/mock"
)

// PipeCommand is an autogenerated mock type for the PipeCommand type
type PipeCommand struct {
	mock.Mock
}

type PipeCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *PipeCommand) EXPECT() *PipeCommand_Expecter {
	return &PipeCommand_Expecter{mock: &_m.Mock}
}

// As provides a mock function with given fields: key
func (_m *PipeCommand) As(key string) process.PipeCommand {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for As")
	}

	var r0 process.PipeCommand
	if rf, ok := ret.Get(0).(func(string) process.PipeCommand); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.PipeCommand)
		}
	}

	return r0
}

// PipeCommand_As_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'As'
type PipeCommand_As_Call struct {
	*mock.Call
}

// As is a helper method to define mock.On call
//   - key string
func (_e *PipeCommand_Expecter) As(key interface{}) *PipeCommand_As_Call {
	return &PipeCommand_As_Call{Call: _e.mock.On("As", key)}
}

func (_c *PipeCommand_As_Call) Run(run func(key string)) *PipeCommand_As_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PipeCommand_As_Call) Return(_a0 process.PipeCommand) *PipeCommand_As_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipeCommand_As_Call) RunAndReturn(run func(string) process.PipeCommand) *PipeCommand_As_Call {
	_c.Call.Return(run)
	return _c
}

// NewPipeCommand creates a new instance of PipeCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipeCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipeCommand {
	mock := &PipeCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
