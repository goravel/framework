// Code generated by mockery. DO NOT EDIT.

package route

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"

	nethttp "net/http"

	route "github.com/goravel/framework/contracts/route"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

type Router_Expecter struct {
	mock *mock.Mock
}

func (_m *Router) EXPECT() *Router_Expecter {
	return &Router_Expecter{mock: &_m.Mock}
}

// Any provides a mock function with given fields: path, handler
func (_m *Router) Any(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Any")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Any_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Any'
type Router_Any_Call struct {
	*mock.Call
}

// Any is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Any(path interface{}, handler interface{}) *Router_Any_Call {
	return &Router_Any_Call{Call: _e.mock.On("Any", path, handler)}
}

func (_c *Router_Any_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Any_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Any_Call) Return(_a0 route.Action) *Router_Any_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Any_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Any_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: path, handler
func (_m *Router) Delete(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Router_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Delete(path interface{}, handler interface{}) *Router_Delete_Call {
	return &Router_Delete_Call{Call: _e.mock.On("Delete", path, handler)}
}

func (_c *Router_Delete_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Delete_Call) Return(_a0 route.Action) *Router_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Delete_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: path, handler
func (_m *Router) Get(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Router_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Get(path interface{}, handler interface{}) *Router_Get_Call {
	return &Router_Get_Call{Call: _e.mock.On("Get", path, handler)}
}

func (_c *Router_Get_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Get_Call) Return(_a0 route.Action) *Router_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Get_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields: handler
func (_m *Router) Group(handler route.GroupFunc) {
	_m.Called(handler)
}

// Router_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type Router_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - handler route.GroupFunc
func (_e *Router_Expecter) Group(handler interface{}) *Router_Group_Call {
	return &Router_Group_Call{Call: _e.mock.On("Group", handler)}
}

func (_c *Router_Group_Call) Run(run func(handler route.GroupFunc)) *Router_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(route.GroupFunc))
	})
	return _c
}

func (_c *Router_Group_Call) Return() *Router_Group_Call {
	_c.Call.Return()
	return _c
}

func (_c *Router_Group_Call) RunAndReturn(run func(route.GroupFunc)) *Router_Group_Call {
	_c.Run(run)
	return _c
}

// Middleware provides a mock function with given fields: middlewares
func (_m *Router) Middleware(middlewares ...http.Middleware) route.Router {
	_va := make([]interface{}, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Middleware")
	}

	var r0 route.Router
	if rf, ok := ret.Get(0).(func(...http.Middleware) route.Router); ok {
		r0 = rf(middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Router)
		}
	}

	return r0
}

// Router_Middleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Middleware'
type Router_Middleware_Call struct {
	*mock.Call
}

// Middleware is a helper method to define mock.On call
//   - middlewares ...http.Middleware
func (_e *Router_Expecter) Middleware(middlewares ...interface{}) *Router_Middleware_Call {
	return &Router_Middleware_Call{Call: _e.mock.On("Middleware",
		append([]interface{}{}, middlewares...)...)}
}

func (_c *Router_Middleware_Call) Run(run func(middlewares ...http.Middleware)) *Router_Middleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]http.Middleware, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(http.Middleware)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Router_Middleware_Call) Return(_a0 route.Router) *Router_Middleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Middleware_Call) RunAndReturn(run func(...http.Middleware) route.Router) *Router_Middleware_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: path, handler
func (_m *Router) Options(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type Router_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Options(path interface{}, handler interface{}) *Router_Options_Call {
	return &Router_Options_Call{Call: _e.mock.On("Options", path, handler)}
}

func (_c *Router_Options_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Options_Call) Return(_a0 route.Action) *Router_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Options_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: path, handler
func (_m *Router) Patch(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type Router_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Patch(path interface{}, handler interface{}) *Router_Patch_Call {
	return &Router_Patch_Call{Call: _e.mock.On("Patch", path, handler)}
}

func (_c *Router_Patch_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Patch_Call) Return(_a0 route.Action) *Router_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Patch_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: path, handler
func (_m *Router) Post(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type Router_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Post(path interface{}, handler interface{}) *Router_Post_Call {
	return &Router_Post_Call{Call: _e.mock.On("Post", path, handler)}
}

func (_c *Router_Post_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Post_Call) Return(_a0 route.Action) *Router_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Post_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Prefix provides a mock function with given fields: path
func (_m *Router) Prefix(path string) route.Router {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Prefix")
	}

	var r0 route.Router
	if rf, ok := ret.Get(0).(func(string) route.Router); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Router)
		}
	}

	return r0
}

// Router_Prefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prefix'
type Router_Prefix_Call struct {
	*mock.Call
}

// Prefix is a helper method to define mock.On call
//   - path string
func (_e *Router_Expecter) Prefix(path interface{}) *Router_Prefix_Call {
	return &Router_Prefix_Call{Call: _e.mock.On("Prefix", path)}
}

func (_c *Router_Prefix_Call) Run(run func(path string)) *Router_Prefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Router_Prefix_Call) Return(_a0 route.Router) *Router_Prefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Prefix_Call) RunAndReturn(run func(string) route.Router) *Router_Prefix_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: path, handler
func (_m *Router) Put(path string, handler http.HandlerFunc) route.Action {
	ret := _m.Called(path, handler)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.HandlerFunc) route.Action); ok {
		r0 = rf(path, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Router_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - handler http.HandlerFunc
func (_e *Router_Expecter) Put(path interface{}, handler interface{}) *Router_Put_Call {
	return &Router_Put_Call{Call: _e.mock.On("Put", path, handler)}
}

func (_c *Router_Put_Call) Run(run func(path string, handler http.HandlerFunc)) *Router_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *Router_Put_Call) Return(_a0 route.Action) *Router_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Put_Call) RunAndReturn(run func(string, http.HandlerFunc) route.Action) *Router_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Resource provides a mock function with given fields: path, controller
func (_m *Router) Resource(path string, controller http.ResourceController) route.Action {
	ret := _m.Called(path, controller)

	if len(ret) == 0 {
		panic("no return value specified for Resource")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, http.ResourceController) route.Action); ok {
		r0 = rf(path, controller)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Resource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resource'
type Router_Resource_Call struct {
	*mock.Call
}

// Resource is a helper method to define mock.On call
//   - path string
//   - controller http.ResourceController
func (_e *Router_Expecter) Resource(path interface{}, controller interface{}) *Router_Resource_Call {
	return &Router_Resource_Call{Call: _e.mock.On("Resource", path, controller)}
}

func (_c *Router_Resource_Call) Run(run func(path string, controller http.ResourceController)) *Router_Resource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.ResourceController))
	})
	return _c
}

func (_c *Router_Resource_Call) Return(_a0 route.Action) *Router_Resource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Resource_Call) RunAndReturn(run func(string, http.ResourceController) route.Action) *Router_Resource_Call {
	_c.Call.Return(run)
	return _c
}

// Static provides a mock function with given fields: path, root
func (_m *Router) Static(path string, root string) route.Action {
	ret := _m.Called(path, root)

	if len(ret) == 0 {
		panic("no return value specified for Static")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, string) route.Action); ok {
		r0 = rf(path, root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_Static_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Static'
type Router_Static_Call struct {
	*mock.Call
}

// Static is a helper method to define mock.On call
//   - path string
//   - root string
func (_e *Router_Expecter) Static(path interface{}, root interface{}) *Router_Static_Call {
	return &Router_Static_Call{Call: _e.mock.On("Static", path, root)}
}

func (_c *Router_Static_Call) Run(run func(path string, root string)) *Router_Static_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Router_Static_Call) Return(_a0 route.Action) *Router_Static_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_Static_Call) RunAndReturn(run func(string, string) route.Action) *Router_Static_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFS provides a mock function with given fields: path, fs
func (_m *Router) StaticFS(path string, fs nethttp.FileSystem) route.Action {
	ret := _m.Called(path, fs)

	if len(ret) == 0 {
		panic("no return value specified for StaticFS")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, nethttp.FileSystem) route.Action); ok {
		r0 = rf(path, fs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_StaticFS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFS'
type Router_StaticFS_Call struct {
	*mock.Call
}

// StaticFS is a helper method to define mock.On call
//   - path string
//   - fs nethttp.FileSystem
func (_e *Router_Expecter) StaticFS(path interface{}, fs interface{}) *Router_StaticFS_Call {
	return &Router_StaticFS_Call{Call: _e.mock.On("StaticFS", path, fs)}
}

func (_c *Router_StaticFS_Call) Run(run func(path string, fs nethttp.FileSystem)) *Router_StaticFS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(nethttp.FileSystem))
	})
	return _c
}

func (_c *Router_StaticFS_Call) Return(_a0 route.Action) *Router_StaticFS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_StaticFS_Call) RunAndReturn(run func(string, nethttp.FileSystem) route.Action) *Router_StaticFS_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFile provides a mock function with given fields: path, filepath
func (_m *Router) StaticFile(path string, filepath string) route.Action {
	ret := _m.Called(path, filepath)

	if len(ret) == 0 {
		panic("no return value specified for StaticFile")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string, string) route.Action); ok {
		r0 = rf(path, filepath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Router_StaticFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFile'
type Router_StaticFile_Call struct {
	*mock.Call
}

// StaticFile is a helper method to define mock.On call
//   - path string
//   - filepath string
func (_e *Router_Expecter) StaticFile(path interface{}, filepath interface{}) *Router_StaticFile_Call {
	return &Router_StaticFile_Call{Call: _e.mock.On("StaticFile", path, filepath)}
}

func (_c *Router_StaticFile_Call) Run(run func(path string, filepath string)) *Router_StaticFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Router_StaticFile_Call) Return(_a0 route.Action) *Router_StaticFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Router_StaticFile_Call) RunAndReturn(run func(string, string) route.Action) *Router_StaticFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
