// Code generated by mockery. DO NOT EDIT.

package route

import (
	route "github.com/goravel/framework/contracts/route"
	mock "github.com/stretchr/testify/mock"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields: name
func (_m *Action) Name(name string) route.Action {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 route.Action
	if rf, ok := ret.Get(0).(func(string) route.Action); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Action)
		}
	}

	return r0
}

// Action_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Action_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
//   - name string
func (_e *Action_Expecter) Name(name interface{}) *Action_Name_Call {
	return &Action_Name_Call{Call: _e.mock.On("Name", name)}
}

func (_c *Action_Name_Call) Run(run func(name string)) *Action_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Action_Name_Call) Return(_a0 route.Action) *Action_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Name_Call) RunAndReturn(run func(string) route.Action) *Action_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
