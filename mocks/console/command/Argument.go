// Code generated by mockery. DO NOT EDIT.

package command

import mock "github.com/stretchr/testify/mock"

// Argument is an autogenerated mock type for the Argument type
type Argument struct {
	mock.Mock
}

type Argument_Expecter struct {
	mock *mock.Mock
}

func (_m *Argument) EXPECT() *Argument_Expecter {
	return &Argument_Expecter{mock: &_m.Mock}
}

// ArgumentName provides a mock function with no fields
func (_m *Argument) ArgumentName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ArgumentName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Argument_ArgumentName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArgumentName'
type Argument_ArgumentName_Call struct {
	*mock.Call
}

// ArgumentName is a helper method to define mock.On call
func (_e *Argument_Expecter) ArgumentName() *Argument_ArgumentName_Call {
	return &Argument_ArgumentName_Call{Call: _e.mock.On("ArgumentName")}
}

func (_c *Argument_ArgumentName_Call) Run(run func()) *Argument_ArgumentName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Argument_ArgumentName_Call) Return(_a0 string) *Argument_ArgumentName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Argument_ArgumentName_Call) RunAndReturn(run func() string) *Argument_ArgumentName_Call {
	_c.Call.Return(run)
	return _c
}

// MaxOccurrences provides a mock function with no fields
func (_m *Argument) MaxOccurrences() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxOccurrences")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Argument_MaxOccurrences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxOccurrences'
type Argument_MaxOccurrences_Call struct {
	*mock.Call
}

// MaxOccurrences is a helper method to define mock.On call
func (_e *Argument_Expecter) MaxOccurrences() *Argument_MaxOccurrences_Call {
	return &Argument_MaxOccurrences_Call{Call: _e.mock.On("MaxOccurrences")}
}

func (_c *Argument_MaxOccurrences_Call) Run(run func()) *Argument_MaxOccurrences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Argument_MaxOccurrences_Call) Return(_a0 int) *Argument_MaxOccurrences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Argument_MaxOccurrences_Call) RunAndReturn(run func() int) *Argument_MaxOccurrences_Call {
	_c.Call.Return(run)
	return _c
}

// MinOccurrences provides a mock function with no fields
func (_m *Argument) MinOccurrences() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinOccurrences")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Argument_MinOccurrences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MinOccurrences'
type Argument_MinOccurrences_Call struct {
	*mock.Call
}

// MinOccurrences is a helper method to define mock.On call
func (_e *Argument_Expecter) MinOccurrences() *Argument_MinOccurrences_Call {
	return &Argument_MinOccurrences_Call{Call: _e.mock.On("MinOccurrences")}
}

func (_c *Argument_MinOccurrences_Call) Run(run func()) *Argument_MinOccurrences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Argument_MinOccurrences_Call) Return(_a0 int) *Argument_MinOccurrences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Argument_MinOccurrences_Call) RunAndReturn(run func() int) *Argument_MinOccurrences_Call {
	_c.Call.Return(run)
	return _c
}

// NewArgument creates a new instance of Argument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArgument(t interface {
	mock.TestingT
	Cleanup(func())
}) *Argument {
	mock := &Argument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
