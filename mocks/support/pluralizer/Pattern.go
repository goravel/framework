// Code generated by mockery. DO NOT EDIT.

package pluralizer

import mock "github.com/stretchr/testify/mock"

// Pattern is an autogenerated mock type for the Pattern type
type Pattern struct {
	mock.Mock
}

type Pattern_Expecter struct {
	mock *mock.Mock
}

func (_m *Pattern) EXPECT() *Pattern_Expecter {
	return &Pattern_Expecter{mock: &_m.Mock}
}

// Matches provides a mock function with given fields: word
func (_m *Pattern) Matches(word string) bool {
	ret := _m.Called(word)

	if len(ret) == 0 {
		panic("no return value specified for Matches")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pattern_Matches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Matches'
type Pattern_Matches_Call struct {
	*mock.Call
}

// Matches is a helper method to define mock.On call
//   - word string
func (_e *Pattern_Expecter) Matches(word interface{}) *Pattern_Matches_Call {
	return &Pattern_Matches_Call{Call: _e.mock.On("Matches", word)}
}

func (_c *Pattern_Matches_Call) Run(run func(word string)) *Pattern_Matches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Pattern_Matches_Call) Return(_a0 bool) *Pattern_Matches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pattern_Matches_Call) RunAndReturn(run func(string) bool) *Pattern_Matches_Call {
	_c.Call.Return(run)
	return _c
}

// NewPattern creates a new instance of Pattern. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPattern(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pattern {
	mock := &Pattern{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
