// Code generated by mockery. DO NOT EDIT.

package pluralizer

import mock "github.com/stretchr/testify/mock"

// Inflector is an autogenerated mock type for the Inflector type
type Inflector struct {
	mock.Mock
}

type Inflector_Expecter struct {
	mock *mock.Mock
}

func (_m *Inflector) EXPECT() *Inflector_Expecter {
	return &Inflector_Expecter{mock: &_m.Mock}
}

// Plural provides a mock function with given fields: word
func (_m *Inflector) Plural(word string) string {
	ret := _m.Called(word)

	if len(ret) == 0 {
		panic("no return value specified for Plural")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Inflector_Plural_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Plural'
type Inflector_Plural_Call struct {
	*mock.Call
}

// Plural is a helper method to define mock.On call
//   - word string
func (_e *Inflector_Expecter) Plural(word interface{}) *Inflector_Plural_Call {
	return &Inflector_Plural_Call{Call: _e.mock.On("Plural", word)}
}

func (_c *Inflector_Plural_Call) Run(run func(word string)) *Inflector_Plural_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inflector_Plural_Call) Return(_a0 string) *Inflector_Plural_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inflector_Plural_Call) RunAndReturn(run func(string) string) *Inflector_Plural_Call {
	_c.Call.Return(run)
	return _c
}

// Singular provides a mock function with given fields: word
func (_m *Inflector) Singular(word string) string {
	ret := _m.Called(word)

	if len(ret) == 0 {
		panic("no return value specified for Singular")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Inflector_Singular_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Singular'
type Inflector_Singular_Call struct {
	*mock.Call
}

// Singular is a helper method to define mock.On call
//   - word string
func (_e *Inflector_Expecter) Singular(word interface{}) *Inflector_Singular_Call {
	return &Inflector_Singular_Call{Call: _e.mock.On("Singular", word)}
}

func (_c *Inflector_Singular_Call) Run(run func(word string)) *Inflector_Singular_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inflector_Singular_Call) Return(_a0 string) *Inflector_Singular_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inflector_Singular_Call) RunAndReturn(run func(string) string) *Inflector_Singular_Call {
	_c.Call.Return(run)
	return _c
}

// NewInflector creates a new instance of Inflector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInflector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inflector {
	mock := &Inflector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
