// Code generated by mockery. DO NOT EDIT.

package pluralizer

import mock "github.com/stretchr/testify/mock"

// Substitution is an autogenerated mock type for the Substitution type
type Substitution struct {
	mock.Mock
}

type Substitution_Expecter struct {
	mock *mock.Mock
}

func (_m *Substitution) EXPECT() *Substitution_Expecter {
	return &Substitution_Expecter{mock: &_m.Mock}
}

// From provides a mock function with no fields
func (_m *Substitution) From() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for From")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Substitution_From_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'From'
type Substitution_From_Call struct {
	*mock.Call
}

// From is a helper method to define mock.On call
func (_e *Substitution_Expecter) From() *Substitution_From_Call {
	return &Substitution_From_Call{Call: _e.mock.On("From")}
}

func (_c *Substitution_From_Call) Run(run func()) *Substitution_From_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Substitution_From_Call) Return(_a0 string) *Substitution_From_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Substitution_From_Call) RunAndReturn(run func() string) *Substitution_From_Call {
	_c.Call.Return(run)
	return _c
}

// To provides a mock function with no fields
func (_m *Substitution) To() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for To")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Substitution_To_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'To'
type Substitution_To_Call struct {
	*mock.Call
}

// To is a helper method to define mock.On call
func (_e *Substitution_Expecter) To() *Substitution_To_Call {
	return &Substitution_To_Call{Call: _e.mock.On("To")}
}

func (_c *Substitution_To_Call) Run(run func()) *Substitution_To_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Substitution_To_Call) Return(_a0 string) *Substitution_To_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Substitution_To_Call) RunAndReturn(run func() string) *Substitution_To_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubstitution creates a new instance of Substitution. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubstitution(t interface {
	mock.TestingT
	Cleanup(func())
}) *Substitution {
	mock := &Substitution{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
