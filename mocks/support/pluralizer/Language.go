// Code generated by mockery. DO NOT EDIT.

package pluralizer

import (
	pluralizer "github.com/goravel/framework/contracts/support/pluralizer"
	mock "github.com/stretchr/testify/mock"
)

// Language is an autogenerated mock type for the Language type
type Language struct {
	mock.Mock
}

type Language_Expecter struct {
	mock *mock.Mock
}

func (_m *Language) EXPECT() *Language_Expecter {
	return &Language_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with no fields
func (_m *Language) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Language_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Language_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Language_Expecter) Name() *Language_Name_Call {
	return &Language_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Language_Name_Call) Run(run func()) *Language_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Language_Name_Call) Return(_a0 string) *Language_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Language_Name_Call) RunAndReturn(run func() string) *Language_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PluralRuleset provides a mock function with no fields
func (_m *Language) PluralRuleset() pluralizer.Ruleset {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluralRuleset")
	}

	var r0 pluralizer.Ruleset
	if rf, ok := ret.Get(0).(func() pluralizer.Ruleset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pluralizer.Ruleset)
		}
	}

	return r0
}

// Language_PluralRuleset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluralRuleset'
type Language_PluralRuleset_Call struct {
	*mock.Call
}

// PluralRuleset is a helper method to define mock.On call
func (_e *Language_Expecter) PluralRuleset() *Language_PluralRuleset_Call {
	return &Language_PluralRuleset_Call{Call: _e.mock.On("PluralRuleset")}
}

func (_c *Language_PluralRuleset_Call) Run(run func()) *Language_PluralRuleset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Language_PluralRuleset_Call) Return(_a0 pluralizer.Ruleset) *Language_PluralRuleset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Language_PluralRuleset_Call) RunAndReturn(run func() pluralizer.Ruleset) *Language_PluralRuleset_Call {
	_c.Call.Return(run)
	return _c
}

// SingularRuleset provides a mock function with no fields
func (_m *Language) SingularRuleset() pluralizer.Ruleset {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SingularRuleset")
	}

	var r0 pluralizer.Ruleset
	if rf, ok := ret.Get(0).(func() pluralizer.Ruleset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pluralizer.Ruleset)
		}
	}

	return r0
}

// Language_SingularRuleset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SingularRuleset'
type Language_SingularRuleset_Call struct {
	*mock.Call
}

// SingularRuleset is a helper method to define mock.On call
func (_e *Language_Expecter) SingularRuleset() *Language_SingularRuleset_Call {
	return &Language_SingularRuleset_Call{Call: _e.mock.On("SingularRuleset")}
}

func (_c *Language_SingularRuleset_Call) Run(run func()) *Language_SingularRuleset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Language_SingularRuleset_Call) Return(_a0 pluralizer.Ruleset) *Language_SingularRuleset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Language_SingularRuleset_Call) RunAndReturn(run func() pluralizer.Ruleset) *Language_SingularRuleset_Call {
	_c.Call.Return(run)
	return _c
}

// NewLanguage creates a new instance of Language. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLanguage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Language {
	mock := &Language{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
