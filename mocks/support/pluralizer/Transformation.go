// Code generated by mockery. DO NOT EDIT.

package pluralizer

import mock "github.com/stretchr/testify/mock"

// Transformation is an autogenerated mock type for the Transformation type
type Transformation struct {
	mock.Mock
}

type Transformation_Expecter struct {
	mock *mock.Mock
}

func (_m *Transformation) EXPECT() *Transformation_Expecter {
	return &Transformation_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: word
func (_m *Transformation) Apply(word string) string {
	ret := _m.Called(word)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Transformation_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Transformation_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - word string
func (_e *Transformation_Expecter) Apply(word interface{}) *Transformation_Apply_Call {
	return &Transformation_Apply_Call{Call: _e.mock.On("Apply", word)}
}

func (_c *Transformation_Apply_Call) Run(run func(word string)) *Transformation_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Transformation_Apply_Call) Return(_a0 string) *Transformation_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transformation_Apply_Call) RunAndReturn(run func(string) string) *Transformation_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransformation creates a new instance of Transformation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransformation(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transformation {
	mock := &Transformation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
